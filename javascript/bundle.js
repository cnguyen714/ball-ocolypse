/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./javascript/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./javascript/Beam.js":
/*!****************************!*\
  !*** ./javascript/Beam.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n\n\n\n\nconst WIDTH = 50;\nconst KNOCKBACK = 4;\nconst DAMAGE = 300;\n// const COLOR = \"white\";\n\nclass Beam extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(game, startX, startY) {\n    super(game);\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.width = WIDTH;\n    this.damage = DAMAGE;\n    this.knockback = KNOCKBACK;\n    this.aliveTime = 5;\n    // this.activeTime = 5;\n    this.initialTime = this.aliveTime;\n\n    // this.update = this.update.bind(this);\n    // this.draw = this.draw.bind(this);\n  }\n\n\n  checkCollision(obj) {\n    if (!obj.alive) return; //Don't check collision if object is not alive\n\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\n    let dist = Math.abs(this.aim.x * diff.y - this.aim.y * diff.x) / this.aim.length();\n\n    \n    // let diff = Vector.difference(this.pos, obj.pos);\n    // let distSqr = diff.dot(diff);\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      if (this.width / 2 + obj.r > dist) {\n      // if (true) {\n        diff.normalize();\n        diff.multiply(-1);\n        obj.vel.add(diff.multiply(this.knockback));\n        obj.health -= this.damage;\n        if (obj.health <= 0) {\n          obj.alive = false;\n          this.game.difficulty += 0.002 * this.game.difficultyRate;\n\n          this.game.score++;\n        }\n      }\n    }\n\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n\n    if (this.aliveTime === this.initialTime) {\n      this.aim = this.game.player.aim;\n      this.game.entities.forEach(entity => { this.checkCollision(entity) });\n      // this.game.freeze(5);\n    }\n    if (this.aliveTime <= 0) {\n      this.alive = false;\n    }\n    this.aliveTime--;\n    this.cb();\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    let forward = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0);\n    let angle = Math.atan2(this.aim.y, this.aim.x);\n    if (this.aliveTime > this.initialTime - 2) {\n      this.ctx.save();\n\n      // this.ctx.beginPath();\n      this.ctx.fillStyle = this.color;\n      this.ctx.strokeStyle = this.color;\n      this.ctx.translate(this.pos.x + Math.sin(angle) * this.width / 2,\n                         this.pos.y - Math.cos(angle) * this.width / 2);\n      this.ctx.rotate(angle);\n      this.ctx.fillRect(0, 0, 200, this.width);\n      this.ctx.restore();\n    } else {\n      // this.ctx.fillStyle = \"rgba(0,0,0,0)\";\n      this.ctx.save();\n\n      this.width += 5;\n      \n      this.ctx.shadowBlur = 20;\n      this.ctx.shadowColor = \"white\";\n      this.ctx.fillStyle = this.color;\n\n      // this.ctx.fillStyle = \"rgba(0,0,0,0)\";\n      this.ctx.strokeStyle = \"white\";\n      this.ctx.translate(this.pos.x + Math.sin(angle) * this.width / 2, \n                         this.pos.y - Math.cos(angle) * this.width / 2);\n      this.ctx.rotate(angle);\n      this.ctx.fillRect(0, 0, 200, this.width);\n      this.ctx.restore();\n\n\n    }\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Beam);\n\n//# sourceURL=webpack:///./javascript/Beam.js?");

/***/ }),

/***/ "./javascript/EnemyCircle.js":
/*!***********************************!*\
  !*** ./javascript/EnemyCircle.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n\n\n\n\n\n\nconst MAX_SPEED = 3;\nconst RADIUS = 7;\nconst COLOR = \"#a64942\";\nconst ACCEL = 1;\nconst KNOCKBACK = 10;\nconst ENEMY_KNOCKBACK_MULTIPLIER = 2.5;\nconst DAMPENING_COEFFICIENT = 0.7;\nconst SPREAD_FACTOR = 2.0;\nconst HEALTH = 100;\nconst DAMAGE = 1;\nconst SCORE = 1;\n\nclass EnemyCircle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(game) {\n    super(game);\n    this.maxSpeed = MAX_SPEED;\n    this.accel = ACCEL;\n    this.aiCallback = () => {};\n\n    this.health = HEALTH + game.difficulty * 2;\n\n    this.r = RADIUS;\n    this.color = COLOR;\n    this.damage = DAMAGE;\n    this.score = SCORE;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  validatePosition(rectX, rectY) {\n\n  }\n\n  dampSpeed() {\n    let vel = this.vel.length();\n    if (vel > MAX_SPEED) {\n      this.vel.multiply(DAMPENING_COEFFICIENT);\n    }\n  }\n\n  checkCollision(obj) {\n    if (!obj.alive) return;\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\n    let distSqr = diff.dot(diff);\n    if(obj instanceof _Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      if (obj.moveState === \"STATE_DASHING\" || obj.invul > 0) return;\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\n        let sound = new Audio(`${document.URL.substr(0, document.URL.lastIndexOf('/'))}/assets/impact.wav`);\n        sound.play();\n        let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](game, obj.pos.x + diff.x / 2, obj.pos.y + diff.y / 2, this.r * 2);\n        explosion.color = 'red';\n        explosion.aliveTime = 5;\n        obj.game.particles.push(explosion);\n\n        diff.normalize();\n        diff.multiply(KNOCKBACK);\n        obj.vel.subtract(diff.dup().multiply(this.r / RADIUS));\n        this.vel.add(diff.multiply(ENEMY_KNOCKBACK_MULTIPLIER));\n        obj.health -= this.damage;\n      } \n    } else if (obj instanceof EnemyCircle) {\n      if (obj.pos.equals(this.pos)) return;\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\n        diff.normalize();\n        diff.multiply(SPREAD_FACTOR);\n        obj.vel.subtract(diff.dup().multiply(this.r / RADIUS));\n        this.vel.add(diff.dup().multiply(RADIUS / this.r));\n      }\n    }\n\n  }\n\n  update() {\n    if (!this.alive) return;\n    this.aiCallback();\n\n    this.dampSpeed();\n    this.addVelocityTimeDelta();\n// this.validatePosition(this.cvs.width, this.cvs.height);\n\n    // Check collision with player\n    this.checkCollision(this.game.players[0]);\n\n    // Many-many collision is very heavy - please refactor at some point or implement quadtree\n    this.game.entities.forEach(entity => this.checkCollision(entity));\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.strokeStyle = 'black';\n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.closePath();\n    this.ctx.restore();\n\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EnemyCircle);\n\n//# sourceURL=webpack:///./javascript/EnemyCircle.js?");

/***/ }),

/***/ "./javascript/Explosion.js":
/*!*********************************!*\
  !*** ./javascript/Explosion.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n\n\n\n\nconst RADIUS = 5;\nconst COLOR = \"white\";\n\nclass Explosion extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(game, startX, startY, startR = RADIUS) {\n    super(game);\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.r = startR;\n    this.color = COLOR;\n    this.aliveTime = 20;\n    this.initialAliveTime = this.aliveTime;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n\n    if (this.aliveTime <= 0) {\n      this.alive = false;\n    }\n    this.aliveTime--;\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n\n    if (this.aliveTime > 5) {\n      this.ctx.save();\n\n      this.ctx.beginPath();\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n      this.ctx.fillStyle = this.color;\n      this.ctx.strokeStyle = this.color;\n      this.ctx.fill();\n      this.ctx.stroke();\n      this.ctx.closePath();\n      this.ctx.restore();\n\n\n    } else {\n      this.ctx.save();\n\n      this.r += 2;\n      this.ctx.beginPath();\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\n      this.ctx.fill();\n      this.ctx.strokeStyle = this.color;\n     \n      this.ctx.shadowBlur = 30;\n      this.ctx.shadowColor =  this.color;\n      this.ctx.stroke();  \n\n      this.ctx.restore();    \n    }\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Explosion);\n\n//# sourceURL=webpack:///./javascript/Explosion.js?");

/***/ }),

/***/ "./javascript/Game.js":
/*!****************************!*\
  !*** ./javascript/Game.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Player */ \"./javascript/Player.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle_factory */ \"./javascript/particle_factory.js\");\n/* harmony import */ var _enemy_factory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./enemy_factory */ \"./javascript/enemy_factory.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Slam */ \"./javascript/Slam.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n\n\n\n\n\n\n \n\n\n\n// My laptop has a performance limit of around 700 particles\n// Delta time is implemented by accelerating movement to perceive less\n// lag, however the game still runs slower\n\nconst PATH = document.URL.substr(0, document.URL.lastIndexOf('/'));\nconst STATE_INIT = \"STATE_INIT\";\nconst STATE_BEGIN = \"STATE_BEGIN\";\nconst STATE_RUNNING = \"STATE_RUNNING\";\nconst STATE_OVER = \"STATE_OVER\";\n\nconst FPS = 60;\nconst NORMAL_TIME_DELTA = 1000 / FPS;\nconst MIN_FRAME_RATE = 54; // Limits enemy production to save frames\n\nconst BASE_SPAWN_RATE = 4; // 5\nconst DIFFICULTY_START = 1;\nconst DIFFICULTY_INTERVAL = 400;\nconst DIFFICULTY_MULTIPLIER = 0.05;\nconst DIFFICULTY_RATE = 4;\n\nconst STARTING_HEALTH = 250;\n\nclass Game {\n  constructor(cvs, ctx) {\n    this.STATE_INIT = STATE_INIT;\n    this.STATE_BEGIN = STATE_BEGIN;\n    this.STATE_RUNNING = STATE_RUNNING;\n    this.STATE_OVER = STATE_OVER;\n    this.cvs = cvs;\n    this.ctx = ctx;\n    this.highscore = 0;\n    this.score = 0;\n    this.pauseTime = 0;\n\n    this.timeTracker = (new Date).getTime() + NORMAL_TIME_DELTA;\n    this.prevTime = (new Date).getTime();\n\n    this.state = STATE_INIT;\n\n    this.init = this.init.bind(this);\n    this.loop = this.loop.bind(this);\n  }\n\n  init() {\n    this.ctx.canvas.width = window.innerWidth;\n    this.ctx.canvas.height = window.innerHeight;\n\n    this.score = 0;\n    this.loops = 0;\n    this.loopCount = 0;\n    this.timeSeconds = 0;\n    this.difficulty = DIFFICULTY_START;\n    this.difficultyRate = DIFFICULTY_RATE;\n    // this.spawnRate = SPAWN_RATE;\n    this.fpsCount = 0;\n    this.fps = 0;\n    this.timeDelta = NORMAL_TIME_DELTA;\n    this.normalTimeDelta = NORMAL_TIME_DELTA;\n    \n    this.players = [];\n    this.player = new _Player__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n    this.player.alive = false;\n    this.players.push(this.player);\n    this.cameraPos = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.player.pos.x, this.player.pos.y);\n    \n    this.entities = [];\n    this.particles = [];\n    this.menus = [];\n\n    this.player.mountController();\n    this.state = STATE_BEGIN;\n\n    let startGameMenu = new _GameObject__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game);\n    startGameMenu.pos.x = 0,\n    startGameMenu.pos.y = this.cvs.height / 2;\n    startGameMenu.height = 0;\n    startGameMenu.width = this.cvs.width;\n    startGameMenu.color = \"rgba(0,0,0,0.4)\";\n    startGameMenu.aliveTime = 60;\n    startGameMenu.time = this.timeSeconds;\n    startGameMenu.difficulty = this.difficulty;\n    startGameMenu.draw = function () {\n      this.aliveTime--;\n      this.ctx.save();\n      this.ctx.fillStyle = this.color;\n      this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (60 - this.aliveTime) / 60, this.cvs.width, this.cvs.height / 4 * (60 - this.aliveTime) / 60);\n      if (this.aliveTime <= 0) {\n        this.aliveTime = 0;\n        this.ctx.fillStyle = 'white';\n        this.ctx.font = '20px sans-serif';\n        this.ctx.fillText(`Use the [WASD] keys to move around`, this.cvs.width / 2 - 150, this.cvs.height - 160);\n        this.ctx.fillText(`Hold [SHIFT] to move faster`, this.cvs.width / 2 - 150, this.cvs.height - 140);\n        this.ctx.fillText(`Use your mouse to aim, hold [LeftClick] to fire bullets`, this.cvs.width / 2 - 150, this.cvs.height - 120);\n        this.ctx.fillText(`Tap [RightClick] to dash and push enemies away!`, this.cvs.width / 2 - 150, this.cvs.height - 100);\n        this.ctx.fillText(`Press any of these keys to start!`, this.cvs.width / 2 - 150, this.cvs.height - 80);\n        this.ctx.fillText(`Highscore: ${this.game.highscore}`, this.cvs.width / 2 - 60, this.cvs.height - 40);\n\n        this.ctx.fillStyle = 'teal';\n        this.ctx.font = `${this.cvs.height / 8}px sans-serif`;\n        this.ctx.fillText(`Ball-popcalypse`, this.cvs.width * 0.4 / 16, this.cvs.height * 17/32 );\n        this.ctx.fillStyle = 'gray';\n        this.ctx.font = `${this.cvs.height / 32}px sans-serif`;\n        // this.ctx.fillText(`Can you survive the ball menace?`, this.cvs.width * 1.5 / 16, this.cvs.height * 19/32 );\n      }\n      this.ctx.restore();\n\n    }\n    \n    this.menus.push(startGameMenu);\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n  }\n\n  startGame() {\n    this.loopCount = 0;\n    this.state = STATE_RUNNING;\n    this.menus = [];\n    this.entities = [];\n    this.player.alive = true;\n    this.player.maxHealth = STARTING_HEALTH;\n    this.player.health = STARTING_HEALTH;\n    this.particles.push(new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y));\n\n  }\n\n  endGame() {\n    this.state = STATE_OVER;\n    this.freeze(15);\n    this.player.alive = false;\n    this.player.color = 'black'; \n    let sound = new Audio(`${PATH}/assets/DEFEATED.wav`);\n    sound.volume = 0.3;\n    sound.play();\n\n    let explode1 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\n    explode1.color = 'white';\n    explode1.knockback = 200;\n    explode1.damage = 0;\n    explode1.r = 310;\n    this.particles.push(explode1);\n    let explode2 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\n    explode2.color = 'gray';\n    explode2.knockback = 0;\n    explode2.damage = 50;\n    explode2.r = 300;\n    this.particles.push(explode2);\n    let explode3 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\n    explode3.color = 'black';\n    explode3.knockback = 0; \n    explode3.damage = 1000;\n    explode3.r = 100;\n    this.particles.push(explode3);\n\n    let drawEnd = function() {\n      let endGameMenu = new _GameObject__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game);\n      endGameMenu.pos.x = 0,\n      endGameMenu.pos.y = this.cvs.height / 2;\n      endGameMenu.height = 0;\n      endGameMenu.width = this.cvs.width;\n      endGameMenu.color = \"rgba(0,0,0,0.5)\";\n      endGameMenu.aliveTime = 60;\n      endGameMenu.time = this.timeSeconds;\n      endGameMenu.difficulty = this.difficulty;\n      endGameMenu.draw = function() {\n        this.aliveTime--;\n        this.ctx.save();\n        this.ctx.fillStyle = this.color;\n        this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (60 - this.aliveTime) / 60, this.cvs.width, this.cvs.height / 4 * (60 - this.aliveTime) / 60);\n        if (this.aliveTime <=0) {\n          this.aliveTime = 0;\n          this.ctx.fillStyle = 'white';\n          this.ctx.font = '20px sans-serif';\n          \n          this.ctx.fillText(`Score: ${this.game.score}`, this.cvs.width / 2 - 30, this.cvs.height / 2 - 40);\n          this.ctx.fillText(`Highscore: ${this.game.highscore}`, this.cvs.width / 2 - 30, this.cvs.height / 2 - 20 );\n          this.ctx.fillText(`Time: ${this.time}`, this.cvs.width / 2 - 30, this.cvs.height / 2 );\n          this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, this.cvs.width / 2 - 30, this.cvs.height / 2 + 20);\n          this.ctx.fillText(`Press [Enter] to restart`, this.cvs.width / 2 - 60, this.cvs.height / 2 + 80);\n\n        }\n        this.ctx.restore();        \n\n      }\n      this.menus.push(endGameMenu);\n    }\n\n    drawEnd = drawEnd.bind(this);\n    setTimeout(drawEnd, 2000);\n\n  }\n\n  restartGame() {\n    this.init();\n  }\n\n  freeze(n) {\n    this.pauseTime = n;\n  }\n\n  update() {\n    this.loopCount++;\n    if (this.highscore < this.score) this.highscore = this.score;\n\n\n    switch(this.state) {\n      case STATE_INIT: \n        this.init();\n        break;\n      case STATE_BEGIN:\n        if (this.loopCount % 120 === 0 && this.fps >= MIN_FRAME_RATE && this.loopCount > 60) {\n          this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n          if (this.loopCount % 240 === 0) {\n            this.player.pos.x = 200 + Math.random() * (this.cvs.width - 200 * 2);\n            this.player.pos.y = 200 + Math.random() * (this.cvs.height - 200 * 2);\n          }\n        }\n        this.players.forEach(entity => entity.update());\n        this.entities.forEach(entity => entity.update());\n        this.particles.forEach(entity => entity.update());\n\n        break;\n      case STATE_RUNNING:\n        if(this.loopCount % DIFFICULTY_INTERVAL === 0) {\n          this.difficulty *= 1 + DIFFICULTY_MULTIPLIER * DIFFICULTY_RATE;\n        }\n        \n        // Stop making enemies if you miss too many frame deadlines\n        let spawnRate = 20 - Math.floor(this.difficulty);\n        spawnRate = spawnRate <= 1 ? 1 : spawnRate;\n        if (this.loopCount % (BASE_SPAWN_RATE + spawnRate)  === 0 && this.fps >= MIN_FRAME_RATE && this.loopCount > 60) {\n          this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));            \n        }\n        \n        this.entities.filter(entity => !entity.alive).forEach(entity => {\n          let sound = new Audio(`${PATH}/assets/boom2.wav`);\n          sound.volume = 0.7;\n          sound.play();\n          \n          this.particles.push(new _Explosion__WEBPACK_IMPORTED_MODULE_6__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r))\n        });\n        this.player.update();\n        this.entities = this.entities.filter(entity => entity.alive);\n        this.entities.forEach(entity => entity.update());\n        this.particles = this.particles.filter(entity => entity.alive);\n        this.particles.forEach(entity => entity.update());\n        if(this.player.health <= 0) {\n          this.endGame();\n        }\n        break;\n      case STATE_OVER:\n\n        // this.player.update();\n\n        // if (this.loopCount % (Math.floor(SPAWN_RATE * 1.5)) === 0) {\n          this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\n          // if (this.fps <= MIN_FRAME_RATE - 5) this.entities[0].alive = false;          \n        // }\n        this.entities.forEach(entity => {\n          let diff = _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"].difference(entity.pos, this.player.pos);\n          let distSqr = diff.dot(diff);\n\n          if (entity.r * entity.r + this.player.r * this.player.r  + 100 > distSqr) {\n                entity.alive = false;\n              }\n        })\n        this.entities.filter(entity => !entity.alive).forEach(entity => {\n          // if (this.loopCount % 5 === 0) {\n          //   let sound = new Audio(\"../assets/boom2.wav\");\n          //   sound.play();\n          // }\n          this.particles.push(new _Explosion__WEBPACK_IMPORTED_MODULE_6__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r))\n        });\n        this.entities = this.entities.filter(entity => entity.alive);\n        this.entities.forEach(entity => entity.update());\n\n        this.particles = this.particles.filter(entity => entity.alive);\n        this.particles.forEach(entity => entity.update());\n\n\n        // this.restartGame();\n        break;\n      default:\n        break;\n    }\n  }\n\n  drawCursor() {\n\n    let cursorSize = 8;\n    this.ctx.save();\n    this.ctx.beginPath();\n    // this.ctx.arc(this.player.mousePos.x, this.player.mousePos.y, 4, 0, 2 * Math.PI);\n    // this.ctx.fillStyle = \"rgba(0,0,0,0)\";\n    this.ctx.strokeStyle = \"yellow\";\n    this.ctx.lineWidth = 2;\n    this.ctx.moveTo(this.player.mousePos.x - cursorSize, this.player.mousePos.y);\n    this.ctx.lineTo(this.player.mousePos.x + cursorSize, this.player.mousePos.y);\n    this.ctx.moveTo(this.player.mousePos.x, this.player.mousePos.y - cursorSize);\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y + cursorSize);\n    this.ctx.stroke();\n    let forward = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 0);\n    // let angle = Math.acos(this.player.aim.dot(forward) / this.player.aim.length());\n    let dot = this.player.aim.dot(forward);\n    let det = this.player.aim.x * forward.y - this.player.aim.y * forward.x;\n    let angle = Math.atan2(this.player.aim.y, this.player.aim.x);\n\n    this.ctx.font = '20px sans-serif';\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillText(`Angle: ${angle / Math.PI * 180}`, this.player.mousePos.x, this.player.mousePos.y);\n\n    this.ctx.restore();\n  }\n\n\n  showFPS() {\n    this.ctx.save();\n    this.ctx.font = '20px sans-serif';\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillText(`FPS: ${this.fps}`, this.cvs.width - 90, 22);\n    this.ctx.fillText(`obj: ${this.particles.length + this.entities.length}`, this.cvs.width - 90, 42);\n    this.ctx.restore();\n  }\n\n  draw() {\n    this.ctx.canvas.width = window.innerWidth;\n    this.ctx.canvas.height = window.innerHeight;\n\n    switch (this.state) {\n      case STATE_INIT:\n        break;\n      case STATE_BEGIN:\n        this.particles.forEach(entity => entity.draw());\n        // this.player.draw();\n        this.entities.forEach(entity => entity.draw());\n        this.menus.forEach(entity => entity.draw());\n\n        break;\n      case STATE_RUNNING:\n        this.ctx.save();\n        this.ctx.font = '20px sans-serif';\n        this.ctx.fillStyle = `rgba(${21 + ((this.player.maxHealth - this.player.health) / this.player.maxHealth) * 70},21,21)`;\n        this.ctx.fillRect(0, 0, this.cvs.width, this.cvs.height);\n        this.ctx.fillStyle = `rgba(${200 - (this.player.health / this.player.maxHealth * 200)},${this.player.health / this.player.maxHealth * 120},0)`;\n        this.ctx.fillRect(0, 0, this.cvs.width * this.player.health / this.player.maxHealth, 9);\n        this.ctx.restore();\n\n        this.particles.forEach(entity => entity.draw());\n        this.player.draw();\n        this.entities.forEach(entity => entity.draw());\n        this.menus.forEach(entity => entity.draw());\n\n        \n        this.ctx.save();\n        this.ctx.font = '20px sans-serif';\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillText(`Health: ${this.player.health}`, this.cvs.width / 2, 22);\n        this.ctx.fillText(`Score: ${this.score}`, 10, 22);\n        this.ctx.fillText(`Highscore: ${this.highscore}`, 10, 42);\n        this.ctx.fillText(`Time: ${this.timeSeconds}`, 10, 62);\n        this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, 10, 82);\n        this.ctx.restore();\n        break;\n      case STATE_OVER:\n\n        this.particles.forEach(entity => entity.draw());\n        this.player.draw();\n        this.entities.forEach(entity => entity.draw());\n        this.menus.forEach(entity => entity.draw());\n        \n      break;\n      default:\n        break;\n    }\n    this.drawCursor();\n    this.showFPS();\n  }\n\n  loop() {\n    let time = (new Date).getTime();\n    this.timeDelta = time - this.prevTime;\n    this.prevTime = time;\n    \n    if (this.pauseTime === 0) {\n      this.update();\n      this.draw();\n    } else {\n      this.pauseTime--;\n    }\n\n    this.fpsCount++;\n    if (time > this.timeTracker) {\n      this.fps = this.fpsCount;\n      this.fpsCount = 0;\n      this.timeTracker += 1000;\n      this.timeSeconds++;\n    }\n    window.requestAnimationFrame(this.loop);\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack:///./javascript/Game.js?");

/***/ }),

/***/ "./javascript/GameObject.js":
/*!**********************************!*\
  !*** ./javascript/GameObject.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n\n\n\nconst COLOR = 'black';\nconst RADIUS = 3;\nconst MAX_HEALTH = 100;\n\n\n// May be inefficient to create new position vectors all the time\nclass GameObject {\n  constructor(game) {\n    this.game = game;\n    this.cvs = game.cvs;\n    this.ctx = game.ctx;\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.alive = true;\n    this.pauseTime = 0;\n\n    this.maxHealth = MAX_HEALTH;\n    this.health = MAX_HEALTH;\n\n    this.radius = RADIUS;\n    this.color = COLOR;\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  validatePosition(rectX, rectY) {\n  }\n\n  update() {\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n  }\n  // Multiply velocity by the fractional difference in timeDelta\n  // Does not skip frames, but gives the illusion of same speed\n  addVelocityTimeDelta() {\n    this.pos.add(this.vel.dup().multiply(this.game.timeDelta / this.game.normalTimeDelta));\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GameObject);\n\n//# sourceURL=webpack:///./javascript/GameObject.js?");

/***/ }),

/***/ "./javascript/Particle.js":
/*!********************************!*\
  !*** ./javascript/Particle.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n\n\n\n\nconst RADIUS = 2;\nconst KNOCKBACK = 20;\nconst DAMAGE = 25;\nconst COLOR = \"#14ffec\";\n\nclass Particle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(\n    game, \n    startX = 0, \n    startY = 0, \n    vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0,0), \n    cb = () => {} \n  ) {\n    super(game);\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\n    this.vel = vel;\n    this.r = RADIUS;\n    this.color = COLOR;\n    this.damage = DAMAGE;\n    this.knockback = KNOCKBACK;\n    this.cb = cb;\n    this.aliveTime = 1;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  validatePosition(rectX, rectY) {\n    if ( this.pos.x > rectX + this.r \n      || this.pos.x < 0 - this.r \n      || this.pos.y > rectY + this.r \n      || this.pos.y < 0 - this.r ) { \n        this.alive = false;\n      };\n  }\n\n  checkCollision (obj) {\n    if (!obj.alive) return; //Don't check collision if object is not alive\n\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\n    let distSqr = diff.dot(diff);\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\n        this.alive = false;\n        this.vel.normalize();\n        this.vel.multiply(this.knockback / Math.pow(obj.r / 6, 2));\n        obj.vel.add(this.vel);\n        obj.health -= this.damage;\n        if (obj.health <= 0) {\n          obj.alive = false;\n          this.game.difficulty += 0.002 * this.game.difficultyRate;\n          this.game.score += obj.score;\n        }\n      }\n    }\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n    this.cb();\n    this.addVelocityTimeDelta();\n    this.game.entities.forEach(entity => { this.checkCollision(entity) });\n    this.validatePosition(this.cvs.width, this.cvs.height);\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n    // this.ctx.strokeStyle = this.color;\n    // this.ctx.stroke();\n\n    this.ctx.closePath();\n    this.ctx.restore();\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Particle);\n\n//# sourceURL=webpack:///./javascript/Particle.js?");

/***/ }),

/***/ "./javascript/Player.js":
/*!******************************!*\
  !*** ./javascript/Player.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Slam */ \"./javascript/Slam.js\");\n/* harmony import */ var _particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle_factory */ \"./javascript/particle_factory.js\");\n\n\n\n\n\n// import shotSfx from '../assets/laser7.wav';\n\nconst CLAMP_SPAWN = 100; // Offset from edges\nconst MAX_SPEED = 6;\nconst MIN_SPEED = 0.1;\nconst ACCEL = 3;\nconst DECEL = 0.9;\nconst SPRINT_SPEED = 8;\nconst MAX_SPRINT_SPEED = 10;\nconst DASH_TIME = 10;\nconst DASH_SPEED = 3;\nconst DASH_COOLDOWN = 30;\nconst POST_DASH_INVUL = 4;\n\nconst PLAYER_RADIUS = 12;\nconst COLOR = '#0d7377';\nconst DAMPENING_COEFFICIENT = 0.7;\nconst CLAMP_SPEED = 200;\n\nconst SHOOT_COOLDOWN = 0;\nconst BEAM_COOLDOWN = 0;\n\nconst STATE_WALKING = \"STATE_WALKING\";\nconst STATE_DASHING = \"STATE_DASHING\";\n\nconst KEY = {\n  W: 87,\n  A: 65,\n  S: 83,\n  D: 68,\n  ENTER: 13,\n  // UP: 38,\n  // LEFT: 37,\n  // DOWN: 40,\n  // RIGHT: 39,\n  SHIFT: 16,\n  SPACE: 32,\n  MOUSE_LEFT: 10000,\n  MOUSE_RIGHT: 10002,\n};\n\nconst MOUSE = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n}\n\nclass Player extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor(game) {\n    super(game);\n    \n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](CLAMP_SPAWN + Math.random() * (this.cvs.width - CLAMP_SPAWN * 2),\n                          CLAMP_SPAWN + Math.random() * (this.cvs.height - CLAMP_SPAWN * 2));\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); \n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.mousePos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.cvs.width / 2, this.cvs.height / 2);\n    this.shootCooldown = 0;\n    this.beamCooldown = 0;\n    this.moveState = STATE_WALKING;\n    this.dashDuration = 0;\n    this.dashDirection = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.dashCooldown = 0;\n    this.invul = 0;\n    this.velRestoreDash = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); \n\n    this.maxHealth = 100;\n    this.health = this.maxHealth;\n\n    this.r = PLAYER_RADIUS;\n    this.color = COLOR;\n    this.keyDown = {\n      [KEY.W]: false,\n      [KEY.A]: false,\n      [KEY.S]: false,\n      [KEY.D]: false,\n      [KEY.SHIFT]: false,\n      [KEY.SPACE]: false,\n      [KEY.MOUSE_LEFT]: false,\n      [KEY.MOUSE_RIGHT]: false,\n    }\n\n    this.setMousePosition = this.setMousePosition.bind(this);\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  setMousePosition(e) {\n    var canvasRect = this.cvs.getBoundingClientRect();\n    this.mousePos.x = e.clientX - canvasRect.left;\n    this.mousePos.y = e.clientY - canvasRect.top;\n    this.setAim();\n  }\n\n  setAim() {\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.mousePos.x - this.pos.x, this.mousePos.y - this.pos.y);\n  }\n\n  dash() {\n    if (this.moveState !== STATE_DASHING) {\n      this.moveState = STATE_DASHING;\n      this.pauseTime = 3;\n\n      this.setAim();\n      this.vel = this.aim.dup().normalize().multiply(DASH_SPEED * 2);\n      this.velRestoreDash = this.vel.dup();\n      this.dashDirection = this.aim.dup();\n      this.dashDuration = DASH_TIME;\n    }\n  }\n\n  shoot() {\n    if (this.game.loopCount % 5 === 0) {\n      let sound = new Audio(`${document.URL.substr(0, document.URL.lastIndexOf('/'))}/assets/laser7.wav`);\n      sound.volume = 0.7;\n      sound.play();\n    }\n\n    this.shootCooldown = SHOOT_COOLDOWN;\n    this.game.particles.push(Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this));\n    this.game.particles.push(Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this));\n    this.game.particles.push(Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this));\n    this.game.particles.push(Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this));\n  }\n\n  shootBeam() {\n    this.beamCooldown = BEAM_COOLDOWN;\n\n    this.game.particles.push(Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBeamAtCursor\"])(this));\n\n  }\n\n  mountController() {\n    document.addEventListener('keydown', (e) => {\n      let key = e.keyCode;\n      if(key === 8) this.health = 0; // BACKSPACE\n      if(key === 187) this.game.difficulty++; //EQUAL\n      if(key === 189) this.health += 100; //MINUS\n\n      // Ignore keys that have not been bound\n      if (!Object.values(KEY).includes(key)) return;\n      switch (this.game.state) {\n        case this.game.STATE_INIT:\n          break;\n        case this.game.STATE_BEGIN:\n          if (key !== KEY.ENTER) { \n            this.keyDown[key] = true;\n            this.game.startGame();\n          }\n          break;\n        case this.game.STATE_RUNNING:\n          this.keyDown[key] = true;\n          break;\n        case this.game.STATE_OVER:\n          if (key === KEY.ENTER) this.game.restartGame();\n          break;\n        default:\n          break;\n      }\n    });\n\n    document.addEventListener('keyup', (e) => {\n      let key = e.keyCode;\n      if (!Object.values(KEY).includes(key)) return;\n      switch (this.game.state) {\n        case this.game.STATE_INIT:\n          break;\n        case this.game.STATE_BEGIN:\n          break;\n        case this.game.STATE_RUNNING:\n          this.keyDown[key] = false;\n          break;\n        case this.game.STATE_OVER:\n          break;\n        default:\n          break;\n      }\n    });\n\n    document.onmousemove = (e) => {\n      this.setMousePosition(e);\n    };\n\n    // Disable right click context menu\n    document.addEventListener(\"contextmenu\", (e) => { \n      e.preventDefault();\n      return false;\n    });\n\n    document.addEventListener(\"mousedown\", (e) => {\n      e.preventDefault();\n      let clickType = e.button;\n\n      switch (this.game.state) {\n        case this.game.STATE_INIT:\n          break;\n        case this.game.STATE_BEGIN:\n          this.game.startGame();\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\n          break;\n        case this.game.STATE_RUNNING:\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\n          break;\n        case this.game.STATE_OVER:\n          break;\n        default:\n          break;\n      }\n    });\n\n    document.addEventListener(\"mouseup\", (e) => {\n      e.preventDefault();\n      let clickType = e.button;\n\n      switch (this.game.state) {\n        case this.game.STATE_INIT:\n          break;\n        case this.game.STATE_BEGIN:\n          this.game.startGame();\n          break;\n        case this.game.STATE_RUNNING:\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = false;\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = false;\n          break;\n        case this.game.STATE_OVER:\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  // Ensure players do not leave the boundaries defined here.\n  validatePosition(rectX, rectY) {\n    if(this.pos.x + this.r > rectX) this.pos.x = rectX - this.r;\n    if(this.pos.x - this.r < 0) this.pos.x = this.r;\n    if(this.pos.y + this.r > rectY) this.pos.y = rectY - this.r;\n    if(this.pos.y - this.r < 0) this.pos.y = this.r;\n  }\n\n  dampSpeed() {\n    let vel = this.vel.length();\n    let maxSpeed = (this.keyDown[KEY.SHIFT] \n      ? MAX_SPRINT_SPEED \n      : MAX_SPEED)\n    if(vel > CLAMP_SPEED) {\n      this.vel.normalize().multiply(CLAMP_SPEED);\n    }\n    if(vel > maxSpeed) {\n      this.vel.multiply(DAMPENING_COEFFICIENT);\n    }\n  }\n\n  applyDecel() {\n    if(this.keyDown[KEY.W]) return;\n    if(this.keyDown[KEY.A]) return;\n    if(this.keyDown[KEY.S]) return;\n    if(this.keyDown[KEY.D]) return;\n    let result = this.vel.multiply(DECEL);\n    if (result.x < MIN_SPEED || result.x > -1 * MIN_SPEED) result.x = 0; \n    if (result.y < MIN_SPEED || result.y > -1 * MIN_SPEED) result.y = 0; \n    this.vel = result;\n  }\n\n  update() {\n    if (this.pauseTime > 0) {;\n      this.pauseTime--;\n      if(this.pauseTime === 0) {\n        this.vel = this.velRestoreDash;\n      }\n      return;\n    }\n    if (!this.alive) {\n      this.dampSpeed();\n      this.addVelocityTimeDelta();\n      this.applyDecel();\n      this.validatePosition(this.cvs.width, this.cvs.height);\n      return;\n    }\n    // if (this.keyDown[KEY.MOUSE_RIGHT] && this.dashCooldown <= 0) this.dash();\n\n    // Calculate facing direction and apply shooting\n    this.setAim();\n    if (this.shootCooldown > 0) this.shootCooldown--;\n    if (this.beamCooldown > 0) this.beamCooldown--;\n    if (this.keyDown[KEY.MOUSE_LEFT] && this.shootCooldown <= 0) this.shoot();\n    if (this.keyDown[KEY.MOUSE_RIGHT] && this.beamCooldown <= 0) this.shootBeam();\n\n    // Apply movement\n    if (this.moveState === STATE_WALKING) {\n      let offset = ACCEL * (this.keyDown[KEY.SHIFT] ? SPRINT_SPEED : 1);\n      if (this.vel.length() < MAX_SPRINT_SPEED) {\n        if (this.keyDown[KEY.W]) this.vel.y -= offset;\n        if (this.keyDown[KEY.A]) this.vel.x -= offset;\n        if (this.keyDown[KEY.S]) this.vel.y += offset;\n        if (this.keyDown[KEY.D]) this.vel.x += offset;\n      }\n\n      this.dampSpeed();\n      this.addVelocityTimeDelta();\n      this.applyDecel();\n      this.dashCooldown--;\n      if (this.invul >= 0) this.invul--;\n    } else  if (this.moveState === STATE_DASHING) {\n      if (this.dashDuration <= 0) {\n        this.invul = POST_DASH_INVUL;\n        this.moveState = STATE_WALKING;\n        this.dashCooldown = DASH_COOLDOWN;\n        this.game.particles.push(new _Slam__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, this.pos.x, this.pos.y));\n\n      } else {\n        this.dashDuration--;\n        this.vel.add(this.aim.normalize().multiply(DASH_SPEED));\n\n        this.addVelocityTimeDelta();\n      }\n    }\n\n    this.validatePosition(this.cvs.width, this.cvs.height);\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.strokeStyle = \"white\";\n\n    this.ctx.shadowBlur = 6;\n    this.ctx.shadowColor = \"white\";\n    \n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.closePath();\n\n    this.ctx.restore();\n\n\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack:///./javascript/Player.js?");

/***/ }),

/***/ "./javascript/Slam.js":
/*!****************************!*\
  !*** ./javascript/Slam.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n\n\n\n\nconst RADIUS = 100;\nconst KNOCKBACK = 150;\nconst DAMAGE = 70;\n// const COLOR = \"white\";\n\nclass Slam extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(game, startX, startY) {\n    super(game);\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.r = RADIUS;\n    this.color = this.game.player.color;\n    this.damage = DAMAGE;\n    this.knockback = KNOCKBACK;\n    this.aliveTime = 10;\n    this.initialTime= this.aliveTime;\n\n    // this.update = this.update.bind(this);\n    // this.draw = this.draw.bind(this);\n  }\n\n\n  checkCollision(obj) {\n    if (!obj.alive) return; //Don't check collision if object is not alive\n\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\n    let distSqr = diff.dot(diff);\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\n        diff.normalize();\n        obj.vel.add(diff.multiply(this.knockback));\n        obj.health -= this.damage;\n        if (obj.health <= 0) {\n          obj.alive = false;\n          this.game.difficulty += 0.002 * this.game.difficultyRate;\n\n          this.game.score++;\n        }\n      }\n    }\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n    \n    if(this.aliveTime === this.initialTime) {\n      this.game.entities.forEach(entity => { this.checkCollision(entity) });\n      this.game.freeze(5);\n    }\n    if (this.aliveTime <= 0) {\n      this.alive = false;\n    }\n    this.aliveTime--;\n    this.cb();\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    if (this.aliveTime > this.initialTime - 5) {\n      this.ctx.save();\n\n      this.ctx.beginPath();\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n      this.ctx.fillStyle = this.color;\n      this.ctx.fill(); \n      this.ctx.strokeStyle = \"white\";\n      this.ctx.stroke(); \n      this.ctx.restore();\n    } else {\n      this.ctx.save();\n\n      this.r += 10;\n      this.ctx.beginPath();\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\n      this.ctx.fill();\n      this.ctx.strokeStyle = \"white\";\n     \n      this.ctx.shadowBlur = 30;\n      this.ctx.shadowColor = this.color;\n      this.ctx.stroke();  \n\n      this.ctx.restore();\n  \n    }\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Slam);\n\n//# sourceURL=webpack:///./javascript/Slam.js?");

/***/ }),

/***/ "./javascript/Vector.js":
/*!******************************!*\
  !*** ./javascript/Vector.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\nclass Vector {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(v) {\n    if (v instanceof Vector) {\n      this.x += v.x;\n      this.y += v.y;\n    } else {\n      this.x += v; \n      this.y += v; \n    }\n    return this;\n  }\n\n  subtract(v) {\n    if (v instanceof Vector) {\n      this.x -= v.x;\n      this.y -= v.y;\n    } else {\n      this.x -= v; \n      this.y -= v; \n    }\n    return this;\n  }\n\n  multiply(v) {\n    if (v instanceof Vector) {\n      this.x *= v.x;\n      this.y *= v.y;\n    } else {\n      this.x *= v; \n      this.y *= v; \n    }\n    return this;\n  }\n  \n  divide(v) {\n    if (v instanceof Vector) {\n      if(v.x !== 0) this.x /= v.x;\n      if(v.y !== 0) this.y /= v.y;\n    } else {\n      if(v !== 0) {\n        this.x /= v; \n        this.y /= v; \n      }\n    }\n    return this;\n  }\n\n  dup() {\n    return new Vector(this.x, this.y);\n  }\n  \n  invert() {\n    this.x *= -1;\n    this.y *= -1;\n    return this;\n  }\n\n  static difference(v1, v2) {\n    let newV = new Vector(1, 1).multiply(v1);\n    return newV.subtract(v2);\n  }\n\n  equals(v) {\n    return this.x === v.x && this.y === v.y;\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  length() {\n    return Math.sqrt(this.dot(this));\n  }\n\n  // WARNING - operation calls divide which will modify this vector\n  normalize() {\n    // let that = new Vector(this.x, this.y);\n    // return that.divide(this.length());\n    return this.divide(this.length());\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vector);\n\n//# sourceURL=webpack:///./javascript/Vector.js?");

/***/ }),

/***/ "./javascript/enemy_factory.js":
/*!*************************************!*\
  !*** ./javascript/enemy_factory.js ***!
  \*************************************/
/*! exports provided: randomEdgePos, spawnCircleRandom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomEdgePos\", function() { return randomEdgePos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spawnCircleRandom\", function() { return spawnCircleRandom; });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n\n\n\n\nconst MAP = {\n  TOP: 0,\n  LEFT: 1,\n  BOTTOM: 2,\n  RIGHT: 3,\n}\n\n// const SPAWN_OFFSET = 20;\nconst BASE_TURN_RATE = 0.25;\n\nconst randomEdgePos = (canvas, radius) => {\n  let side = Math.floor(Math.random() * 4);\n\n  let pos = { x: Math.random() * canvas.width,\n              y: Math.random() * canvas.height };\n\n  switch(side) {\n    case MAP.TOP:\n      pos.y = -radius;\n      break;\n    case MAP.LEFT:\n      pos.x = -radius;\n      break;\n    case MAP.BOTTOM:\n      pos.y = canvas.height + radius;\n      break;\n    case MAP.RIGHT:\n      pos.x = canvas.width + radius;\n      break;\n  }\n\n  return pos;\n}\n\nconst makeBoss = function(enemy) {\n  if (Math.floor(Math.random() * 1000) % 100 === 0) {\n    enemy.r = Math.floor(50 + Math.random() * 50);\n    if (enemy.game.state === \"STATE_OVER\") enemy.r *= 1 + Math.random() * 4;\n    if (Math.floor(Math.random() * 5) % 3 === 0) {\n      enemy.accel = 0.5 + Math.random() * Math.pow(enemy.game.difficulty, 1 / 2);\n      enemy.maxSpeed = 1.5 + Math.random() * Math.pow(enemy.game.difficulty, 1 / 2);\n    } else {\n      enemy.accel = 0.2;\n      enemy.maxSpeed = 0.5;\n    }\n    enemy.health = 10000;\n    enemy.damage = 50;\n    enemy.score = enemy.r * 2;\n  }\n}\n\nconst spawnCircleRandom = (player) => {\n  let enemy = new _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game);  \n\n  enemy.accel = 0.5 + Math.random() * Math.pow(player.game.difficulty, 1 / 2);\n  enemy.maxSpeed = 1.5 + Math.random() * Math.pow(player.game.difficulty, 1 / 2);\n\n  makeBoss(enemy);\n  \n  let spawnPos = randomEdgePos(player.cvs, enemy.r);\n  enemy.pos.x = spawnPos.x;\n  enemy.pos.y = spawnPos.y;\n  \n  enemy.aiCallback = function() {\n    this.aim = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(player.pos, this.pos).normalize();\n    let turnRate = BASE_TURN_RATE + Math.pow(player.game.difficulty, 1/2);\n    this.aim.multiply(turnRate).add(this.vel).normalize();\n\n    this.vel.add(this.aim.multiply(this.accel));\n  };\n\n  return enemy;\n}\n\n\n\n//# sourceURL=webpack:///./javascript/enemy_factory.js?");

/***/ }),

/***/ "./javascript/main.js":
/*!****************************!*\
  !*** ./javascript/main.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./javascript/Game.js\");\n\n\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const cvs = document.getElementById('ball-popcalypse');\n  const ctx = cvs.getContext('2d');\n  const game = new _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](cvs, ctx);\n  window.game = game;\n  \n  game.loop();\n});\n\n//# sourceURL=webpack:///./javascript/main.js?");

/***/ }),

/***/ "./javascript/particle_factory.js":
/*!****************************************!*\
  !*** ./javascript/particle_factory.js ***!
  \****************************************/
/*! exports provided: fireBulletAtCursor, fireBulletAtCursorB, fireBeamAtCursor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursor\", function() { return fireBulletAtCursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursorB\", function() { return fireBulletAtCursorB; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBeamAtCursor\", function() { return fireBeamAtCursor; });\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Beam */ \"./javascript/Beam.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n\n\n\n\n\nconst BULLET_SPEED = 15;\nconst BULLET_SPREAD = 0.10;\n\nconst fireBulletAtCursor = (player) => {\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\n  p.pos.x = player.pos.x;\n  p.pos.y = player.pos.y;\n  p.color = \"#14ffec\";\n\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\n  aim.multiply(player.aim);\n  aim.normalize();\n  aim.x += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\n  aim.y += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\n  aim.normalize();\n  p.vel = aim.multiply(BULLET_SPEED * (1 - BULLET_SPREAD ) + BULLET_SPREAD / 2 + Math.random() * BULLET_SPREAD);\n  return p;\n}\n\nconst fireBulletAtCursorB = (player) => {\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\n  p.pos.x = player.pos.x;\n  p.pos.y = player.pos.y;\n  p.color = 'orange';\n\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\n  aim.multiply(player.aim);\n  aim.normalize();\n  aim.x += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\n  aim.y += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\n  aim.normalize();\n  p.vel = aim.multiply(BULLET_SPEED);\n  return p;\n}\n\nconst fireBeamAtCursor = (player) => {\n  let p = new _Beam__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game);\n  p.pos.x = player.pos.x;\n  p.pos.y = player.pos.y;\n  p.color = player.color;\n\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\n  aim.multiply(player.aim);\n  aim.normalize();\n  p.aim = aim;\n  \n  return p;\n}\n\n//# sourceURL=webpack:///./javascript/particle_factory.js?");

/***/ })

/******/ });