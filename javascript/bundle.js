/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./javascript/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./javascript/Beam.js":
/*!****************************!*\
  !*** ./javascript/Beam.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/DamageNumber.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/SlashSpark.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 60;\r\nconst LENGTH = 150;\r\nconst HITBOX_RATIO = 0.95;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 80;\r\nconst DURATION = 20;\r\n// const COLOR = \"white\";\r\n\r\nconst COLOR = {\r\n  NORMAL: [255,255,255],\r\n  CRIT: [255,255,0],\r\n  CANNON: [0,0,0]\r\n}\r\n\r\nclass Beam extends _Particle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n  constructor(game, startX, startY, aim, combo = 0, active = true, length = LENGTH, width = WIDTH) {\r\n    super(game, startX, startY);\r\n    this.aim = aim || this.game.player.aim.dup();\r\n    this.combo = combo || 0;\r\n\r\n    // Formula to get the radian angle between the Y axis and a point\r\n    this.angle = Math.atan2(this.aim.y, this.aim.x);\r\n\r\n    this.width = width;\r\n    this.length = length;\r\n    this.origin = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.pos.x);\r\n    this.damage = DAMAGE;\r\n    this.knockback = KNOCKBACK;\r\n    this.aliveTime = DURATION;\r\n    // this.activeTime = 5;\r\n    this.active = active;\r\n    this.initialTime = this.aliveTime;\r\n\r\n    // this.update = this.update.bind(this);\r\n    // this.draw = this.draw.bind(this);\r\n  }\r\n\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n    if (!this.active) return;\r\n\r\n    if(!this.hitWidth) this.hitWidth = this.width * HITBOX_RATIO;\r\n    if(!this.hitLength) this.hitLength = this.length * HITBOX_RATIO;\r\n\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n\r\n      let x = this.pos.x;\r\n      let y = this.pos.y;\r\n\r\n      // === Infinite linear collision detection ===\r\n      // let dist = Math.abs(this.aim.x * diff.y - this.aim.y * diff.x) / this.aim.length();\r\n      // if (this.width / 2 + obj.r > dist) {\r\n      // =============\r\n\r\n      // === Translate positions to unrotated box, then box collision\r\n      // Invert Y axis because canvas uses Y axis pointing down, and most cartesian\r\n      // calculations are using Y axis up\r\n      // --------------\r\n      // calculate obj's relative position to beam origin\r\n      // x′=xcosθ−ysinθ      \r\n      // y′=ycosθ + xsinθ\r\n      \r\n      // Get the obj relative position to beam origin pos\r\n      let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](obj.pos.x, -obj.pos.y), new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, -y));\r\n\r\n      let x2 = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\r\n      let y2 = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\r\n\r\n      // Collision using obj as a box,\r\n      // Use LENGTH > HIT_LENGTH to hide inaccuracy of hitbox\r\n      if ( \r\n        x2 + obj.r >= 0 &&\r\n        x2 - obj.r <= 0 + this.hitLength &&\r\n        y2 + obj.r >= 0 - this.hitWidth / 2 &&\r\n        y2 - obj.r <= 0 + this.hitWidth / 2\r\n      ) {\r\n        diff = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1,0);\r\n        let x = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\r\n        let y = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\r\n\r\n        // Invert Y axis again to use diff vector for knockback\r\n        // diff.multiply(new Vector(1, -1));\r\n        // if (this.combo === -2) {\r\n        let knockStraight = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y);\r\n        // let knockStraight = this.game.player.aim.dup().normalize();\r\n        if (this.combo === 3) {\r\n          obj.vel.add(knockStraight.multiply(-this.knockback));\r\n\r\n        } else {\r\n          obj.vel.add(knockStraight.multiply(this.knockback));\r\n        }\r\n        // } else {\r\n        //   obj.vel.add(diff.multiply(this.knockback));\r\n        // }\r\n        obj.health -= this.damage;\r\n        if (obj.health <= 0) {\r\n          obj.alive = false;\r\n        } else {\r\n          if (!this.silenced) {\r\n            if (this.combo === 3) {\r\n              this.game.playSoundMany(`${this.game.filePath}/assets/SE_00017.wav`, 0.03);\r\n            } else {\r\n              this.game.playSoundMany(`${this.game.filePath}/assets/SE_00017.wav`, 0.08);\r\n            }\r\n          }\r\n        }\r\n        let color;\r\n        this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.damage));\r\n        switch (this.combo) {\r\n          case 3:\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x - 50 + Math.random() * 100, obj.pos.y - 50 + Math.random() * 100, this.combo, Math.random() * 4, 30 + Math.random() * 70));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x - 50 + Math.random() * 100, obj.pos.y - 50 + Math.random() * 100, this.combo, Math.random() * 4, 30 + Math.random() * 70));\r\n            break;\r\n          case -2:\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3 * obj.r, obj.r * 20, 20, Math.atan2(this.aim.y, this.aim.x)));\r\n            break;\r\n          case -1:\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 15, 150, 50));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 4, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 4, 60));\r\n            let explosion1 = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, obj.pos.x, obj.pos.y, 50);\r\n            explosion1.aliveTime = 3;\r\n            this.game.vanity.push(explosion1);\r\n\r\n            break;\r\n          default:\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 60));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 7, 90, 40));\r\n            let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, obj.pos.x, obj.pos.y, 30);\r\n            explosion.aliveTime = 3;\r\n            this.game.vanity.push(explosion);\r\n\r\n            break;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  drawRect() {\r\n    // Offset the rect based on its width but maintain origin\r\n    this.ctx.translate(this.pos.x + Math.sin(this.angle) * this.width / 2,\r\n                       this.pos.y - Math.cos(this.angle) * this.width / 2);\r\n    this.ctx.rotate(this.angle);\r\n    this.ctx.fillRect(0, 0, this.length, this.width);\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n\r\n    \r\n    if (this.aliveTime >= this.initialTime && this.active === true) {\r\n      this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n      // this.game.freeze(5);\r\n      if( this.combo === -2) {\r\n        let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, this.pos.x, this.pos.y, 100);\r\n        explosion.color = \"red\";\r\n        explosion.aliveTime = 7;\r\n        this.game.vanity.push(explosion);\r\n      }\r\n    }\r\n\r\n    if (this.aliveTime === this.initialTime - 2) {\r\n      this.width *= 1.5;\r\n    }\r\n    if (this.aliveTime > this.initialTime - 2) {\r\n    } else {\r\n      this.width *= 0.8;\r\n      this.length *= 0.99;\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (this.aliveTime > this.initialTime - 2) {\r\n      this.ctx.save();\r\n\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.strokeStyle = this.color;\r\n      this.ctx.shadowColor = this.color;\r\n      this.ctx.strokeStyle = \"black\";\r\n\r\n      this.drawRect();\r\n\r\n      this.ctx.restore();\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      this.ctx.shadowBlur = 20;\r\n      // this.ctx.shadowColor = \"white\";\r\n      this.ctx.shadowColor = `rgba(230,230,230,${Math.pow(this.aliveTime, 6)/ Math.pow(this.initialTime - 2, 6)})`;\r\n      // this.ctx.fillStyle = \"gray\";\r\n\r\n      this.ctx.fillStyle = `rgba(230,230,230,${Math.pow(this.aliveTime, 6) / Math.pow(this.initialTime - 2, 6)})`;\r\n      this.ctx.strokeStyle = \"white\";\r\n\r\n      this.drawRect();\r\n\r\n      this.ctx.restore();\r\n\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Beam);\n\n//# sourceURL=webpack:///./javascript/Beam.js?");

/***/ }),

/***/ "./javascript/BeamSlash.js":
/*!*********************************!*\
  !*** ./javascript/BeamSlash.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Beam */ \"./javascript/Beam.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 50;\r\nconst LENGTH = 150;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 300;\r\nconst DURATION = 7;\r\nconst ARC_DEGREE_RATE = 20;\r\nconst DERVISH_KB_RATE = 0.1;\r\nconst DIRECTION = {\r\n  CCW: -1,\r\n  CW: 1,\r\n}\r\n// const COLOR = \"white\";\r\n\r\n//\r\n// Beam factory that creates a new Beams in an arc over a duration\r\n//\r\nclass BeamSlash extends _Particle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n  constructor(game, \r\n      combo, \r\n      addOffset = 0,\r\n      width = WIDTH,\r\n      length = LENGTH) {\r\n    super(game);\r\n    this.owner = this.game.player;\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.owner.pos.x, this.owner.pos.y);\r\n    this.color = this.owner.color;\r\n    this.width = width;\r\n    this.length = length;\r\n    this.damage = DAMAGE;\r\n    this.aliveTime = DURATION;\r\n    this.directions = DIRECTION;\r\n    this.direction = DIRECTION.CW;\r\n    this.active = false;\r\n    this.arcRate = ARC_DEGREE_RATE * Math.PI / 180;\r\n    this.combo = combo;\r\n    this.knockback = KNOCKBACK;\r\n\r\n\r\n    switch(this.combo) {\r\n      case 0:\r\n        this.knockback *= 1.2;\r\n        break;\r\n      case -1:\r\n        this.arcRate = (ARC_DEGREE_RATE * 1.1) * Math.PI / 180; \r\n        this.damage = this.damage * 2.5;\r\n        this.color = \"orange\";\r\n        this.knockback = this.knockback * 1.4;\r\n        this.aliveTime += 2;\r\n        this.length += 30;\r\n        this.game.player.invul = 7;\r\n        break;\r\n      case 1:\r\n        this.direction = DIRECTION.CCW;\r\n        this.aliveTime += 1;\r\n        this.damage *= 1.2;\r\n        this.length *= 1.2;\r\n        this.width *= 1.2;\r\n        break;\r\n      case 2:\r\n        this.aliveTime += 1;\r\n        this.damage *= 1.2;\r\n        this.length *= 1.2;\r\n        this.width *= 1.2;\r\n        break;\r\n      case 3:\r\n        this.direction = DIRECTION.CCW;\r\n        this.arcRate = (ARC_DEGREE_RATE) * Math.PI / 180 * 0.75; \r\n        this.aliveTime *= 13;\r\n        this.length *= 0.60;\r\n        this.width *= 0.60;\r\n        this.knockback *= DERVISH_KB_RATE;\r\n        this.damage /= 8  ;\r\n        break;\r\n      default:\r\n          break;\r\n    }\r\n\r\n    this.startOffsetDegree = -addOffset + ARC_DEGREE_RATE * (this.aliveTime / 4);\r\n\r\n\r\n    this.aim = this.owner.aim;\r\n    let angle = this.startOffsetDegree * Math.PI / 180 * this.direction;\r\n    angle += this.direction * 40 * Math.PI / 180;\r\n    let newAim = this.aim.dup();\r\n    newAim.multiply(1, -1);\r\n\r\n    let x2 = newAim.x * Math.cos(angle) - newAim.y * Math.sin(angle);\r\n    let y2 = newAim.y * Math.cos(angle) + newAim.x * Math.sin(angle);\r\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-x2, -y2);\r\n  }\r\n\r\n  iterBeamArc() {\r\n    let arcRate = this.arcRate * this.direction;\r\n    let newAim = this.aim.dup();\r\n    newAim.multiply(1, -1);\r\n\r\n    let x2 = newAim.x * Math.cos(arcRate) - newAim.y * Math.sin(arcRate);\r\n    let y2 = newAim.y * Math.cos(arcRate) + newAim.x * Math.sin(arcRate);\r\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x2, y2);\r\n\r\n    let p = new _Beam__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.game, this.pos.x, this.pos.y, this.aim, this.combo);\r\n    p.color = this.color;\r\n    p.length = this.length;\r\n    p.width = this.width;\r\n    p.damage = this.damage;\r\n    p.knockback = this.knockback;\r\n    if (this.combo === -1) {\r\n      this.length += 5;\r\n      this.width += 5;\r\n    } else if (this.combo === 3) {\r\n      this.pos.x = this.owner.pos.x;\r\n      this.pos.y = this.owner.pos.y;\r\n      this.length *= 0.997;\r\n    } else {\r\n      this.length -= 2;\r\n    }\r\n    this.game.particles.push(p);\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // BeamSlash does not check collision\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; \r\n\r\n    // this.pos.x = this.owner.pos.x;\r\n    // this.pos.y = this.owner.pos.y;\r\n\r\n    \r\n    this.iterBeamArc();\r\n    if (this.combo === -1 || this.combo === 3 || this.combo === 0) {\r\n      this.iterBeamArc();\r\n      this.aliveTime--;\r\n    }\r\n    if (this.combo === 3) {\r\n      this.iterBeamArc();\r\n      this.aliveTime--;\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n\r\n      // combo finisher\r\n      if (this.combo === 3) {\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00064.wav`, 0.22);\r\n        this.game.particles.push(new BeamSlash(this.game, -1, 40));\r\n      }\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  draw() {\r\n    // BeamSlash does not have any drawn elements\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BeamSlash);\n\n//# sourceURL=webpack:///./javascript/BeamSlash.js?");

/***/ }),

/***/ "./javascript/DamageNumber.js":
/*!************************************!*\
  !*** ./javascript/DamageNumber.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n\r\n\r\n\r\n\r\nconst SIZE = 15;\r\nconst DURATION = 50;\r\nconst FREEZE_DURATION = 20;\r\nconst DEFAULT_TYPE = \"BASE\";\r\nconst VARIANCE = 70;\r\n\r\nconst COLOR = {\r\n  NORMAL: [255, 255, 255],\r\n  CRIT: [255, 255, 0],\r\n  CANNON: [0, 0, 0],\r\n}\r\n//\r\n// hitspark for beams\r\n//\r\nclass DamageNumber extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game, x, y,\r\n    damage,\r\n    size = SIZE,\r\n    duration = DURATION,\r\n    type = DEFAULT_TYPE,\r\n    pauseState = true) {\r\n    super(game);\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x - VARIANCE / 2 + Math.random() * VARIANCE, y - VARIANCE / 2 + Math.random() * VARIANCE);\r\n    this.damage = damage;\r\n    this.size = size;\r\n    this.aliveTime = duration;\r\n    this.initialTime = this.aliveTime;\r\n    this.type = type;\r\n    this.paused = pauseState;\r\n    this.cb = () => {};\r\n\r\n\r\n    switch (this.type) {\r\n      case \"BASE\":\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n      default:\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // DamageNumber does not check collision\r\n  }\r\n\r\n  drawNum() {\r\n    this.ctx.save();\r\n    this.ctx.font = `${this.size}px sans-serif`;\r\n    let color;\r\n    // let percent = (this.aliveTime - FREEZE_DURATION) / (this.initialTime - FREEZE_DURATION);\r\n    // if (this.aliveTime > (DURATION - FREEZE_DURATION)) {\r\n    //   color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},1)`;\r\n    // } else {\r\n    //   color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`;\r\n    // }\r\n    let percent = (this.aliveTime) / (this.initialTime);\r\n    color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`;\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.strokeStyle = color;\r\n    this.ctx.shadowBlur = 1;\r\n    this.ctx.shadowColor = \"black\";\r\n    this.ctx.fillText(`${Math.floor(this.damage)}`, this.pos.x, this.pos.y);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  update() {\r\n    this.pos.y--;\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  draw() {\r\n    this.drawNum();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DamageNumber);\n\n//# sourceURL=webpack:///./javascript/DamageNumber.js?");

/***/ }),

/***/ "./javascript/EnemyCircle.js":
/*!***********************************!*\
  !*** ./javascript/EnemyCircle.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst MAX_SPEED = 3;\r\nconst RADIUS = 7;\r\nconst COLOR = \"#a64942\";\r\nconst ACCEL = 1;\r\nconst KNOCKBACK = 10;\r\nconst ENEMY_KNOCKBACK_MULTIPLIER = 2.5;\r\nconst DAMPENING_COEFFICIENT = 0.7;\r\nconst SPREAD_FACTOR = 2.0;\r\nconst HEALTH = 100;\r\nconst HEALTH_CAP = 200;\r\nconst DAMAGE = 1;\r\nconst SCORE = 1;\r\n\r\nclass EnemyCircle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    this.maxSpeed = MAX_SPEED;\r\n    this.accel = ACCEL;\r\n    this.aiCallback = () => {};\r\n\r\n    this.health = HEALTH + game.difficulty * 2;\r\n    if (this.health > HEALTH_CAP) this.health = HEALTH_CAP;\r\n\r\n    this.r = RADIUS;\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.score = SCORE;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  validatePosition(rectX, rectY) {\r\n\r\n  }\r\n\r\n  dampSpeed() {\r\n    let vel = this.vel.length();\r\n    if (vel > MAX_SPEED) {\r\n      this.vel.multiply(DAMPENING_COEFFICIENT);\r\n    }\r\n  }\r\n\r\n  // Check if enemies collide with the player\r\n  checkAndHitPlayer(player) {\r\n    if (player.noclip > 0) return;\r\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, player.pos);\r\n    let distSqr = diff.dot(diff);\r\n\r\n    if (player.moveState === \"STATE_DASHING\") return;\r\n    if (this.r * this.r + player.r * player.r > distSqr) {\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/impact.wav`, 0.3);\r\n      let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](game, player.pos.x + diff.x / 2, player.pos.y + diff.y / 2, this.r * 2);\r\n      explosion.color = 'red';\r\n      explosion.aliveTime = 5;\r\n      \r\n      diff.normalize();\r\n      diff.multiply(KNOCKBACK);\r\n      player.vel.subtract(diff.dup().multiply(this.r / RADIUS));\r\n      this.vel.add(diff.multiply(ENEMY_KNOCKBACK_MULTIPLIER));\r\n      if (player.invul > 0) {\r\n        explosion.color = 'lightblue';\r\n      } else {\r\n        player.health -= this.damage;\r\n        player.charge += this.damage;\r\n        if (this.r > RADIUS) player.invul = 45;\r\n      }\r\n      player.game.vanity.push(explosion);\r\n    } \r\n  }\r\n\r\n  // Check if enemies are colliding and push them away\r\n  checkAndSpreadEnemy(obj) {\r\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n\r\n    // Don't collide objects that are standing directly on each other\r\n    if (obj.pos.equals(this.pos)) return;\r\n    if (this.r * this.r + obj.r * obj.r > distSqr) {\r\n      diff.normalize();\r\n      diff.multiply(SPREAD_FACTOR);\r\n      obj.vel.subtract(diff.dup().multiply(this.r / RADIUS));\r\n      this.vel.add(diff.dup().multiply(RADIUS / this.r));\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return;\r\n\r\n    if(obj instanceof _Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      this.checkAndHitPlayer(obj);\r\n    } else if (obj instanceof EnemyCircle) {\r\n      this.checkAndSpreadEnemy(obj);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return;\r\n    this.aiCallback();\r\n\r\n    this.dampSpeed();\r\n    this.addVelocityTimeDelta();\r\n// this.validatePosition(this.cvs.width, this.cvs.height);\r\n\r\n    // Check collision with player\r\n    this.checkCollision(this.game.players[0]);\r\n\r\n    // Many-many collision is very heavy - please refactor at some point or implement quadtree\r\n    this.game.entities.forEach(entity => this.checkCollision(entity));\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.strokeStyle = 'black';\r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EnemyCircle);\n\n//# sourceURL=webpack:///./javascript/EnemyCircle.js?");

/***/ }),

/***/ "./javascript/Explosion.js":
/*!*********************************!*\
  !*** ./javascript/Explosion.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n\r\n\r\n\r\n\r\nconst RADIUS = 5;\r\nconst COLOR = \"white\";\r\n\r\nclass Explosion extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(game, startX, startY, startR, vel) {\r\n    super(game);\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = vel || new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.r = startR || RADIUS;\r\n    this.color = COLOR;\r\n    this.aliveTime = 20;\r\n    this.initialAliveTime = this.aliveTime;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n\r\n    this.pos.add(this.vel);\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n\r\n    if (this.aliveTime <= 5) {\r\n      this.r *= 1.11;\r\n    }\r\n\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n\r\n    if (this.aliveTime > 5) {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.strokeStyle = this.color;\r\n      this.ctx.fill();\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n      this.ctx.restore();\r\n\r\n\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = this.color;\r\n     \r\n      this.ctx.shadowBlur = 30;\r\n      this.ctx.shadowColor =  this.color;\r\n      this.ctx.stroke();  \r\n\r\n      this.ctx.restore();    \r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Explosion);\n\n//# sourceURL=webpack:///./javascript/Explosion.js?");

/***/ }),

/***/ "./javascript/Game.js":
/*!****************************!*\
  !*** ./javascript/Game.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Player */ \"./javascript/Player.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle_factory */ \"./javascript/particle_factory.js\");\n/* harmony import */ var _enemy_factory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./enemy_factory */ \"./javascript/enemy_factory.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Slam */ \"./javascript/Slam.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Beam */ \"./javascript/Beam.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/SlashSpark.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n// My laptop has a performance limit of around 700 particles\r\n// Delta time is implemented by accelerating movement to perceive less\r\n// lag, however the game still runs slower\r\n\r\n\r\n\r\n/*\r\nAccess this on localhost:8000 by running both:\r\nnpm start\r\npython -m SimpleHTTPServer\r\n\r\n===\r\n\r\nTo-do:\r\n\r\n- Impact frame? Flash white ==> black on beam shadow / etcs\r\n- Style Score box\r\n- Sword sound/ Beam sound\r\n\r\n*/\r\n\r\nconst PATH = document.URL.substr(0, document.URL.lastIndexOf('/'));\r\nconst STATE_INIT = \"STATE_INIT\";\r\nconst STATE_BEGIN = \"STATE_BEGIN\";\r\nconst STATE_RUNNING = \"STATE_RUNNING\";\r\nconst STATE_OVER = \"STATE_OVER\";\r\n\r\nconst FPS = 60;\r\nconst NORMAL_TIME_DELTA = 1000 / FPS;\r\nconst MIN_FRAME_RATE = 50; // Limits enemy production to save frames\r\n\r\nconst BASE_SPAWN_RATE = 4; // 5\r\nconst DIFFICULTY_START = 1;\r\nconst DIFFICULTY_INTERVAL = 60;\r\nconst DIFFICULTY_MULTIPLIER = 0.035;\r\nconst DIFFICULTY_RATE = 1;\r\nconst MAX_DIFFICULTY = 110;\r\n\r\n\r\nconst STARTING_HEALTH = 250;\r\n\r\nconst LINKED_IN_ICON = new Image();\r\nLINKED_IN_ICON.src = `${PATH}/assets/iconfinder_square-linkedin_317725.png`;\r\nconst MUTE = new Image(50,50);\r\nMUTE.src = `${PATH}/assets/mute.png`;\r\nconst VOL = new Image(50, 50);\r\nVOL.src = `${PATH}/assets/volume.png`;\r\nconst WASD = new Image();\r\nWASD.src = `${PATH}/assets/WASD.png`;\r\nconst LEFT_MOUSE_ICON = new Image();\r\nLEFT_MOUSE_ICON.src = `${PATH}/assets/left.png`;\r\nconst RIGHT_MOUSE_ICON = new Image();\r\nRIGHT_MOUSE_ICON.src = `${PATH}/assets/right.png`;\r\nconst SPACEBAR_ICON = new Image();\r\nSPACEBAR_ICON.src = `${PATH}/assets/spacebar.png`;\r\n\r\nclass Game {\r\n  constructor(cvs, ctx) {\r\n    this.STATE_INIT = STATE_INIT;\r\n    this.STATE_BEGIN = STATE_BEGIN;\r\n    this.STATE_RUNNING = STATE_RUNNING;\r\n    this.STATE_OVER = STATE_OVER;\r\n    this.cvs = cvs;\r\n    this.ctx = ctx;\r\n    this.highscore = 0;\r\n    this.score = 0;\r\n    this.pauseTime = 0;\r\n    this.mute = false;\r\n    this.filePath = PATH;\r\n\r\n    this.timeTracker = (new Date).getTime() + NORMAL_TIME_DELTA;\r\n    this.prevTime = (new Date).getTime();\r\n\r\n    this.state = STATE_INIT;\r\n\r\n\r\n    // preload audio\r\n    this.defeatSfx = new Audio(`${PATH}/assets/DEFEATED.wav`);\r\n    this.enemyDeathSfx = new Audio(`${PATH}/assets/boom2.wav`);\r\n    this.playerShootSfx = new Audio(`${PATH}/assets/laser7.wav`);\r\n    this.playerSlashSfx = new Audio(`${PATH}/assets/SE_00064.wav`);\r\n    this.playerBeamSfx = new Audio(`${PATH}/assets/SE_00049.wav`);\r\n    this.playerChargeSfx = new Audio(`${PATH}/assets/SE_00016.wav`);\r\n    this.playerChargeFollowSfx = new Audio(`${PATH}/assets/SE_00049.wav`);\r\n    this.enemyResistSlashSfx = new Audio(`${PATH}/assets/SE_00017.wav`);\r\n    this.enemyHitSfx = new Audio(`${PATH}/assets/impact.wav`);\r\n\r\n    this.bgm = new Audio(`${PATH}/assets/305_Battlefield_-_Swords_Bursting.mp3`);\r\n    this.bgm.loop = true;\r\n\r\n    this.init = this.init.bind(this);\r\n    this.loop = this.loop.bind(this);\r\n  }\r\n\r\n  init() {\r\n    this.ctx.canvas.width = window.innerWidth;\r\n    this.ctx.canvas.height = window.innerHeight;\r\n\r\n    this.score = 0;\r\n    this.loops = 0;\r\n    this.loopCount = 0;\r\n    this.timeSeconds = 0;\r\n    this.difficulty = DIFFICULTY_START;\r\n    this.difficultyRate = DIFFICULTY_RATE;\r\n    // this.spawnRate = SPAWN_RATE;\r\n    this.fpsCount = 0;\r\n    this.fps = 0;\r\n    this.timeDelta = NORMAL_TIME_DELTA;\r\n    this.normalTimeDelta = NORMAL_TIME_DELTA;\r\n    \r\n    this.players = [];\r\n    this.player = new _Player__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\r\n    this.player.alive = false;\r\n    this.players.push(this.player);\r\n    this.cameraPos = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.player.pos.x, this.player.pos.y);\r\n    \r\n    this.entities = [];\r\n    this.particles = [];\r\n    this.delayedParticles = [];\r\n    this.vanity = [];\r\n    this.menus = [];\r\n\r\n    this.player.mountController();\r\n    this.state = STATE_BEGIN;\r\n\r\n    let startGameMenu = new _GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n    startGameMenu.pos.x = 0,\r\n    startGameMenu.pos.y = this.cvs.height / 2;\r\n    startGameMenu.height = 0;\r\n    startGameMenu.width = this.cvs.width;\r\n    startGameMenu.color = \"rgba(0,0,0,0.4)\";\r\n    startGameMenu.aliveTime = 60;\r\n    startGameMenu.time = this.timeSeconds;\r\n    startGameMenu.difficulty = this.difficulty;\r\n    startGameMenu.alpha = 0;\r\n    startGameMenu.draw = function () {\r\n      this.aliveTime--;\r\n      this.ctx.save();\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (60 - this.aliveTime) / 60, this.cvs.width, this.cvs.height / 4 * (60 - this.aliveTime) / 60);\r\n      if (this.aliveTime <= 0) {\r\n        if (this.alpha < 1) this.alpha += 0.3;\r\n        this.aliveTime = 0;\r\n        let xOffset = this.cvs.width / 2;\r\n        let yOffset = this.cvs.height - 250;\r\n        this.ctx.textAlign = 'center';\r\n\r\n        this.ctx.fillStyle = `rgba(0,128,128,${this.alpha})`;\r\n        this.ctx.font = `${this.cvs.height / 8}px sans-serif`;\r\n        // this.ctx.fillText(`Ball-popcalypse`, this.cvs.width * 0.4 / 16, this.cvs.height * 17/32 );\r\n        this.ctx.fillText(`Ball-popcalypse`, this.cvs.width / 2, this.cvs.height * 17/32 );\r\n        this.ctx.fillStyle = `rgba(128,128,128,${this.alpha})`;\r\n        this.ctx.font = `${this.cvs.height / 32}px sans-serif`;\r\n        this.ctx.fillText(`How long can you survive the ball menace?`, this.cvs.width / 2, this.cvs.height * 19/32 );\r\n\r\n        this.ctx.fillStyle = \"white\";\r\n        this.ctx.font = '20px sans-serif';\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.shadowColor = 'black';\r\n        \r\n        this.ctx.fillText(`Press a key or mousebutton to start`, xOffset , yOffset);\r\n        this.ctx.drawImage(WASD, xOffset -= 350, yOffset + 40, 180, 150);\r\n        this.ctx.fillText(`Movement`, xOffset + 85, yOffset + 210);\r\n        this.ctx.drawImage(LEFT_MOUSE_ICON, xOffset += 190, yOffset + 13, 200, 180);\r\n        this.ctx.fillText(`Slash`, xOffset + 100, yOffset + 210);\r\n        this.ctx.drawImage(RIGHT_MOUSE_ICON, xOffset += 190, yOffset + 43, 120, 150);\r\n        this.ctx.fillText(`Blaster`, xOffset + 50, yOffset + 210);\r\n        this.ctx.drawImage(SPACEBAR_ICON, xOffset += 170, yOffset + 113, 200, 80);\r\n        this.ctx.fillText(`Cannon`, xOffset + 90, yOffset + 210);\r\n        this.ctx.fillText(`Spacebar`, xOffset + 65, yOffset + 150);\r\n\r\n        this.ctx.drawImage(LINKED_IN_ICON, 10, 10, 80, 80);\r\n      }\r\n      this.ctx.restore();\r\n    }\r\n    \r\n    this.menus.push(startGameMenu);\r\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n\r\n    this.bgm.pause();\r\n  }\r\n\r\n  startGame() {\r\n    this.loopCount = 0;\r\n    this.state = STATE_RUNNING;\r\n    this.menus = [];\r\n    this.entities = [];\r\n    this.vanity = [];\r\n    this.player.alive = true;\r\n    this.player.maxHealth = STARTING_HEALTH;\r\n    this.player.health = STARTING_HEALTH;\r\n    this.particles.push(new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y));\r\n    this.playSound(this.bgm, 0.4);\r\n    this.bgm.currentTime = 0;\r\n  }\r\n\r\n  endGame() {\r\n    this.state = STATE_OVER;\r\n    this.freeze(10);\r\n    this.player.alive = false;\r\n    this.player.color = 'black'; \r\n    this.playSound(this.defeatSfx, 0.2);\r\n\r\n    let explode1 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n    explode1.color = 'white';\r\n    explode1.knockback = 100;\r\n    explode1.damage = 10;\r\n    explode1.r = 310;\r\n    this.particles.push(explode1);\r\n    let explode2 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n    explode2.color = 'gray';\r\n    explode2.knockback = 0;\r\n    explode2.damage = 40;\r\n    explode2.r = 300;\r\n    this.particles.push(explode2);\r\n    let explode3 = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n    explode3.color = 'black';\r\n    explode3.knockback = 0; \r\n    explode3.damage = 999999;\r\n    explode3.r = 100;\r\n    this.particles.push(explode3);\r\n\r\n    let drawEnd = function() {\r\n      let endGameMenu = new _GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n      endGameMenu.pos.x = 0,\r\n      endGameMenu.pos.y = this.cvs.height / 2;\r\n      endGameMenu.height = 0;\r\n      endGameMenu.width = this.cvs.width;\r\n      endGameMenu.color = \"rgba(0,0,0,0.5)\";\r\n      endGameMenu.aliveTime = 60;\r\n      endGameMenu.time = this.timeSeconds;\r\n      endGameMenu.difficulty = this.difficulty;\r\n      endGameMenu.draw = function() {\r\n        this.aliveTime--;\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = this.color;\r\n        this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (60 - this.aliveTime) / 60, this.cvs.width, this.cvs.height / 4 * (60 - this.aliveTime) / 60);\r\n        if (this.aliveTime <=0) {\r\n          this.aliveTime = 0;\r\n          this.ctx.fillStyle = 'white';\r\n          this.ctx.font = '20px sans-serif';\r\n          \r\n          this.ctx.fillText(`Score: ${this.game.score}`, this.cvs.width / 2 - 70, this.cvs.height / 2 - 40);\r\n          this.ctx.fillText(`Highscore: ${this.game.highscore}`, this.cvs.width / 2 - 70, this.cvs.height / 2 - 20 );\r\n          this.ctx.fillText(`Time: ${this.time}`, this.cvs.width / 2 - 70, this.cvs.height / 2 );\r\n          this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, this.cvs.width / 2 - 70, this.cvs.height / 2 + 20);\r\n          this.ctx.textAlign = 'center';\r\n\r\n          this.ctx.fillText(`Press [Enter] to restart`, this.cvs.width / 2,  this.cvs.height / 2 + 80);\r\n\r\n          this.ctx.textAlign = 'right';\r\n\r\n          this.ctx.fillText(\"♪♪  7th Dragon OST || Battlefield - Swords Bursting (Retro Ver.)\", this.cvs.width - 20, this.cvs.height - 20);\r\n        }\r\n        this.ctx.restore();\r\n      }\r\n      if (this.state === STATE_OVER) this.menus.push(endGameMenu);\r\n    }\r\n    drawEnd = drawEnd.bind(this);\r\n    setTimeout(drawEnd, 2000);\r\n  }\r\n\r\n  restartGame() {\r\n    this.init();\r\n  }\r\n\r\n  playSound(sound, vol = 1) {\r\n    if (this.mute) return;\r\n    sound.volume = vol;\r\n    sound.play();\r\n  }\r\n\r\n  playSoundMany(path, vol = 1) {\r\n    if (this.mute) return;\r\n    let sound = new Audio(path);\r\n    sound.volume = vol;\r\n    sound.play();\r\n  }\r\n\r\n  // Freezes the entire game state for n frames\r\n  // Typically use this for hitstop\r\n  freeze(n) {\r\n    this.pauseTime = n;\r\n    this.vanity.forEach(entity => {\r\n      if (entity.unpausable) {\r\n        entity.paused = false;\r\n      } else {\r\n        entity.paused = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.loopCount++;\r\n    if (this.highscore < this.score) this.highscore = this.score;\r\n\r\n    switch(this.state) {\r\n      case STATE_INIT: \r\n        this.init();\r\n        break;\r\n\r\n      case STATE_BEGIN:\r\n        if (this.loopCount % 120 === 0 && this.fps >= MIN_FRAME_RATE && this.loopCount > 60) {\r\n          this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n          if (this.loopCount % 240 === 0) {\r\n            this.player.pos.x = 200 + Math.random() * (this.cvs.width - 200 * 2);\r\n            this.player.pos.y = 200 + Math.random() * (this.cvs.height - 200 * 2);\r\n          }\r\n        }\r\n        this.players.forEach(entity => entity.update());\r\n        this.entities.forEach(entity => entity.update());\r\n        this.particles.forEach(entity => entity.update());\r\n        break;\r\n\r\n      case STATE_RUNNING:\r\n\r\n        if (this.pauseTime === 0) {\r\n          this.vanity.forEach(entity => entity.paused = false);\r\n          this.particles = this.particles.concat(this.delayedParticles);\r\n          this.delayedParticles = [];\r\n        }\r\n\r\n        if (this.pauseTime > 0) {\r\n          this.vanity = this.vanity.filter(entity => entity.alive);\r\n          this.vanity.filter(entity => !entity.paused).forEach(entity => entity.update());\r\n        } else {\r\n          if (this.loopCount % DIFFICULTY_INTERVAL === 0) {\r\n            this.difficulty *= 1 + DIFFICULTY_MULTIPLIER * this.difficultyRate;\r\n          }\r\n          if (this.difficulty > MAX_DIFFICULTY) this.difficulty = MAX_DIFFICULTY;\r\n\r\n          // Generate enemies -\r\n          // Stop making enemies if you miss too many frame deadlines, also keep generating enemies if the FPS drop was to player using beam\r\n          let spawnRate = 20 - Math.floor(this.difficulty);\r\n          spawnRate = spawnRate <= 1 ? 1 : spawnRate;\r\n          if (this.loopCount % (BASE_SPAWN_RATE + spawnRate) === 0 && (this.fps >= MIN_FRAME_RATE || this.player.beamCooldown > 0) && this.loopCount > 60) {\r\n            this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n          }\r\n\r\n          // Handle enemy death\r\n          let soundLimit = 3;\r\n          let soundCount = 0;\r\n          this.entities.filter(entity => !entity.alive).forEach(entity => {\r\n            if (soundCount <= soundLimit) {\r\n              this.playSoundMany(`${PATH}/assets/boom2.wav`, 0.3);\r\n              soundCount++;\r\n            }\r\n            this.vanity.push(new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r * 1.5, entity.vel))\r\n\r\n            this.difficulty += 0.002 * this.difficultyRate;\r\n            this.score += entity.score;\r\n            this.player.charge++;\r\n          });\r\n\r\n          // Handle updates\r\n          this.player.update();\r\n          this.vanity = this.vanity.filter(entity => entity.alive);\r\n          this.vanity.forEach(entity => entity.update());\r\n          this.entities = this.entities.filter(entity => entity.alive);\r\n          this.entities.forEach(entity => entity.update());\r\n          this.particles.filter(entity => !entity.alive).forEach(entity => {\r\n            if (entity instanceof _Particle__WEBPACK_IMPORTED_MODULE_1__[\"default\"] && !(entity instanceof _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"])) {\r\n              let hitspark = new _Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this, entity.pos.x, entity.pos.y);\r\n              hitspark.aliveTime = 4;\r\n              hitspark.growthRate = 1;\r\n              hitspark.r = 1;\r\n              hitspark.damage = 0;\r\n              this.vanity.push(hitspark);\r\n            }\r\n          });\r\n          this.particles = this.particles.filter(entity => entity.alive);\r\n          this.particles.forEach(entity => entity.update());\r\n\r\n          if (this.player.health <= 0) this.endGame();\r\n        }\r\n        break;\r\n\r\n      case STATE_OVER:\r\n        if (this.pauseTime > 0) return;\r\n\r\n        let randDir = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\r\n        let randPos = randDir.dup().multiply(400);\r\n        let diffFrac = _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"].difference(this.player.pos, randPos).multiply(1/20);\r\n        // debugger\r\n        let line = new _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, this.player.pos.x + randPos.x, \r\n          this.player.pos.y + randPos.y, randDir, 0, false);\r\n        line.width = 20;\r\n        line.length = 4000;\r\n        line.knockback = 0;\r\n        line.silenced = true;\r\n        line.unpausable = true;\r\n        line.aliveTime = 60;\r\n        line.cb = function () {\r\n          this.length *= 0.85;\r\n          this.width *= 0.7;\r\n          this.pos.subtract(randDir.multiply(1.5));\r\n          // this.pos.x = this.game.player.pos.x;\r\n          // this.pos.y = this.game.player.pos.y;\r\n        }\r\n        this.vanity.push(line);\r\n\r\n\r\n        // this.player.update();\r\n\r\n        // if (this.loopCount % (Math.floor(SPAWN_RATE * 1.5)) === 0) {\r\n        if (this.loopCount % 2 === 0) {\r\n          this.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n          // if (this.fps <= MIN_FRAME_RATE - 5) this.entities[0].alive = false;\r\n        }\r\n        this.entities.forEach(entity => {\r\n          let diff = _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"].difference(entity.pos, this.player.pos);\r\n          let distSqr = diff.dot(diff);\r\n\r\n          if (entity.r * entity.r + this.player.r * this.player.r  + 100 > distSqr) {\r\n            entity.alive = false;\r\n          }\r\n        })\r\n        this.entities.filter(entity => !entity.alive).forEach(entity => {\r\n          // if (this.loopCount % 5 === 0) {\r\n          //   let sound = new Audio(\"../assets/boom2.wav\");\r\n          //   sound.play();\r\n          // }\r\n          this.vanity.push(new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r))\r\n        });\r\n        this.entities = this.entities.filter(entity => entity.alive);\r\n        this.entities.forEach(entity => entity.update());\r\n\r\n        this.particles = this.particles.filter(entity => entity.alive);\r\n        this.particles.forEach(entity => entity.update());\r\n\r\n        this.vanity = this.vanity.filter(entity => entity.alive);\r\n        this.vanity.forEach(entity => entity.update());\r\n\r\n        // this.restartGame();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Draw player reticle at mouse position\r\n  drawCursor() {\r\n    let cursorSize = 15;\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    // this.ctx.arc(this.player.mousePos.x, this.player.mousePos.y, 4, 0, 2 * Math.PI);\r\n    // this.ctx.fillStyle = \"rgba(0,0,0,0)\";\r\n    this.ctx.strokeStyle = \"black\";\r\n    this.ctx.lineWidth = 4;\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'white';\r\n    this.ctx.moveTo(this.player.mousePos.x - cursorSize - this.player.dashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.lineTo(this.player.mousePos.x + cursorSize + this.player.dashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.moveTo(this.player.mousePos.x, this.player.mousePos.y - cursorSize - this.player.dashCooldown / 2);\r\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y + cursorSize + this.player.dashCooldown / 2);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.beginPath();\r\n    cursorSize = 14;\r\n    this.ctx.shadowBlur = 0;\r\n    this.ctx.lineWidth = 2;\r\n    if (this.player.charge >= this.player.chargeMax * 2) {\r\n      this.ctx.strokeStyle = \"lightblue\";\r\n    } else if (this.player.charge >= this.player.chargeMax) {\r\n      this.ctx.strokeStyle = \"red\";\r\n    } else {\r\n      this.ctx.strokeStyle = \"yellow\";\r\n    }\r\n    this.ctx.moveTo(this.player.mousePos.x - cursorSize - this.player.dashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.lineTo(this.player.mousePos.x + cursorSize + this.player.dashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.moveTo(this.player.mousePos.x, this.player.mousePos.y - cursorSize - this.player.dashCooldown / 2);\r\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y + cursorSize + this.player.dashCooldown / 2);\r\n    this.ctx.stroke();\r\n    \r\n    this.ctx.font = '20px sans-serif';\r\n    this.ctx.fillStyle = 'white';\r\n\r\n    // === DEBUG SHOW ANGLE\r\n    // let angle = Math.atan2(this.player.aim.y, this.player.aim.x);\r\n    // this.ctx.fillText(`Angle: ${angle / Math.PI * 180}`, this.player.mousePos.x, this.player.mousePos.y);\r\n\r\n    // this.ctx.fillRect(this.player.mousePos.x + 3, this.player.mousePos.y + 3, this.player.dashCooldown, 3);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawFPS() {\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.font = '12px sans-serif';\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'black';\r\n    let xOffset = this.cvs.width - 55;\r\n    let yOffset = 70;\r\n    this.ctx.fillText(`FPS: ${this.fps}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`obj: ${this.particles.length + this.entities.length + this.vanity.length}`, xOffset, yOffset += 20);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawUI() {\r\n    this.ctx.save();\r\n    this.ctx.font = '20px sans-serif';\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'black';\r\n    let xOffset = 10;\r\n    let yOffset = 2;\r\n\r\n    this.ctx.fillText(`Score: ${this.score}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Highscore: ${this.highscore}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Time: ${this.timeSeconds}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, xOffset, yOffset += 20);\r\n    this.ctx.restore();\r\n    this.drawFPS();\r\n  }\r\n\r\n  drawVolControls() {\r\n    this.ctx.save();\r\n    if (this.mute) {\r\n      this.ctx.drawImage(MUTE, this.cvs.width - 83, 15, 54, 54);\r\n    } else {\r\n      this.ctx.drawImage(VOL, this.cvs.width - 80, 10);\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawHealth() {\r\n    this.ctx.save();\r\n    this.ctx.font = '20px sans-serif';\r\n    let xOffset = this.cvs.width / 2\r\n    let yOffset = this.cvs.height - 82;\r\n    // this.ctx.fillStyle = `rgba(${21 + ((this.player.maxHealth - this.player.health) / this.player.maxHealth) * 70},21,21)`;\r\n    // this.ctx.fillRect(0, 0, this.cvs.width, this.cvs.height);\r\n    this.ctx.fillStyle = `rgba(${50 - (this.player.health / this.player.maxHealth * 200)},${100 + this.player.health / this.player.maxHealth * 100},0)`;\r\n    this.ctx.fillRect(xOffset - this.player.health / 2, yOffset, this.player.health, 20);\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.shadowBlur = 3;\r\n    this.ctx.shadowColor = 'black';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillText(`${this.player.health}`, xOffset, yOffset + 17);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawChargeBar() {\r\n    let xOffset = this.cvs.width / 2;\r\n\r\n    this.ctx.save();\r\n    this.ctx.textAlign = 'center';\r\n    if (this.player.charge >= this.player.chargeMax) {\r\n\r\n      this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"red\";\r\n      this.ctx.fillRect(xOffset - this.player.chargeMax * 2, this.cvs.height - 57, this.player.chargeMax * 4, 4);\r\n      if (this.player.beamCooldown === 0) {\r\n        this.ctx.font = '12px sans-serif';\r\n        if (this.player.chargeMax * 2 <= this.player.charge) {\r\n          this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"darkblue\";\r\n          this.ctx.font = '14px sans-serif';\r\n          this.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this, xOffset - this.player.chargeMax * 2 + (Math.random() * 2 * this.player.chargeMax) * 2, this.cvs.height - 57, -3, 1, 10));\r\n          this.ctx.shadowBlur = 2;\r\n          this.ctx.shadowColor = 'black';\r\n          this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'darkblue' : 'yellow';\r\n          this.ctx.fillText(`OVERCHARGE!!`, xOffset, this.cvs.height - 40);\r\n        } else {\r\n          this.ctx.shadowBlur = 2;\r\n          this.ctx.shadowColor = 'black';\r\n          this.ctx.fillText(`READY!!`, xOffset, this.cvs.height - 40);\r\n        }\r\n      }\r\n      this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"darkblue\";\r\n      let charge = this.player.charge < this.player.chargeMax * 2 ? this.player.charge % this.player.chargeMax : this.player.chargeMax;\r\n      this.ctx.fillRect(xOffset - charge * 2, this.cvs.height - 59, charge * 4, 6);\r\n    } else {\r\n      this.ctx.fillStyle = \"olive\";\r\n      this.ctx.fillRect(xOffset - this.player.chargeMax * 2, this.cvs.height - 57, this.player.charge * 4, 4);\r\n      this.ctx.fillRect(xOffset - this.player.chargeMax * 2, this.cvs.height - 58, 2, 6);\r\n      this.ctx.fillRect(xOffset + this.player.chargeMax * 2, this.cvs.height - 58, 2, 6);\r\n      if (this.player.beamCooldown === 0) {\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.shadowColor = 'black';\r\n\r\n        this.ctx.fillStyle = \"yellow\";\r\n        this.ctx.font = '17px sans-serif';\r\n        this.ctx.clearRect(xOffset - 12, this.cvs.height - 57, 24, 6);\r\n        this.ctx.fillText(`${this.player.charge}`, xOffset, this.cvs.height - 47);\r\n        this.ctx.fillStyle = \"olive\";\r\n        this.ctx.font = '12px sans-serif';\r\n        this.ctx.fillText(`/${this.player.chargeMax}`, xOffset + 20, this.cvs.height - 41);\r\n      }\r\n    }\r\n    if (this.player.beamCooldown > 0) {\r\n      this.ctx.fillStyle = this.loopCount % 5 === 0 ? 'white' : \"lightblue\";\r\n      this.ctx.fillRect(xOffset - this.player.beamCooldown * 2, this.cvs.height - 60, this.player.beamCooldown * 4, 8);\r\n      this.ctx.font = '13px sans-serif';\r\n      this.ctx.shadowBlur = 2;\r\n      this.ctx.shadowColor = 'black';\r\n      this.ctx.fillText(`!!! COOLDOWN !!!`, xOffset, this.cvs.height - 40);\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawFreeze() {\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = `rgba(0,0,0,${this.pauseTime / 10})`;\r\n    this.ctx.fillRect(0, 0, this.cvs.width, this.cvs.height);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  draw() {\r\n    // Resize canvas to window every frame\r\n    this.ctx.canvas.width = window.innerWidth;\r\n    this.ctx.canvas.height = window.innerHeight;\r\n\r\n    switch (this.state) {\r\n      case STATE_INIT:\r\n        break;\r\n\r\n      case STATE_BEGIN:\r\n        this.particles.forEach(entity => entity.draw());\r\n        // this.player.draw();\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.menus.forEach(entity => entity.draw());\r\n        break;\r\n\r\n      case STATE_RUNNING:\r\n        // Handle drawing of all game objects\r\n        this.drawFreeze();;\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.particles.forEach(entity => entity.draw());\r\n        this.vanity.forEach(entity => entity.draw());\r\n        this.menus.forEach(entity => entity.draw());\r\n        this.drawChargeBar();\r\n        this.drawUI();\r\n        this.drawHealth();\r\n        this.player.draw();\r\n        break;\r\n\r\n      case STATE_OVER:\r\n        this.drawFreeze(); \r\n\r\n        this.particles.forEach(entity => entity.draw());\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.vanity.forEach(entity => entity.draw());\r\n        this.player.draw();\r\n        this.menus.forEach(entity => entity.draw());\r\n        this.drawFPS();\r\n      break;\r\n      default:\r\n        break;\r\n    }\r\n    this.drawCursor();\r\n    this.drawVolControls();\r\n  }\r\n\r\n  loop() {\r\n    let time = (new Date).getTime();\r\n    this.timeDelta = time - this.prevTime;\r\n    \r\n    if (this.timeDelta < NORMAL_TIME_DELTA * 0.90) {\r\n\r\n    } else {\r\n      if (this.pauseTime > 0) this.pauseTime--;\r\n      this.prevTime = time;\r\n      this.update();\r\n      this.draw();\r\n      this.fpsCount++;\r\n    }\r\n\r\n    if (time > this.timeTracker) {\r\n      this.fps = this.fpsCount;\r\n      this.fpsCount = 0;\r\n      this.timeTracker += 1000;\r\n      this.timeSeconds++;\r\n    }\r\n    window.requestAnimationFrame(this.loop);\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack:///./javascript/Game.js?");

/***/ }),

/***/ "./javascript/GameObject.js":
/*!**********************************!*\
  !*** ./javascript/GameObject.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n\r\n\r\n\r\nconst COLOR = 'black';\r\nconst RADIUS = 3;\r\nconst MAX_HEALTH = 100;\r\n\r\n\r\n// May be inefficient to create new position vectors all the time\r\nclass GameObject {\r\n  constructor(game) {\r\n    this.game = game;\r\n    this.cvs = game.cvs;\r\n    this.ctx = game.ctx;\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.alive = true;\r\n    this.pauseTime = 0;\r\n    this.paused = true;\r\n    this.unpausable = false;\r\n    this.silenced = false;\r\n\r\n    this.maxHealth = MAX_HEALTH;\r\n    this.health = MAX_HEALTH;\r\n\r\n    this.radius = RADIUS;\r\n    this.color = COLOR;\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  validatePosition(rectX, rectY) {\r\n  }\r\n\r\n  update() {\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n  }\r\n  // Multiply velocity by the fractional difference in timeDelta\r\n  // Does not skip frames, but gives the illusion of same speed\r\n  addVelocityTimeDelta() {\r\n    this.pos.add(this.vel.dup().multiply(this.game.timeDelta / this.game.normalTimeDelta));\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (GameObject);\n\n//# sourceURL=webpack:///./javascript/GameObject.js?");

/***/ }),

/***/ "./javascript/Particle.js":
/*!********************************!*\
  !*** ./javascript/Particle.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/DamageNumber.js\");\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 4;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 37;\r\nconst COLOR = \"#14ffec\";\r\nconst VELOCITY = 10;\r\n\r\nclass Particle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(\r\n    game, \r\n    startX = 0, \r\n    startY = 0, \r\n    vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0,0), \r\n    cb = () => {} \r\n  ) {\r\n    super(game);\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = vel || VELOCITY;\r\n    this.r = RADIUS;\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.knockback = KNOCKBACK;\r\n    this.cb = cb;\r\n    this.aliveTime = 1;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  validatePosition(rectX, rectY) {\r\n    if ( this.pos.x > rectX + this.r \r\n      || this.pos.x < 0 - this.r \r\n      || this.pos.y > rectY + this.r \r\n      || this.pos.y < 0 - this.r ) { \r\n        this.alive = false;\r\n      };\r\n  }\r\n\r\n  checkCollision (obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n\r\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\r\n        this.alive = false;\r\n        this.vel.normalize();\r\n        this.vel.multiply(this.knockback / Math.pow(obj.r / 6, 2));\r\n        obj.vel.add(this.vel);\r\n        obj.health -= this.damage;\r\n        this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.damage));\r\n        if (obj.health <= 0) {\r\n          obj.alive = false;\r\n          this.vel.normalize();\r\n          this.vel.multiply(this.knockback / 2);\r\n          obj.vel.add(this.vel);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n    this.cb();\r\n    this.addVelocityTimeDelta();\r\n    this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n    this.validatePosition(this.cvs.width, this.cvs.height);\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.fill();\r\n    // this.ctx.strokeStyle = this.color;\r\n    // this.ctx.stroke();\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Particle);\n\n//# sourceURL=webpack:///./javascript/Particle.js?");

/***/ }),

/***/ "./javascript/Player.js":
/*!******************************!*\
  !*** ./javascript/Player.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/GameObject.js\");\n/* harmony import */ var _enemy_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enemy_factory */ \"./javascript/enemy_factory.js\");\n/* harmony import */ var _particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle_factory */ \"./javascript/particle_factory.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slam */ \"./javascript/Slam.js\");\n/* harmony import */ var _BeamSlash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BeamSlash */ \"./javascript/BeamSlash.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Beam */ \"./javascript/Beam.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Explosion */ \"./javascript/Explosion.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/SlashSpark.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import shotSfx from '../assets/laser7.wav';\r\n\r\nconst CLAMP_SPAWN = 100; // Offset from edges\r\nconst MAX_SPEED = 7;\r\nconst MIN_SPEED = 0.1;\r\nconst ACCEL = 3;\r\nconst DECEL = 0.9;\r\nconst SPRINT_SPEED = 8;\r\nconst MAX_SPRINT_SPEED = 10;\r\nconst DASH_TIME = 0;\r\nconst DASH_SPEED = 7;\r\nconst DASH_COOLDOWN = 12;\r\nconst POST_DASH_INVUL = 2;\r\nconst CHARGE_MAX = 60;\r\n// const CHARGE_MAX = 0;\r\nconst CHARGE_STACKS = 2.2;\r\nconst CHARGE_COOLDOWN = 90;\r\nconst BEAM_DAMAGE = 7000;\r\n// const CHARGE_COOLDOWN = 10;\r\nconst SHOOT_COOLDOWN = 0;\r\n\r\nconst PLAYER_RADIUS = 11;\r\nconst COLOR = '#0d7377';\r\nconst DAMPENING_COEFFICIENT = 0.7;\r\nconst CLAMP_SPEED = 200;\r\n\r\n\r\nconst STATE_WALKING = \"STATE_WALKING\";\r\nconst STATE_DASHING = \"STATE_DASHING\";\r\n\r\nconst KEY = {\r\n  W: 87,\r\n  A: 65,\r\n  S: 83,\r\n  D: 68,\r\n  ENTER: 13,\r\n  UP: 38,\r\n  // LEFT: 37,\r\n  DOWN: 40,\r\n  // RIGHT: 39,\r\n  SHIFT: 16,\r\n  SPACE: 32,\r\n  MOUSE_LEFT: 10000,\r\n  MOUSE_RIGHT: 10002,\r\n};\r\n\r\nconst MOUSE = {\r\n  LEFT: 0,\r\n  MIDDLE: 1,\r\n  RIGHT: 2,\r\n}\r\n\r\nclass Player extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    \r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](CLAMP_SPAWN + Math.random() * (this.cvs.width - CLAMP_SPAWN * 2),\r\n                          CLAMP_SPAWN + Math.random() * (this.cvs.height - CLAMP_SPAWN * 2));\r\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); \r\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.mousePos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.cvs.width / 2, this.cvs.height / 2);\r\n    this.shootCooldown = 0;\r\n    this.slashReset = 0;\r\n    this.slashCombo = 0;\r\n    this.moveState = STATE_WALKING;\r\n    this.dashDuration = 0;\r\n    this.dashDirection = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.dashCooldown = 0;\r\n    this.beamCooldown = 0;\r\n    this.charging = false;\r\n    this.invul = 0;\r\n    this.noclip = 0;\r\n    this.velRestoreDash = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); \r\n    this.charge = CHARGE_MAX;\r\n    this.chargeMax = CHARGE_MAX;\r\n\r\n    this.maxHealth = 100;\r\n    this.health = this.maxHealth;\r\n\r\n    this.r = PLAYER_RADIUS;\r\n    this.color = COLOR;\r\n    this.keyDown = {\r\n      [KEY.W]: false,\r\n      [KEY.A]: false,\r\n      [KEY.S]: false,\r\n      [KEY.D]: false,\r\n      [KEY.SHIFT]: false,\r\n      [KEY.SPACE]: false,\r\n      [KEY.MOUSE_LEFT]: false,\r\n      [KEY.MOUSE_RIGHT]: false,\r\n    }\r\n\r\n    this.setMousePosition = this.setMousePosition.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  // Store mouse position relative to canvas origin\r\n  setMousePosition(e) {\r\n    var canvasRect = this.cvs.getBoundingClientRect();\r\n    this.mousePos.x = e.clientX - canvasRect.left;\r\n    this.mousePos.y = e.clientY - canvasRect.top;\r\n    this.setAim();\r\n  }\r\n\r\n  // Set player's unnormalized aim relative to stored mouse position\r\n  setAim() {\r\n    this.aim = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.mousePos.x - this.pos.x, this.mousePos.y - this.pos.y);\r\n  }\r\n\r\n  // Dash in a direction for a few frames\r\n  // End dash logic is handled in update\r\n  dash() {\r\n    if (this.moveState !== STATE_DASHING) {\r\n      this.moveState = STATE_DASHING;\r\n      // this.pauseTime = 3;\r\n      this.invul = 5;\r\n\r\n      this.setAim();\r\n      // this.vel = this.aim.dup().normalize().multiply(DASH_SPEED * 2);\r\n      // this.velRestoreDash = this.vel.dup();\r\n      this.dashDirection = this.aim.dup();\r\n      this.dashDuration = DASH_TIME;\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/SE_00064.wav`, 0.13);\r\n    }\r\n  }\r\n\r\n  fireBeam() {\r\n    if (this.charge >= CHARGE_MAX) {\r\n      let freezeTime = 18;\r\n      this.charge -= CHARGE_MAX;\r\n      this.beamCooldown = CHARGE_COOLDOWN;\r\n      this.charging = true;\r\n\r\n      setTimeout(function () {\r\n        let beam = new _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.game, this.pos.x, this.pos.y);\r\n        beam.width = 300;\r\n        beam.length = 4000;\r\n        beam.damage = BEAM_DAMAGE;\r\n        beam.knockback = 80;\r\n        beam.color = \"red\";\r\n        beam.combo = -2;\r\n        this.charging = false;\r\n        \r\n        this.game.delayedParticles.push(beam);\r\n        this.game.freeze(freezeTime);\r\n        this.invul = 5;\r\n        let kb = this.aim.dup().normalize().multiply(-75);\r\n        this.vel.add(kb);\r\n\r\n        let cb = function () {\r\n          this.length *= 0.70;\r\n          this.width *= 0.70;\r\n        }\r\n        let baseAngle = Math.floor(Math.random() * 360) * Math.PI / 180;\r\n        let spark1 = new _SlashSpark__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 70, 2000, 30, baseAngle, Math.PI / 20, false);\r\n        let spark2 = new _SlashSpark__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 70, 2000, 30, baseAngle + Math.PI / 2, Math.PI / 20, false);\r\n        spark1.cb = cb;\r\n        spark2.cb = cb;\r\n        this.game.vanity.push(spark1);\r\n        this.game.vanity.push(spark2);\r\n\r\n        let explosion1 = new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, 100);\r\n        explosion1.aliveTime = 7;\r\n        explosion1.color = \"rgba(255,255,255,.1)\";\r\n        this.game.vanity.push(explosion1);\r\n\r\n        let explosion2 = new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, 150);\r\n        explosion2.aliveTime = 5;\r\n        this.game.vanity.push(explosion2);\r\n\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00016.wav`, 0.2);\r\n      }.bind(this), 200);\r\n\r\n      setTimeout(function() {\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00049.wav`, 0.2);\r\n      }, 300 + this.game.normalTimeDelta * freezeTime);\r\n    }\r\n  }\r\n\r\n  // Fire\r\n  shoot() {\r\n    if (this.game.loopCount % 5 === 0) {\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/laser7.wav`, 0.2);\r\n    }\r\n\r\n    this.shootCooldown = SHOOT_COOLDOWN;\r\n    Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n    Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n    Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n    Object(_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n  }\r\n\r\n\r\n  mountController() {\r\n    document.addEventListener('keydown', (e) => {\r\n      let key = e.keyCode;\r\n      if(key === 8) this.health = 0; // BACKSPACE\r\n      if(key === 187) this.game.difficulty++; //EQUAL\r\n      if(key === 189) this.health += 100; //MINUS\r\n\r\n      // Ignore keys that have not been bound\r\n      if (!Object.values(KEY).includes(key)) return;\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          if (key !== KEY.ENTER && key !== KEY.SPACE) { \r\n            this.keyDown[key] = true;\r\n            this.game.startGame();\r\n          }\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          this.keyDown[key] = true;\r\n          if (key == KEY.DOWN) this.game.entities.push(_enemy_factory__WEBPACK_IMPORTED_MODULE_2__[\"spawnCircleRandom\"](this));\r\n          if (key == KEY.UP) this.charge += CHARGE_MAX;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          if (key === KEY.ENTER) this.game.restartGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.addEventListener('keyup', (e) => {\r\n      let key = e.keyCode;\r\n      if (!Object.values(KEY).includes(key)) return;\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          this.keyDown[key] = false;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.onmousemove = (e) => {\r\n      this.setMousePosition(e);\r\n    };\r\n\r\n    // Disable right click context menu\r\n    document.addEventListener(\"contextmenu\", (e) => { \r\n      e.preventDefault();\r\n      return false;\r\n    });\r\n\r\n    document.addEventListener(\"mousedown\", (e) => {\r\n      e.preventDefault();\r\n      let clickType = e.button;\r\n\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          if (\r\n            this.mousePos.x >= 0 &&\r\n            this.mousePos.x <= 100 &&\r\n            this.mousePos.y >= 0 &&\r\n            this.mousePos.y <= 100) {\r\n              window.location.href = \"https://www.linkedin.com/in/cdnguyen714/\";\r\n              return;\r\n          }\r\n          this.game.startGame();\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      if (\r\n        this.mousePos.x >= this.cvs.width - 100 &&\r\n        this.mousePos.x <= this.cvs.width  &&\r\n        this.mousePos.y >= 0  &&\r\n        this.mousePos.y <= 100 ) {\r\n          this.game.mute = !this.game.mute;\r\n          if (this.game.bgm.volume === 0) {\r\n            this.game.bgm.volume = 0.4;\r\n            this.game.bgm.play();\r\n          } else {\r\n            this.game.bgm.volume = 0;\r\n            this.game.bgm.pause();\r\n          }\r\n        }\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", (e) => {\r\n      e.preventDefault();\r\n      let clickType = e.button;\r\n\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = false;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = false;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Ensure players do not leave the boundaries defined here.\r\n  validatePosition(rectX, rectY) {\r\n    if(this.pos.x + this.r > rectX) this.pos.x = rectX - this.r;\r\n    if(this.pos.x - this.r < 0) this.pos.x = this.r;\r\n    if(this.pos.y + this.r > rectY) this.pos.y = rectY - this.r;\r\n    if(this.pos.y - this.r < 0) this.pos.y = this.r;\r\n  }\r\n\r\n  dampSpeed() {\r\n    let vel = this.vel.length();\r\n    let maxSpeed = (this.keyDown[KEY.SHIFT] \r\n      ? MAX_SPRINT_SPEED \r\n      : MAX_SPEED)\r\n    if(vel > CLAMP_SPEED) {\r\n      this.vel.normalize().multiply(CLAMP_SPEED);\r\n    }\r\n    if(vel > maxSpeed) {\r\n      this.vel.multiply(DAMPENING_COEFFICIENT);\r\n    }\r\n  }\r\n\r\n  applyDecel() {\r\n    if(this.keyDown[KEY.W]) return;\r\n    if(this.keyDown[KEY.A]) return;\r\n    if(this.keyDown[KEY.S]) return;\r\n    if(this.keyDown[KEY.D]) return;\r\n    let result = this.vel.multiply(DECEL);\r\n    if (result.x < MIN_SPEED || result.x > -1 * MIN_SPEED) result.x = 0; \r\n    if (result.y < MIN_SPEED || result.y > -1 * MIN_SPEED) result.y = 0; \r\n    this.vel = result;\r\n  }\r\n\r\n  update() {\r\n    // if player is dead, simplify update loop\r\n    if (!this.alive) {\r\n      this.dampSpeed();\r\n      this.addVelocityTimeDelta();\r\n      this.applyDecel();\r\n      this.validatePosition(this.cvs.width, this.cvs.height);\r\n      return;\r\n    }\r\n\r\n    if (this.shootCooldown > 0) this.shootCooldown--;\r\n    if (this.dashCooldown > 0) this.dashCooldown--;\r\n    if (this.beamCooldown > 0) this.beamCooldown--;\r\n    if (this.invul >= 0) this.invul--;\r\n    if (this.noclip >= 0) this.noclip--;\r\n    if (this.charge > CHARGE_MAX * CHARGE_STACKS) this.charge = Math.floor(CHARGE_MAX * CHARGE_STACKS);\r\n\r\n    // handle combo reset logic\r\n    if (this.slashReset > 0) {\r\n      this.slashReset--;\r\n    } else {\r\n      this.slashCombo = 0;\r\n    }\r\n\r\n    // add sparks for charge level\r\n    if (this.game.loopCount % 2) {\r\n      if (this.charge >= this.chargeMax * 2) {\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, this.pos.x, this.pos.y, -1, 3, this.r * 2));\r\n      } else if (this.charge >= this.chargeMax) {\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, this.pos.x, this.pos.y, -3, 2, this.r * 1.5));\r\n      }\r\n    }\r\n    \r\n    // if player is paused, do not apply movement or actions\r\n    if (this.pauseTime > 0) {\r\n      this.pauseTime--;\r\n      if(this.pauseTime === 0) {\r\n        // this.vel = this.velRestoreDash;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Calculate facing direction and apply shooting controls\r\n    this.setAim();\r\n\r\n    if (this.keyDown[KEY.MOUSE_LEFT] && this.dashCooldown <= 0) this.dash();\r\n    if (this.keyDown[KEY.MOUSE_RIGHT] && this.shootCooldown <= 0) this.shoot();\r\n    if (this.keyDown[KEY.SPACE] && this.beamCooldown <= 0) this.fireBeam();\r\n\r\n    // Apply movement\r\n    if (this.moveState === STATE_WALKING) {\r\n      let offset = ACCEL * (this.keyDown[KEY.SHIFT] ? SPRINT_SPEED : 1);\r\n      if (this.vel.length() < MAX_SPRINT_SPEED) {\r\n        if (this.keyDown[KEY.W]) this.vel.y -= offset;\r\n        if (this.keyDown[KEY.A]) this.vel.x -= offset;\r\n        if (this.keyDown[KEY.S]) this.vel.y += offset;\r\n        if (this.keyDown[KEY.D]) this.vel.x += offset;\r\n      }\r\n\r\n      this.dampSpeed();\r\n      this.addVelocityTimeDelta();\r\n      this.applyDecel();\r\n    } else if (this.moveState === STATE_DASHING) {\r\n      // dash has ended\r\n      if (this.dashDuration <= 0) {\r\n        this.invul = POST_DASH_INVUL;\r\n        this.moveState = STATE_WALKING;\r\n        // this.game.particles.push(new Slam(this.game, this.pos.x, this.pos.y));\r\n        \r\n        this.game.particles.push(new _BeamSlash__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, this.slashCombo));\r\n        if (this.slashCombo === 3) {\r\n          this.dashCooldown = DASH_COOLDOWN + 60;\r\n          this.slashCombo = 0;\r\n          this.shootCooldown = this.dashCooldown - 30;\r\n          this.invul += 30;\r\n          this.noclip += 30;\r\n          // this.pauseTime = 5;\r\n        } else {\r\n          this.dashCooldown = DASH_COOLDOWN;\r\n          this.shootCooldown = this.dashCooldown + 5;\r\n          this.slashCombo++;\r\n          this.slashReset = DASH_COOLDOWN * 1.6;\r\n        }\r\n      } else {\r\n        this.dashDuration--;\r\n        this.vel.add(this.aim.normalize().multiply(DASH_SPEED));\r\n        this.addVelocityTimeDelta();\r\n      }\r\n    } \r\n\r\n    if (this.charging) {\r\n      let line  = new _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.game, this.pos.x, this.pos.y, new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Math.random() * 2 - 1, Math.random() * 2 - 1), 0, false);\r\n      line.width = 10;\r\n      line.length = 400;\r\n      line.knockback = 0;\r\n      line.silenced = true;\r\n      line.unpausable = true;\r\n      line.aliveTime = 90; \r\n      line.cb = function () {\r\n        this.length *= 0.9;\r\n        this.width *= 0.8;\r\n        // this.pos.x = this.game.player.pos.x;\r\n        // this.pos.y = this.game.player.pos.y;\r\n      }\r\n      this.game.vanity.push(line);\r\n    }\r\n\r\n    this.validatePosition(this.cvs.width, this.cvs.height);\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.strokeStyle = \"white\";\r\n\r\n    this.ctx.shadowBlur = 6;\r\n    this.ctx.shadowColor = \"white\";\r\n    \r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n\r\n    this.ctx.restore();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack:///./javascript/Player.js?");

/***/ }),

/***/ "./javascript/Slam.js":
/*!****************************!*\
  !*** ./javascript/Slam.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/DamageNumber.js\");\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 100;\r\nconst KNOCKBACK = 150;\r\nconst DAMAGE = 70;\r\nconst GROWTH_RATE = 10;\r\n// const COLOR = \"white\";\r\n\r\nclass Slam extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(game, startX, startY) {\r\n    super(game);\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.r = RADIUS;\r\n    this.color = this.game.player.color;\r\n    this.damage = DAMAGE;\r\n    this.knockback = KNOCKBACK;\r\n    this.aliveTime = 10;\r\n    this.initialTime= this.aliveTime;\r\n    this.growthRate = GROWTH_RATE;\r\n\r\n    // this.update = this.update.bind(this);\r\n    // this.draw = this.draw.bind(this);\r\n  }\r\n\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n\r\n    let diff = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\r\n        diff.normalize();\r\n        obj.vel.add(diff.multiply(-this.knockback));\r\n        obj.health -= this.damage;\r\n        if (obj.health <= 0) obj.alive = false;\r\n        this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.damage));\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n    \r\n    if(this.aliveTime === this.initialTime) {\r\n      this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n      this.game.freeze(5);\r\n    }\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (this.aliveTime > this.initialTime - 5) {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.fill(); \r\n      this.ctx.strokeStyle = \"white\";\r\n      this.ctx.stroke(); \r\n      this.ctx.restore();\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      this.r += this.growthRate;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = \"white\";\r\n     \r\n      this.ctx.shadowBlur = 30;\r\n      this.ctx.shadowColor = this.color;\r\n      this.ctx.stroke();  \r\n\r\n      this.ctx.restore();\r\n  \r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Slam);\n\n//# sourceURL=webpack:///./javascript/Slam.js?");

/***/ }),

/***/ "./javascript/SlashSpark.js":
/*!**********************************!*\
  !*** ./javascript/SlashSpark.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n\r\n\r\n\r\n\r\nconst WIDTH = 1;\r\nconst LENGTH = 60;\r\n\r\nconst DURATION = 20;\r\n\r\nconst COLOR = {\r\n  NORMAL: [255, 255, 255],\r\n  CRIT: [255, 255, 0],\r\n  CANNON: [0, 0, 0],\r\n}\r\n//\r\n// hitspark for beams\r\n//\r\nclass SlashSpark extends _Particle__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game, x, y, \r\n      combo = 0, \r\n      width = WIDTH, \r\n      length = LENGTH, \r\n      duration = DURATION, \r\n      angle = Math.floor(Math.random() * 360) * Math.PI / 180, \r\n      rotation = 0, \r\n      pauseState = true) {\r\n    super(game);\r\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y);\r\n    this.combo = combo;\r\n    this.width = width;\r\n    this.length = length;\r\n    this.aliveTime = duration;\r\n    this.initialTime = this.aliveTime;\r\n    this.rotation = rotation;\r\n    this.paused = pauseState;\r\n    this.cb = () => {};\r\n\r\n    this.offsets = [];\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n\r\n    // this.angle = Math.atan2(this.aim.y, this.aim.x);\r\n\r\n    this.angle = angle;\r\n    // let newAim = new Vector(1, 0);\r\n    // newAim.multiply(1, -1);\r\n\r\n    // let x2 = newAim.x * Math.cos(angle) - newAim.y * Math.sin(angle);\r\n    // let y2 = newAim.y * Math.cos(angle) + newAim.x * Math.sin(angle);\r\n    // // debugger\r\n    // this.aim = new Vector(-x2, -y2);\r\n\r\n    switch(this.combo) {\r\n      case -1:\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      case -2:\r\n        // this.angle = (Math.atan2(this.aim.y, this.aim.x));\r\n        this.color = COLOR.CANNON;\r\n        break;\r\n      case -3:\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      case 3:\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      default:\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // SlashSpark does not check collision\r\n  }\r\n\r\n  drawRect(offset, colorIn, widthMod = 1, lengthMod = 1) {\r\n    \r\n    this.ctx.save();\r\n\r\n    let percent = this.aliveTime / this.initialTime;\r\n    let color;\r\n    if (this.combo === -1) {\r\n      this.aliveTime >= this.initialTime - 2 \r\n        ? color = `rgba(${colorIn[0]},${colorIn[1]},${colorIn[2]},${1})` \r\n        : color = `rgba(${colorIn[0]},${colorIn[1]},${colorIn[2]},${percent})`\r\n    } else if (this.combo === -2) {\r\n      this.aliveTime >= this.initialTime - 2 \r\n        ? color = `rgba(255,255,255,${1})`\r\n        : color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`\r\n    } else {\r\n      this.aliveTime >= this.initialTime - 1\r\n        ? color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`\r\n        : color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent - 0.3})`\r\n    }\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.strokeStyle = color;\r\n    // Offset the rect based on its width but maintain origin\r\n    this.ctx.translate(this.pos.x + Math.sin(this.angle + offset) * widthMod * this.width / 2,\r\n                       this.pos.y - Math.cos(this.angle + offset) * widthMod * this.width / 2);\r\n    this.ctx.rotate(this.angle + offset);\r\n    this.ctx.fillRect(0, 0, this.length * lengthMod, widthMod * this.width);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  update() {\r\n    this.angle += this.rotation;\r\n    // transient effect\r\n    this.width *= 0.85;\r\n    switch(this.combo) {\r\n      case -1:\r\n        this.length *= 1.005;\r\n        break;\r\n      case -2:\r\n        this.length *= 0.95;\r\n        break;\r\n      default:\r\n      // this will alias the edges\r\n        this.length *= 1.001;\r\n        break;\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n\r\n  }\r\n\r\n  draw() {\r\n    let color = [Math.random() * 255, Math.random() * 255, Math.random() * 255];\r\n    if (this.combo === -2) {\r\n      if (this.aliveTime >= this.initialTime - 10) {\r\n        color = [255, 255, 255]\r\n      } else {\r\n        color = [0, 0, 0]\r\n      }\r\n      this.drawRect(0, color, 1    , 1.5);\r\n      this.drawRect(0, color, 3 / 4, 1.55);\r\n      this.drawRect(0, color, 1 / 3, 1.58);\r\n      // this.drawRect(this.offsets[1]);\r\n    } else {\r\n\r\n      this.drawRect(0, color);\r\n      this.drawRect(Math.PI, color);\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (SlashSpark);\n\n//# sourceURL=webpack:///./javascript/SlashSpark.js?");

/***/ }),

/***/ "./javascript/Vector.js":
/*!******************************!*\
  !*** ./javascript/Vector.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\r\nclass Vector {\r\n  constructor(x = 0, y = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(v) {\r\n    if (v instanceof Vector) {\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n    } else {\r\n      this.x += v; \r\n      this.y += v; \r\n    }\r\n    return this;\r\n  }\r\n\r\n  subtract(v) {\r\n    if (v instanceof Vector) {\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n    } else {\r\n      this.x -= v; \r\n      this.y -= v; \r\n    }\r\n    return this;\r\n  }\r\n\r\n  multiply(v) {\r\n    if (v instanceof Vector) {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    } else {\r\n      this.x *= v; \r\n      this.y *= v; \r\n    }\r\n    return this;\r\n  }\r\n  \r\n  divide(v) {\r\n    if (v instanceof Vector) {\r\n      if(v.x !== 0) this.x /= v.x;\r\n      if(v.y !== 0) this.y /= v.y;\r\n    } else {\r\n      if(v !== 0) {\r\n        this.x /= v; \r\n        this.y /= v; \r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  dup() {\r\n    return new Vector(this.x, this.y);\r\n  }\r\n  \r\n  invert() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    return this;\r\n  }\r\n\r\n  static difference(v1, v2) {\r\n    let newV = new Vector(1, 1).multiply(v1);\r\n    return newV.subtract(v2);\r\n  }\r\n\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y;\r\n  }\r\n\r\n  dot(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  }\r\n\r\n  length() {\r\n    return Math.sqrt(this.dot(this));\r\n  }\r\n\r\n  // WARNING - operation calls divide which will modify this vector\r\n  normalize() {\r\n    // let that = new Vector(this.x, this.y);\r\n    // return that.divide(this.length());\r\n    return this.divide(this.length());\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vector);\n\n//# sourceURL=webpack:///./javascript/Vector.js?");

/***/ }),

/***/ "./javascript/enemy_factory.js":
/*!*************************************!*\
  !*** ./javascript/enemy_factory.js ***!
  \*************************************/
/*! exports provided: randomEdgePos, spawnCircleRandom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomEdgePos\", function() { return randomEdgePos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spawnCircleRandom\", function() { return spawnCircleRandom; });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/EnemyCircle.js\");\n\r\n\r\n\r\n\r\nconst MAP = {\r\n  TOP: 0,\r\n  LEFT: 1,\r\n  BOTTOM: 2,\r\n  RIGHT: 3,\r\n}\r\n\r\n// const SPAWN_OFFSET = 20;\r\nconst BASE_TURN_RATE = 0.25;\r\n\r\nconst randomEdgePos = (canvas, radius) => {\r\n  let side = Math.floor(Math.random() * 4);\r\n\r\n  let pos = { x: Math.random() * canvas.width,\r\n              y: Math.random() * canvas.height };\r\n\r\n  switch(side) {\r\n    case MAP.TOP:\r\n      pos.y = -radius;\r\n      break;\r\n    case MAP.LEFT:\r\n      pos.x = -radius;\r\n      break;\r\n    case MAP.BOTTOM:\r\n      pos.y = canvas.height + radius;\r\n      break;\r\n    case MAP.RIGHT:\r\n      pos.x = canvas.width + radius;\r\n      break;\r\n  }\r\n\r\n  return pos;\r\n}\r\n\r\nconst makeBoss = function(enemy) {\r\n  if (Math.floor(Math.random() * 1000) % 50 === 0) {\r\n    enemy.r = Math.floor(50 + Math.random() * 50);\r\n    if (enemy.game.state === \"STATE_OVER\") enemy.r *= 1 + Math.random() * 4;\r\n    if (Math.floor(Math.random() * 5) % 3 === 0) {\r\n      enemy.accel = 0.5 + Math.random() * Math.pow(enemy.game.difficulty, 1 / 2);\r\n      enemy.maxSpeed = 1.5 + Math.random() * Math.pow(enemy.game.difficulty, 1 / 2);\r\n    } else {\r\n      enemy.accel = 0.2;\r\n      enemy.maxSpeed = 0.5;\r\n    }\r\n    enemy.health = 13000;\r\n    enemy.damage = 50;\r\n    enemy.score = enemy.r * 2;\r\n  }\r\n}\r\n\r\nconst spawnCircleRandom = (player) => {\r\n  let enemy = new _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game);  \r\n\r\n  enemy.accel = 0.5 + Math.random() * Math.pow(player.game.difficulty, 1 / 2);\r\n  enemy.maxSpeed = 1.5 + Math.random() * Math.pow(player.game.difficulty, 1 / 2);\r\n\r\n  makeBoss(enemy);\r\n  \r\n  let spawnPos = randomEdgePos(player.cvs, enemy.r);\r\n  enemy.pos.x = spawnPos.x;\r\n  enemy.pos.y = spawnPos.y;\r\n  \r\n  enemy.aiCallback = function() {\r\n    this.aim = _Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(player.pos, this.pos).normalize();\r\n    let turnRate = BASE_TURN_RATE + Math.pow(player.game.difficulty, 1/2);\r\n    this.aim.multiply(turnRate).add(this.vel).normalize();\r\n\r\n    this.vel.add(this.aim.multiply(this.accel));\r\n  };\r\n\r\n  return enemy;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./javascript/enemy_factory.js?");

/***/ }),

/***/ "./javascript/main.js":
/*!****************************!*\
  !*** ./javascript/main.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./javascript/Game.js\");\n\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n  const cvs = document.getElementById('ball-popcalypse');\r\n  const ctx = cvs.getContext('2d');\r\n  const game = new _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](cvs, ctx);\r\n  window.game = game;\r\n  \r\n  game.loop();\r\n});\n\n//# sourceURL=webpack:///./javascript/main.js?");

/***/ }),

/***/ "./javascript/particle_factory.js":
/*!****************************************!*\
  !*** ./javascript/particle_factory.js ***!
  \****************************************/
/*! exports provided: fireBulletAtCursor, fireBulletAtCursorB, fireBeamAtCursor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursor\", function() { return fireBulletAtCursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursorB\", function() { return fireBulletAtCursorB; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBeamAtCursor\", function() { return fireBeamAtCursor; });\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Particle */ \"./javascript/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Beam */ \"./javascript/Beam.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector */ \"./javascript/Vector.js\");\n\r\n\r\n\r\n\r\n\r\nconst BULLET_SPEED = 20;\r\nconst BULLET_SPREAD = 0.12;\r\n\r\nconst fireBulletAtCursor = (player) => {\r\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\r\n  p.pos.x = player.pos.x;\r\n  p.pos.y = player.pos.y;\r\n  p.color = \"#14ffec\";\r\n\r\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  aim.x += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\r\n  aim.y += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\r\n  aim.normalize();\r\n  p.vel = aim.multiply(BULLET_SPEED * (1 - BULLET_SPREAD ) + BULLET_SPREAD / 2 + Math.random() * BULLET_SPREAD);\r\n  player.game.particles.push(p);\r\n}\r\n\r\nconst fireBulletAtCursorB = (player) => {\r\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\r\n  p.pos.x = player.pos.x;\r\n  p.pos.y = player.pos.y;\r\n  p.color = 'orange';\r\n\r\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  aim.x += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\r\n  aim.y += Math.random() * (BULLET_SPREAD + BULLET_SPREAD) - BULLET_SPREAD;\r\n  aim.normalize();\r\n  p.vel = aim.multiply(BULLET_SPEED);\r\n  return p;\r\n}\r\n\r\nconst fireBeamAtCursor = (player) => {\r\n  let p = new _Beam__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game, player.pos.x, player.pos.y);\r\n  p.color = player.color;\r\n\r\n  let aim = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  p.aim = aim;\r\n  \r\n  return p;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./javascript/particle_factory.js?");

/***/ })

/******/ });