/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./javascript/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./javascript/Game.js":
/*!****************************!*\
  !*** ./javascript/Game.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _obj_Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./obj/Player */ \"./javascript/obj/Player.js\");\n/* harmony import */ var _obj_Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./obj/Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _obj_factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./obj/factory/particle_factory */ \"./javascript/obj/factory/particle_factory.js\");\n/* harmony import */ var _obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./obj/factory/enemy_factory */ \"./javascript/obj/factory/enemy_factory.js\");\n/* harmony import */ var _obj_Slam__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./obj/Slam */ \"./javascript/obj/Slam.js\");\n/* harmony import */ var _obj_Beam__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./obj/Beam */ \"./javascript/obj/Beam.js\");\n/* harmony import */ var _obj_Explosion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./obj/Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./obj/GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _obj_SlashSpark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./obj/SlashSpark */ \"./javascript/obj/SlashSpark.js\");\n/* harmony import */ var _lib_BufferLoader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/BufferLoader */ \"./javascript/lib/BufferLoader.js\");\n/* harmony import */ var _obj_DeathExplosion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./obj/DeathExplosion */ \"./javascript/obj/DeathExplosion.js\");\n/* harmony import */ var _obj_Emitter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./obj/Emitter */ \"./javascript/obj/Emitter.js\");\n/* harmony import */ var _obj_Star__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./obj/Star */ \"./javascript/obj/Star.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// My laptop has a performance limit of around 700 particles\r\n// Delta time is implemented by accelerating movement to perceive less\r\n// lag, however the game still runs slower\r\n\r\n/*\r\nAccess this on localhost:8000 by running both:\r\nnpm start\r\npython -m SimpleHTTPServer\r\nOR\r\npy -m http.server\r\n\r\n===\r\n\r\nTo-do:\r\n\r\nUse obj destructuring to clean up obj constructor\r\nUse Web Audio Context to vary pitch/playback speed on sounds like Melee\r\n\r\n*/\r\n\r\nconst PATH = document.URL.substr(0, document.URL.lastIndexOf('/'));\r\nconst STATE_INIT = \"STATE_INIT\";\r\nconst STATE_BEGIN = \"STATE_BEGIN\";\r\nconst STATE_STARTING = \"STATE_STARTING\";\r\nconst STATE_RUNNING = \"STATE_RUNNING\";\r\nconst STATE_OVER = \"STATE_OVER\";\r\n\r\nconst FPS = 60;\r\nconst NORMAL_TIME_DELTA = 1000 / FPS;\r\nconst MIN_FRAME_RATE = 40; // Limits enemy production to save frames\r\n\r\nconst BASE_SPAWN_RATE = 4; // 5\r\nconst SPAWN_LOCKOUT_TIME = 60; // 5\r\nconst DIFFICULTY_START = 1;\r\nconst DIFFICULTY_INTERVAL = 60;\r\nconst DIFFICULTY_MULTIPLIER = 0.020;\r\nconst DIFFICULTY_GROWTH = 0.1;\r\nconst DIFFICULTY_RATE = 1;\r\nconst MAX_DIFFICULTY = 100;\r\n\r\nconst LINKED_IN_ICON = new Image();\r\nLINKED_IN_ICON.src = `${PATH}/assets/iconfinder_square-linkedin_317725.png`;\r\nconst MUTE = new Image(50,50);\r\nMUTE.src = `${PATH}/assets/mute.png`;\r\nconst VOL = new Image(50, 50);\r\nVOL.src = `${PATH}/assets/volume.png`;\r\nconst WASD = new Image();\r\nWASD.src = `${PATH}/assets/WASD.png`;\r\nconst LEFT_MOUSE_ICON = new Image();\r\nLEFT_MOUSE_ICON.src = `${PATH}/assets/left.png`;\r\nconst RIGHT_MOUSE_ICON = new Image();\r\nRIGHT_MOUSE_ICON.src = `${PATH}/assets/right.png`;\r\nconst SPACEBAR_ICON = new Image();\r\nSPACEBAR_ICON.src = `${PATH}/assets/spacebar.png`;\r\n\r\nclass Game {\r\n  constructor(cvs, ctx) {\r\n    this.STATE_INIT = STATE_INIT;\r\n    this.STATE_BEGIN = STATE_BEGIN;\r\n    this.STATE_STARTING = STATE_STARTING;\r\n    this.STATE_RUNNING = STATE_RUNNING;\r\n    this.STATE_OVER = STATE_OVER;\r\n    this.cvs = cvs;\r\n    this.ctx = ctx;\r\n    this.highscore = 0;\r\n    this.score = 0;\r\n    this.pauseTime = 0;\r\n    this.mute = false;\r\n    this.filePath = PATH;\r\n    this.assetsLoaded = false;\r\n    this.cheat = false;\r\n\r\n    this.timeTracker = (new Date).getTime() + NORMAL_TIME_DELTA;\r\n    this.prevTime = (new Date).getTime();\r\n\r\n    this.state = STATE_INIT;\r\n\r\n    // preload audio\r\n    this.defeatSfx = new Audio(`${PATH}/assets/DEFEATED.wav`);\r\n    this.enemyDeathSfx = new Audio(`${PATH}/assets/boom2.wav`);\r\n    this.playerShootSfx = new Audio(`${PATH}/assets/laser7.wav`);\r\n    this.playerSlashSfx = new Audio(`${PATH}/assets/SE_00064.wav`);\r\n    this.playerBeamSfx = new Audio(`${PATH}/assets/SE_00049.wav`);\r\n    this.playerChargeSfx = new Audio(`${PATH}/assets/SE_00016.wav`);\r\n    this.playerChargeFollowSfx = new Audio(`${PATH}/assets/SE_00049.wav`);\r\n    this.enemyResistSlashSfx = new Audio(`${PATH}/assets/SE_00017.wav`);\r\n    this.enemyHitSfx = new Audio(`${PATH}/assets/impact.wav`);\r\n    this.spawnSfx = new Audio(`${PATH}/assets/spawn.mp3`);\r\n\r\n    // this.bgm = new Audio(`${PATH}/assets/305_Battlefield_-_Swords_Bursting.mp3`);\r\n    // this.bgm.loop = true;\r\n\r\n    this.init = this.init.bind(this);\r\n    this.loop = this.loop.bind(this);\r\n  }\r\n\r\n  initAudio() {\r\n    var bufferLoader;\r\n    let game = this;\r\n\r\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    this.audioContext = new AudioContext();\r\n\r\n    bufferLoader = new _lib_BufferLoader__WEBPACK_IMPORTED_MODULE_10__[\"default\"](\r\n      this.audioContext,\r\n      [\r\n        `${PATH}/assets/DEFEATED.wav`,\r\n        `${PATH}/assets/boom2.wav`,\r\n        `${PATH}/assets/laser7.wav`,\r\n        `${PATH}/assets/SE_00064.wav`,\r\n        `${PATH}/assets/SE_00049.wav`,\r\n        `${PATH}/assets/SE_00016.wav`,\r\n        `${PATH}/assets/SE_00049.wav`,\r\n        `${PATH}/assets/SE_00017.wav`,\r\n        `${PATH}/assets/impact.wav`,\r\n        `${PATH}/assets/305_Battlefield_-_Swords_Bursting.mp3`,\r\n        `${PATH}/assets/Retro Vehicle Motor 02.wav`,\r\n        `${PATH}/assets/spawn.mp3`\r\n      ],\r\n      finishedLoading\r\n    );\r\n\r\n    bufferLoader.load();\r\n    this.audioBuffer = bufferLoader;\r\n\r\n    function finishedLoading(bufferList) {\r\n\r\n      game.AUDIO_BUFFERS = {\r\n        defeatSfx: bufferList[0],\r\n        enemyDeathSfx: bufferList[1],\r\n        playerShootSfx: bufferList[2],\r\n        playerSlashSfx: bufferList[3],\r\n        playerBeamSfx: bufferList[4],\r\n        playerChargeSfx: bufferList[5],\r\n        playerChargeFollowSfx: bufferList[6],\r\n        enemyResistSlashSfx: bufferList[7],\r\n        enemyHitSfx: bufferList[8],\r\n        bgm: bufferList[9],\r\n        preDefeatSfx: bufferList[10],\r\n        spawnSfx: bufferList[11],\r\n      }\r\n      game.bgm = createAudio(game, game.AUDIO_BUFFERS.bgm, 0.7);\r\n      game.bgm.loop = true;\r\n      game.preDefeatSfx = createAudio(game, game.AUDIO_BUFFERS.preDefeatSfx, 1.5);\r\n      // game.bgm.sourceNode.loop = true;\r\n      // game.bgm.gainNode.gain.value = 0.4;\r\n      // let source0 = context.createBufferSource();\r\n      // let source1 = context.createBufferSource();\r\n      // let source2 = context.createBufferSource();\r\n      // let source3 = context.createBufferSource();\r\n      // let source4 = context.createBufferSource();\r\n      // let source5 = context.createBufferSource();\r\n      // let source6 = context.createBufferSource();\r\n      // let source7 = context.createBufferSource();\r\n      // let source8 = context.createBufferSource();\r\n      // let source9 = context.createBufferSource();\r\n      // source0.buffer = bufferList[0];\r\n      // source1.buffer = bufferList[1];\r\n      // source2.buffer = bufferList[2];\r\n      // source3.buffer = bufferList[3];\r\n      // source4.buffer = bufferList[4];\r\n      // source5.buffer = bufferList[5];\r\n      // source6.buffer = bufferList[6];\r\n      // source7.buffer = bufferList[7];\r\n      // source8.buffer = bufferList[8];\r\n      // source9.buffer = bufferList[9];\r\n\r\n      // source0.connect(context.destination);\r\n      // source1.connect(context.destination);\r\n      // source2.connect(context.destination);\r\n      // source3.connect(context.destination);\r\n      // source4.connect(context.destination);\r\n      // source5.connect(context.destination);\r\n      // source6.connect(context.destination);\r\n      // source7.connect(context.destination);\r\n      // source8.connect(context.destination);\r\n      // source9.connect(context.destination);\r\n      // source0.start(0);\r\n\r\n      // let source0 = context.createBufferSource();\r\n      // source0.buffer = bufferList[0];\r\n      // source0.connect(context.destination);\r\n      // source0.start(0);\r\n      game.assetsLoaded = true;\r\n    }\r\n\r\n    function createAudio(game, buffer, vol = 1.0) {\r\n      let context = game.audioContext;\r\n      let obj = {};\r\n      var sourceNode = null,\r\n          gainNode = null,\r\n          startedAt = 0,\r\n          pausedAt = 0,\r\n          playing = false,\r\n          volume = vol,\r\n          loop = false;\r\n\r\n      let play = function() {\r\n        if(game.mute) return;\r\n        \r\n        var offset = pausedAt;\r\n\r\n        sourceNode = context.createBufferSource();\r\n        if (!context.createGain)\r\n        context.createGain = context.createGainNode;\r\n        gainNode = context.createGain();\r\n        sourceNode.connect(gainNode);\r\n        gainNode.connect(context.destination);\r\n        gainNode.gain.value = volume;\r\n        sourceNode.buffer = buffer;\r\n        sourceNode.start(0, offset);\r\n        sourceNode.loop = loop;\r\n\r\n        startedAt = context.currentTime - offset;\r\n        pausedAt = 0;\r\n        playing = true;\r\n      }\r\n\r\n      let stop = function() {\r\n        if (sourceNode) {\r\n          sourceNode.disconnect();\r\n          sourceNode.stop(0);\r\n          sourceNode = null;\r\n        }\r\n        pausedAt = 0;\r\n        startedAt = 0;\r\n        playing = false;\r\n      }\r\n\r\n      let pause = function () {\r\n        let elapsed = context.currentTime - startedAt;\r\n        stop();\r\n        pausedAt = elapsed;\r\n      };\r\n\r\n      return {\r\n        sourceNode: sourceNode,\r\n        gainNode: gainNode,\r\n        play: play,\r\n        pause: pause,\r\n        stop: stop,\r\n        loop: loop,\r\n        playing: playing,\r\n      };\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.ctx.canvas.width = window.innerWidth;\r\n    this.ctx.canvas.height = window.innerHeight;\r\n\r\n    this.score = 0;\r\n    this.loops = 0;\r\n    this.loopCount = 0;\r\n    this.timeSeconds = 0;\r\n    this.difficulty = DIFFICULTY_START;\r\n    this.difficultyRate = DIFFICULTY_RATE;\r\n    // this.spawnRate = SPAWN_RATE;\r\n    this.fpsCount = 0;\r\n    this.fps = 0;\r\n    this.timeDelta = NORMAL_TIME_DELTA;\r\n    this.normalTimeDelta = NORMAL_TIME_DELTA;\r\n    \r\n    this.players = [];\r\n    this.player = new _obj_Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\r\n    this.player.alive = false;\r\n    this.players.push(this.player);\r\n    this.cameraPos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.player.pos.x, this.player.pos.y);\r\n    \r\n    this.entities = [];\r\n    this.particles = [];\r\n    this.enemyParticles = [];\r\n    this.delayedParticles = [];\r\n    this.vanity = [];\r\n    this.menus = [];\r\n\r\n    this.player.mountController();\r\n    this.state = STATE_BEGIN;\r\n\r\n    let startGameMenu = new _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n    startGameMenu.pos.x = 0,\r\n    startGameMenu.pos.y = this.cvs.height / 2;\r\n    startGameMenu.height = 0;\r\n    startGameMenu.width = this.cvs.width;\r\n    startGameMenu.color = \"rgba(0,0,0,0.4)\";\r\n    startGameMenu.aliveTime = 40;\r\n    startGameMenu.intialTime = startGameMenu.aliveTime;\r\n    startGameMenu.time = this.timeSeconds;\r\n    startGameMenu.difficulty = this.difficulty;\r\n    startGameMenu.alpha = 0.01;\r\n    startGameMenu.draw = function () {\r\n      this.aliveTime--;\r\n      this.ctx.save();\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (startGameMenu.intialTime - this.aliveTime) / startGameMenu.intialTime, this.cvs.width, this.cvs.height / 4 * (startGameMenu.intialTime - this.aliveTime) / startGameMenu.intialTime);\r\n      if (this.aliveTime <= 0) {\r\n        if (this.alpha < 1) this.alpha *= 1.10;\r\n        this.aliveTime = 0;\r\n        let xOffset = this.cvs.width / 2;\r\n        let yOffset = this.cvs.height - 250;\r\n        this.ctx.textAlign = 'center';\r\n\r\n        this.ctx.fillStyle = `rgba(0,128,128,${this.alpha})`;\r\n        this.ctx.font = `${this.cvs.height / 8}px sans-serif`;\r\n        this.ctx.fillText(`Ball-popcalypse`, this.cvs.width / 2, this.cvs.height * 17/32 );\r\n        this.ctx.fillStyle = `rgba(128,128,128,${this.alpha})`;\r\n        this.ctx.font = `${this.cvs.height / 32}px sans-serif`;\r\n        this.ctx.fillText(`How long can you survive the ball menace?`, this.cvs.width / 2, this.cvs.height * 19/32 );\r\n\r\n        this.ctx.fillStyle = `rgba(255,255,255,${this.alpha})`;;\r\n        this.ctx.font = '20px sans-serif';\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.shadowColor = 'black';\r\n        \r\n        this.ctx.fillText(`Press a key or mousebutton to start`, xOffset , yOffset);\r\n        this.ctx.drawImage(SPACEBAR_ICON, xOffset -= 465  , yOffset + 145, 90, 60);\r\n        this.ctx.fillText(`Shift`, xOffset + 30, yOffset + 175);\r\n        this.ctx.drawImage(WASD, xOffset += 90, yOffset + 60, 180, 130);\r\n        this.ctx.fillText(`Movement`, xOffset + 85, yOffset + 210);\r\n        this.ctx.drawImage(LEFT_MOUSE_ICON, xOffset += 190, yOffset + 13, 200, 180);\r\n        this.ctx.fillText(`Slash`, xOffset + 100, yOffset + 210);\r\n        this.ctx.drawImage(RIGHT_MOUSE_ICON, xOffset += 190, yOffset + 43, 120, 150);\r\n        this.ctx.fillText(`Burst / [Gatling]`, xOffset + 55, yOffset + 210);\r\n        this.ctx.drawImage(SPACEBAR_ICON, xOffset += 170, yOffset + 113, 200, 75);\r\n        this.ctx.fillText(`Cannon`, xOffset + 90, yOffset + 210);\r\n        this.ctx.fillText(`Spacebar`, xOffset + 65, yOffset + 150);\r\n\r\n        this.ctx.drawImage(LINKED_IN_ICON, 10, 10, 80, 80);\r\n      }\r\n      this.ctx.restore();\r\n    }\r\n    \r\n    this.menus.push(startGameMenu);\r\n    this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n    this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n\r\n    if (this.bgm) {\r\n      this.bgm.stop();\r\n    }\r\n  }\r\n\r\n  transitionToStartGame() {\r\n    this.state = STATE_STARTING;\r\n    let overlay = new _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n\r\n    overlay.pos.x = 0,\r\n    overlay.pos.y = 0;\r\n    overlay.height = this.cvs.height;\r\n    overlay.width = this.cvs.width;\r\n    overlay.alpha = 1;\r\n    overlay.aliveTime = 12;\r\n    overlay.intialTime = overlay.aliveTime;\r\n\r\n    overlay.draw = function () {\r\n      this.aliveTime--;\r\n      this.pos.x = -this.width * 2 + this.width * 2 * Math.pow((this.intialTime - this.aliveTime) / this.intialTime, 2);\r\n      this.ctx.save();\r\n      this.ctx.fillStyle = `rgba(188,188,188,${this.alpha})`;\r\n      this.ctx.rotate(Math.PI / 12);\r\n      this.ctx.fillRect(this.pos.x, this.pos.y - this.height * 0.5, this.width * 2, this.height * 2);\r\n      this.ctx.restore();\r\n\r\n      // if(this.aliveTime <= 1) this.aliveTime = 1;\r\n      if(this.aliveTime === this.intialTime - 10) {\r\n        let overlay2 = new _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n        overlay2.pos.x = 0,\r\n        overlay2.pos.y = 0;\r\n        overlay2.height = this.cvs.height;\r\n        overlay2.width = this.cvs.width;\r\n        overlay2.alpha = 1;\r\n        overlay2.aliveTime = 5;\r\n        overlay2.intialTime = overlay2.aliveTime;\r\n        overlay2.draw = function () {\r\n          this.aliveTime--;\r\n          this.pos.x = -this.width * 2 + this.width * 2 * Math.pow((this.intialTime - this.aliveTime) / this.intialTime, 2);\r\n          this.ctx.save();\r\n          this.ctx.fillStyle = `rgba(88,88,88,${this.alpha})`;\r\n          this.ctx.rotate(Math.PI / 12);\r\n          this.ctx.fillRect(this.pos.x, this.pos.y - this.height * 0.5, this.width * 2, this.height * 2);\r\n          this.ctx.restore();\r\n\r\n          if (this.aliveTime <= 0) this.game.startGame();\r\n        }\r\n        this.game.menus.push(overlay2);\r\n        this.game.playSound(this.game.spawnSfx, 0.6);\r\n      }\r\n    }\r\n    this.menus.push(overlay);\r\n  }\r\n\r\n  startGame() {\r\n    if (!this.assetsLoaded) return;\r\n    this.loopCount = 0;\r\n    this.state = STATE_RUNNING;\r\n    this.menus = [];\r\n    this.entities = [];\r\n    this.enemyParticles = [];\r\n    this.vanity = [];\r\n    this.player.alive = true;\r\n    this.player.heal();\r\n    // this.playSound(this.bgm, 0.4);\r\n    this.cheat = false;\r\n    this.bgm.play();\r\n\r\n    let overlay = new _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n    overlay.pos.x = 0,\r\n    overlay.pos.y = 0;\r\n    overlay.height = this.cvs.height;\r\n    overlay.width = this.cvs.width;\r\n    overlay.alpha = 1;\r\n    overlay.aliveTime = 8;\r\n    overlay.intialTime = overlay.aliveTime;\r\n    overlay.draw = function () {\r\n      this.aliveTime--;\r\n      this.pos.x = this.width * 2 * Math.pow((this.intialTime - this.aliveTime) / this.intialTime, 2);\r\n      this.ctx.save();\r\n      this.ctx.fillStyle = `rgba(88,88,88,${this.alpha})`;\r\n      this.ctx.rotate(Math.PI / 12);\r\n      this.ctx.fillRect(this.pos.x, this.pos.y - this.height * 0.5, this.width * 2, this.height * 2);\r\n      this.ctx.restore();\r\n\r\n      if (this.aliveTime <= 0) this.alive = false;\r\n    }\r\n\r\n    this.menus.push(overlay);\r\n\r\n    let startEmit = new _obj_Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this, {\r\n      pos: { x: this.player.pos.x, y: this.player.pos.y },\r\n      r: 6,\r\n      aliveTime: 120,\r\n      emitCount: 96,\r\n      emitSpeed: 16,\r\n      ejectSpeed: 8,\r\n      decayRate: 0.94,\r\n      impulseVariance: 0.9,\r\n      color: \"rgba(0, 205, 205,1)\",\r\n      cb: function() { this.vel.y -= 0.15; this.vel.x += 0.05 },\r\n    });\r\n\r\n    this.vanity.push(startEmit);\r\n    this.particles.push(new _obj_Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y));\r\n  }\r\n\r\n  endGame() {\r\n    this.state = STATE_OVER;\r\n    this.freeze(90);\r\n    this.player.alive = false;\r\n    this.player.dashCooldown = 0;\r\n\r\n    let deathExplosion = new _obj_DeathExplosion__WEBPACK_IMPORTED_MODULE_11__[\"default\"](game);\r\n    deathExplosion.unpausable = true;\r\n    deathExplosion.paused = false;\r\n    this.vanity.push(deathExplosion);\r\n    this.preDefeatSfx.play();\r\n    let slam = new _obj_Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n    slam.aliveTime -= 11;\r\n    this.particles.push(slam);\r\n\r\n    this.entities.forEach(entity => {\r\n      let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.player.pos, entity.pos).normalize();\r\n\r\n      entity.vel.add(diff.multiply(4));\r\n      let hitEmit = new _obj_Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this, {\r\n        pos: { x: entity.pos.x, y: entity.pos.y },\r\n        r: entity.r + 1,\r\n        aim: diff.normalize().multiply(-1),\r\n        emitCount: 4,\r\n        emitSpeed: 4,\r\n        ejectSpeed: 10,\r\n        impulseVariance: 0.5,\r\n        fanDegree: 15,\r\n        aliveTime: 20,\r\n        decayRate: 0.8,\r\n        lengthForward: 20,\r\n      });\r\n      this.vanity.push(hitEmit);\r\n    });\r\n\r\n    let postDeath = function() {\r\n      let explode1 = new _obj_Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n      explode1.color = 'white';\r\n      explode1.knockback = 100;\r\n      explode1.damage = 10;\r\n      explode1.r = 310;\r\n      this.particles.push(explode1);\r\n      let explode2 = new _obj_Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n      explode2.color = 'gray';\r\n      explode2.knockback = 0;\r\n      explode2.damage = 40;\r\n      explode2.r = 300;\r\n      this.particles.push(explode2);\r\n      let explode3 = new _obj_Slam__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.player.pos.x, this.player.pos.y);\r\n      explode3.color = 'black';\r\n      explode3.knockback = 0; \r\n      explode3.damage = 999999;\r\n      explode3.r = 100;\r\n      this.particles.push(explode3);\r\n      this.preDefeatSfx.stop();\r\n      this.player.color = 'black'; \r\n\r\n      let endEmit = new _obj_Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this, {\r\n        pos: { x: this.player.pos.x, y: this.player.pos.y },\r\n        r: 5,\r\n        aim: new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1,0),\r\n        aliveTime: 90,\r\n        emitCount: 150,\r\n        emitSpeed: 15,\r\n        ejectSpeed: 20,\r\n        impulseVariance: 0.95,\r\n        fanDegree: 180,\r\n        decayRate: 0.9,\r\n        color: \"rgba(0, 205, 205,1)\",\r\n      });\r\n\r\n      this.vanity.push(endEmit);\r\n\r\n      this.playSound(this.defeatSfx, 0.2);\r\n    }\r\n\r\n    postDeath = postDeath.bind(this);\r\n    setTimeout(postDeath, 1500);\r\n\r\n    let drawEnd = function() {\r\n      let endGameMenu = new _obj_GameObject__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game);\r\n      endGameMenu.pos.x = 0,\r\n      endGameMenu.pos.y = this.cvs.height / 2;\r\n      endGameMenu.height = 0;\r\n      endGameMenu.width = this.cvs.width;\r\n      endGameMenu.color = \"rgba(0,0,0,0.5)\";\r\n      endGameMenu.aliveTime = 60;\r\n      endGameMenu.time = this.timeSeconds;\r\n      endGameMenu.difficulty = this.difficulty;\r\n      endGameMenu.draw = function() {\r\n        this.aliveTime--;\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = this.color;\r\n        this.ctx.fillRect(0, this.cvs.height / 2 - this.cvs.height / 8 * (60 - this.aliveTime) / 60, this.cvs.width, this.cvs.height / 4 * (60 - this.aliveTime) / 60);\r\n        if (this.aliveTime <=0) {\r\n          this.aliveTime = 0;\r\n          this.ctx.fillStyle = 'white';\r\n          this.ctx.font = '20px sans-serif';\r\n          \r\n          this.ctx.fillText(`Score: ${this.game.score}`, this.cvs.width / 2 - 70, this.cvs.height / 2 - 40);\r\n          this.ctx.fillText(`Highscore: ${this.game.highscore}`, this.cvs.width / 2 - 70, this.cvs.height / 2 - 20 );\r\n          this.ctx.fillText(`Time: ${this.time}`, this.cvs.width / 2 - 70, this.cvs.height / 2 );\r\n          this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, this.cvs.width / 2 - 70, this.cvs.height / 2 + 20);\r\n          this.ctx.textAlign = 'center';\r\n\r\n          this.ctx.fillText(`Press [Enter] to restart`, this.cvs.width / 2,  this.cvs.height / 2 + 80);\r\n\r\n          this.ctx.textAlign = 'right';\r\n\r\n          this.ctx.fillText(\"♪♪  Yuzo Koshiro - 7th Dragon OST || Battlefield - Swords Bursting (Retro Ver.)\", this.cvs.width - 20, this.cvs.height - 20);\r\n        }\r\n        this.ctx.restore();\r\n      }\r\n      if (this.state === STATE_OVER) this.menus.push(endGameMenu);\r\n    }\r\n    drawEnd = drawEnd.bind(this);\r\n    setTimeout(drawEnd, 3500);\r\n  }\r\n\r\n  restartGame() {\r\n    this.init();\r\n  }\r\n\r\n  playSound(sound, vol = 1) {\r\n    if (this.mute) return;\r\n\r\n    sound.volume = vol;\r\n    sound.play();\r\n  }\r\n\r\n  playAudio(audio, vol = 1.0, loop = false) {\r\n    if (this.mute) return;\r\n\r\n    let source = this.audioContext.createBufferSource();\r\n    source.buffer = this.audioBuffer.bufferList[audio];\r\n    let gainNode = this.audioContext.createGain();\r\n    source.connect(gainNode);\r\n    \r\n    gainNode.connect(this.audioContext.destination);\r\n    gainNode.gain.value = vol;\r\n    source.loop = loop;\r\n    source.start(0);\r\n  }\r\n\r\n  playSoundMany(path, vol = 1) {\r\n    if (this.mute) return;\r\n    let sound = new Audio(path);\r\n    sound.volume = vol;\r\n    sound.play();\r\n  }\r\n\r\n  // Freezes the entire game state for n frames\r\n  // Typically use this for hitstop\r\n  freeze(n) {\r\n    this.pauseTime = n;\r\n    this.vanity.forEach(entity => {\r\n      if (entity.unpausable) {\r\n        entity.paused = false;\r\n      } else {\r\n        entity.paused = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.loopCount++;\r\n    if (this.highscore < this.score) this.highscore = this.score;\r\n\r\n    switch(this.state) {\r\n      case STATE_INIT: \r\n        this.init();\r\n        break;\r\n\r\n      case STATE_BEGIN:\r\n        if (this.loopCount % 120 === 0 && this.fps >= MIN_FRAME_RATE && this.loopCount > 60) {\r\n          this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n          if (this.loopCount % 240 === 0) {\r\n            this.player.pos.x = 200 + Math.random() * (this.cvs.width - 200 * 2);\r\n            this.player.pos.y = 200 + Math.random() * (this.cvs.height - 200 * 2);\r\n          }\r\n        }\r\n        this.players.forEach(entity => entity.update());\r\n        this.entities.forEach(entity => entity.update());\r\n        this.particles.forEach(entity => entity.update());\r\n        break;\r\n\r\n      case STATE_STARTING:\r\n        this.players.forEach(entity => entity.update());\r\n        this.entities.forEach(entity => entity.update());\r\n        this.particles.forEach(entity => entity.update());\r\n        break;\r\n\r\n      case STATE_RUNNING:\r\n\r\n        if (this.pauseTime === 0) {\r\n          this.vanity.forEach(entity => entity.paused = false);\r\n          this.particles = this.particles.concat(this.delayedParticles);\r\n          this.delayedParticles = [];\r\n        }\r\n\r\n        if (this.pauseTime > 0) {\r\n          // charging effects before firing a beam\r\n          \r\n          for (let i = 0; i < 1; i++) {\r\n            let length = 400;\r\n            let thickness = 40;\r\n            let spread = 100;\r\n            let aliveTime = 60;\r\n            let expandRate = 1.3;\r\n            let thinningRate = 0.5;\r\n            if (this.player.charging && this.loopCount % 10 === 0) {\r\n              let star1 = new _obj_Star__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this, {\r\n                pos: { x: this.player.pos.x, y: this.player.pos.y},\r\n                length: length,\r\n                width: thickness,\r\n                spread: spread,\r\n                aliveTime: aliveTime,\r\n                expandRate: expandRate,\r\n                thinningRate: thinningRate,\r\n                color: _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().CANNON,\r\n              });\r\n              this.vanity.push(star1);\r\n              this.playSoundMany(`${this.filePath}/assets/SE_00016.wav`, 0.2);\r\n            }\r\n\r\n            if (this.player.charging && (this.loopCount + 5) % 10 === 0) {\r\n              let star2 = new _obj_Star__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this, {\r\n                pos: { x: this.player.pos.x, y: this.player.pos.y},\r\n                length: length,\r\n                width: thickness,\r\n                spread: spread,\r\n                aliveTime: aliveTime,\r\n                expandRate: expandRate,\r\n                thinningRate: thinningRate,\r\n                color: _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().TEAL,\r\n              });\r\n              this.vanity.push(star2);\r\n              this.playSoundMany(`${this.filePath}/assets/SE_00016.wav`, 0.2);\r\n            }\r\n\r\n            for (let i = 0; i < 1; i++) {\r\n              let aim = this.player.aim.dup().normalize().multiply((20 - this.pauseTime) * 120 + 200 * Math.random());\r\n              let length = 70;\r\n              let thickness = 25;\r\n              let spread = 300;\r\n              let aliveTime = 35;\r\n              let expandRate = 1.05;\r\n              let thinningRate = 0.65;\r\n              if (this.player.charging) {\r\n                let star3 = new _obj_Star__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this, {\r\n                  pos: { x: this.player.pos.x + aim.x, y: this.player.pos.y + aim.y },\r\n                  length: length,\r\n                  width: thickness,\r\n                  spread: spread,\r\n                  aliveTime: aliveTime,\r\n                  expandRate: expandRate,\r\n                  thinningRate: thinningRate,\r\n                  color: _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().CANNON,\r\n                });\r\n                this.vanity.push(star3);\r\n\r\n                let star4 = new _obj_Star__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this, {\r\n                  pos: { x: this.player.pos.x + aim.x, y: this.player.pos.y + aim.y },\r\n                  length: length,\r\n                  width: thickness,\r\n                  spread: spread,\r\n                  aliveTime: aliveTime,\r\n                  expandRate: expandRate,\r\n                  thinningRate: thinningRate,\r\n                  color: _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().TEAL,\r\n                });\r\n                this.vanity.push(star4);\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n          this.vanity = this.vanity.filter(entity => entity.alive);\r\n          this.vanity.filter(entity => !entity.paused).forEach(entity => entity.update());\r\n        } else {\r\n          if (this.loopCount % DIFFICULTY_INTERVAL === 0) {\r\n            this.difficulty += DIFFICULTY_GROWTH;\r\n            this.difficulty *= 1 + DIFFICULTY_MULTIPLIER * this.difficultyRate;\r\n          }\r\n          if (this.difficulty > MAX_DIFFICULTY) this.difficulty = MAX_DIFFICULTY;\r\n\r\n          // Generate enemies -\r\n          // Throttle making enemies if you miss too many frame deadlines, also keep generating enemies if the FPS drop was to player using beam\r\n          let spawnRate = 20 - Math.floor(this.difficulty);\r\n          spawnRate = spawnRate <= 1 ? 1 : spawnRate;\r\n          if (this.loopCount % Math.floor((BASE_SPAWN_RATE + spawnRate) * (this.fps >= MIN_FRAME_RATE ? 1 : 2) || this.loopCount % 30 === 0) === 0 && this.pauseTime === 0 && this.loopCount > SPAWN_LOCKOUT_TIME) {\r\n            this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n          }\r\n\r\n          // Handle enemy death\r\n          let soundLimit = 3;\r\n          let soundCount = 0;\r\n          this.entities.filter(entity => !entity.alive).forEach(entity => {\r\n            if (soundCount <= soundLimit) {\r\n              this.playSoundMany(`${PATH}/assets/boom2.wav`, 0.3);\r\n              soundCount++;\r\n            }\r\n            this.vanity.push(new _obj_Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r * 1.5, entity.vel))\r\n\r\n            this.difficulty += 0.002 * this.difficultyRate;\r\n            this.score += entity.score;\r\n            this.player.charge++;\r\n          });\r\n\r\n          // Handle updates\r\n          this.player.update();\r\n          this.vanity = this.vanity.filter(entity => entity.alive);\r\n          this.vanity.forEach(entity => entity.update());\r\n          this.entities = this.entities.filter(entity => entity.alive);\r\n          this.entities.forEach(entity => entity.update());\r\n          this.particles = this.particles.filter(entity => entity.alive);\r\n          this.particles.forEach(entity => entity.update());\r\n          this.enemyParticles = this.enemyParticles.filter(entity => entity.alive);\r\n          this.enemyParticles.forEach(entity => entity.update());\r\n          this.menus = this.menus.filter(entity => entity.alive);\r\n          this.menus.forEach(entity => entity.update());\r\n\r\n          if (this.player.health <= 0) this.endGame();\r\n        }\r\n        break;\r\n\r\n      case STATE_OVER:\r\n        if (this.pauseTime > 0) {\r\n          this.vanity = this.vanity.filter(entity => entity.alive);\r\n          this.vanity.filter(entity => !entity.paused).forEach(entity => entity.update());\r\n          return;\r\n        }\r\n\r\n        // Add cosmetic \"suction effect\"        \r\n        let randDir = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\r\n        let randPos = randDir.dup().multiply(400);\r\n        let line = new _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, {\r\n          pos: { x: this.player.pos.x + randPos.x, y: this.player.pos.y + randPos.y }, \r\n          aim: randDir,\r\n          active: false,\r\n        });\r\n        line.width = 20;\r\n        line.length = 4000;\r\n        line.knockback = 0;\r\n        line.silenced = true;\r\n        line.unpausable = true;\r\n        line.aliveTime = 60;\r\n        line.color = _obj_Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().TEAL;\r\n        line.cb = function () {\r\n          this.length *= 0.85;\r\n          this.width *= 0.7;\r\n          this.pos.subtract(randDir.multiply(1.5));\r\n        }\r\n        this.vanity.push(line);\r\n        \r\n        // if (this.loopCount % (Math.floor(SPAWN_RATE * 1.5)) === 0) {\r\n        if (this.loopCount % (2) === 0 && (this.fps >= MIN_FRAME_RATE - 10)) {\r\n          this.entities.push(_obj_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_4__[\"spawnCircleRandom\"](this.player));\r\n        }\r\n        if (this.loopCount % 2 === 0) {\r\n          this.particles.push(new _obj_DeathExplosion__WEBPACK_IMPORTED_MODULE_11__[\"default\"](game, 40, 50, 0, \"BLACKHOLE\"));\r\n          // if (this.fps <= MIN_FRAME_RATE - 5) this.entities[0].alive = false;\r\n        }\r\n        this.entities.forEach(entity => {\r\n          let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(entity.pos, this.player.pos);\r\n          let distSqr = diff.dot(diff);\r\n\r\n          if (entity.r * entity.r + this.player.r * this.player.r  + 100 > distSqr) {\r\n            entity.alive = false;\r\n          } else {\r\n            entity.r *= 0.996;\r\n            // let dist = Vector.difference(this.player.pos, entity.pos);\r\n            // let length = Math.pow(dist.length, 2);\r\n            // dist = dist.normalize().multiply(length);\r\n            // // entity.vel.x += 1 / dist.x;\r\n            // // entity.vel.y += 1 / dist.y;\r\n          }\r\n        })\r\n        this.entities.filter(entity => !entity.alive).forEach(entity => {\r\n          this.vanity.push(new _obj_Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, entity.pos.x, entity.pos.y, entity.r));\r\n        });\r\n        this.entities = this.entities.filter(entity => entity.alive);\r\n        this.entities.forEach(entity => entity.update());\r\n\r\n        this.particles = this.particles.filter(entity => entity.alive);\r\n        this.particles.forEach(entity => entity.update());\r\n\r\n        this.enemyParticles = this.enemyParticles.filter(entity => entity.alive);\r\n        this.enemyParticles.forEach(entity => entity.update());\r\n\r\n        this.vanity = this.vanity.filter(entity => entity.alive);\r\n        this.vanity.forEach(entity => entity.update());\r\n\r\n        this.menus = this.menus.filter(entity => entity.alive);\r\n        this.menus.forEach(entity => entity.update());\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Draw player reticle at mouse position\r\n  drawCursor() {\r\n    let cursorSize = 15;\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = \"black\";\r\n    this.ctx.lineWidth = 4;\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'white';\r\n    this.ctx.moveTo(this.player.mousePos.x - cursorSize - this.player.slashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.lineTo(this.player.mousePos.x + cursorSize + this.player.slashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.moveTo(this.player.mousePos.x, this.player.mousePos.y - cursorSize - this.player.slashCooldown / 2);\r\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y + cursorSize + this.player.slashCooldown / 2);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.beginPath();\r\n    cursorSize = 14;\r\n    this.ctx.shadowBlur = 0;\r\n    this.ctx.lineWidth = 2;\r\n    if (this.player.charge >= this.player.chargeCost * 2) {\r\n      this.ctx.strokeStyle = \"lightblue\";\r\n    } else if (this.player.charge >= this.player.chargeCost) {\r\n      this.ctx.strokeStyle = \"red\";\r\n    } else {\r\n      this.ctx.strokeStyle = \"yellow\";\r\n    }\r\n    this.ctx.moveTo(this.player.mousePos.x - cursorSize - this.player.slashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.lineTo(this.player.mousePos.x + cursorSize + this.player.slashCooldown / 2, this.player.mousePos.y);\r\n    this.ctx.moveTo(this.player.mousePos.x, this.player.mousePos.y - cursorSize - this.player.slashCooldown / 2);\r\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y + cursorSize + this.player.slashCooldown / 2);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    \r\n    this.ctx.font = '20px sans-serif';\r\n    this.ctx.fillStyle = 'white';\r\n    \r\n    // === DEBUG SHOW ANGLE\r\n    // let angle = Math.atan2(this.player.aim.y, this.player.aim.x);\r\n    // this.ctx.fillText(`Angle: ${angle / Math.PI * 180}`, this.player.mousePos.x, this.player.mousePos.y);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawUI() {\r\n    this.ctx.save();\r\n    this.ctx.font = '20px sans-serif';\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'black';\r\n    let xOffset = 10;\r\n    let yOffset = 2;\r\n\r\n    this.ctx.fillText(`Score: ${this.score}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Highscore: ${this.highscore}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Time: ${this.timeSeconds}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`Difficulty: ${this.difficulty.toFixed(2)}`, xOffset, yOffset += 20);\r\n    this.ctx.restore();\r\n    this.drawHealth();\r\n    this.drawChargeBar();\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = \"white\";\r\n    this.ctx.lineWidth = 0.5;\r\n    this.ctx.moveTo(this.player.pos.x, this.player.pos.y);\r\n    this.ctx.lineTo(this.player.mousePos.x, this.player.mousePos.y);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawStats() {\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.font = '12px sans-serif';\r\n    this.ctx.shadowBlur = 2;\r\n    this.ctx.shadowColor = 'black';\r\n    let xOffset = this.cvs.width - 55;\r\n    let yOffset = 70;\r\n    this.ctx.fillText(`FPS: ${this.fps}`, xOffset, yOffset += 20);\r\n    this.ctx.fillText(`obj: ${this.particles.length + this.entities.length + this.vanity.length}`, xOffset, yOffset += 20);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawVolControls() {\r\n    this.ctx.save();\r\n    if (this.mute) {\r\n      this.ctx.drawImage(MUTE, this.cvs.width - 83, 15, 54, 54);\r\n    } else {\r\n      this.ctx.drawImage(VOL, this.cvs.width - 80, 10);\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawHealth() {\r\n    this.ctx.save();\r\n    this.ctx.font = '20px sans-serif';\r\n    let xOffset = this.cvs.width / 2\r\n    let yOffset = this.cvs.height - 86;\r\n    // this.ctx.fillStyle = `rgba(${21 + ((this.player.maxHealth - this.player.health) / this.player.maxHealth) * 70},21,21)`;\r\n    // this.ctx.fillRect(0, 0, this.cvs.width, this.cvs.height);\r\n    this.ctx.fillStyle = `rgba(${50 - (this.player.health / this.player.maxHealth * 200)},${100 + this.player.health / this.player.maxHealth * 100},0)`;\r\n    this.ctx.fillRect(xOffset - this.player.health, yOffset, this.player.health * 2, 24);\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.shadowBlur = 3;\r\n    this.ctx.shadowColor = 'black';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillText(`${this.player.health}`, xOffset, yOffset + 20);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawChargeBar() {\r\n    let xOffset = this.cvs.width / 2;\r\n\r\n    this.ctx.save();\r\n    this.ctx.textAlign = 'center';\r\n    if (this.player.charge >= this.player.chargeCost) {\r\n\r\n      this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"red\";\r\n      this.ctx.fillRect(xOffset - this.player.chargeCost * 2, this.cvs.height - 57, this.player.chargeCost * 4, 4);\r\n      if (this.player.beamCooldown === 0) {\r\n        this.ctx.font = '12px sans-serif';\r\n        if (this.player.chargeCost * 2 <= this.player.charge) {\r\n          this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"darkblue\";\r\n          this.ctx.font = '14px sans-serif';\r\n          // this.vanity.push(new SlashSpark(this, xOffset - this.player.chargeCost * 2 + (Math.random() * 2 * this.player.chargeCost) * 2, this.cvs.height - 57, -3, 1, 10));\r\n          this.ctx.shadowBlur = 2;\r\n          this.ctx.shadowColor = 'black';\r\n          this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'darkblue' : 'yellow';\r\n          this.ctx.fillText(`OVERCHARGE!!`, xOffset, this.cvs.height - 40);\r\n        } else {\r\n          this.ctx.shadowBlur = 2;\r\n          this.ctx.shadowColor = 'black';\r\n          this.ctx.fillText(`READY!!`, xOffset, this.cvs.height - 40);\r\n        }\r\n      }\r\n      this.ctx.fillStyle = this.loopCount % 7 === 0 ? 'white' : \"darkblue\";\r\n      let charge = this.player.charge < this.player.chargeCost * 2 ? this.player.charge % this.player.chargeCost : this.player.chargeCost;\r\n      this.ctx.fillRect(xOffset - charge * 2, this.cvs.height - 59, charge * 4, 6);\r\n    } else {\r\n      this.ctx.fillStyle = \"olive\";\r\n      this.ctx.fillRect(xOffset - this.player.chargeCost * 2, this.cvs.height - 57, this.player.charge * 4, 4);\r\n      this.ctx.fillRect(xOffset - this.player.chargeCost * 2, this.cvs.height - 58, 2, 6);\r\n      this.ctx.fillRect(xOffset + this.player.chargeCost * 2, this.cvs.height - 58, 2, 6);\r\n      if (this.player.beamCooldown === 0) {\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.shadowColor = 'black';\r\n\r\n        this.ctx.fillStyle = \"yellow\";\r\n        this.ctx.font = '17px sans-serif';\r\n        this.ctx.clearRect(xOffset - 12, this.cvs.height - 57, 24, 6);\r\n        this.ctx.fillText(`${this.player.charge}`, xOffset, this.cvs.height - 47);\r\n        this.ctx.fillStyle = \"olive\";\r\n        this.ctx.font = '12px sans-serif';\r\n        this.ctx.fillText(`/${this.player.chargeCost}`, xOffset + 20, this.cvs.height - 41);\r\n      }\r\n    }\r\n    if (this.player.beamCooldown > 0) {\r\n      this.ctx.fillStyle = this.loopCount % 5 === 0 ? 'white' : \"lightblue\";\r\n      this.ctx.fillRect(xOffset - this.player.beamCooldown / this.player.beamCooldownMax * this.player.chargeCost * 2, this.cvs.height - 60, this.player.beamCooldown / this.player.beamCooldownMax * this.player.chargeCost * 4, 8);\r\n      this.ctx.font = '13px sans-serif';\r\n      this.ctx.shadowBlur = 2;\r\n      this.ctx.shadowColor = 'black';\r\n      this.ctx.fillText(`!!! COOLDOWN !!!`, xOffset, this.cvs.height - 40);\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawFreeze() {\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = `rgba(15,15,15,${this.pauseTime / 10})`;\r\n    this.ctx.fillRect(0, 0, this.cvs.width, this.cvs.height);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  draw() {\r\n    // Resize canvas to window every frame\r\n    this.ctx.canvas.width = window.innerWidth;\r\n    this.ctx.canvas.height = window.innerHeight;\r\n\r\n    switch (this.state) {\r\n      case STATE_INIT:\r\n        break;\r\n\r\n      case STATE_BEGIN:\r\n        this.particles.forEach(entity => entity.draw());\r\n        // this.player.draw();\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.menus.forEach(entity => entity.draw());\r\n        break;\r\n\r\n      case STATE_STARTING:\r\n        this.particles.forEach(entity => entity.draw());\r\n        // this.player.draw();\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.menus.forEach(entity => entity.draw());\r\n        break;\r\n      case STATE_RUNNING:\r\n        // Handle drawing of all game objects\r\n        this.drawFreeze();\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.particles.forEach(entity => entity.draw());\r\n        this.player.draw();\r\n        this.vanity.forEach(entity => entity.draw());\r\n        this.menus.forEach(entity => entity.draw());\r\n        this.drawChargeBar();\r\n        this.drawUI();\r\n        this.drawHealth();\r\n        this.enemyParticles.forEach(entity => entity.draw());\r\n        break;\r\n\r\n      case STATE_OVER:\r\n        this.drawFreeze(); \r\n\r\n        this.particles.forEach(entity => entity.draw());\r\n        this.entities.forEach(entity => entity.draw());\r\n        this.vanity.forEach(entity => entity.draw());\r\n        this.enemyParticles.forEach(entity => entity.draw());\r\n        this.player.draw();\r\n        this.menus.forEach(entity => entity.draw());\r\n      break;\r\n      default:\r\n        break;\r\n    }\r\n    this.drawStats();\r\n    this.drawCursor();\r\n    this.drawVolControls();\r\n  }\r\n\r\n  loop() {\r\n    let time = (new Date).getTime();\r\n    this.timeDelta = time - this.prevTime;\r\n    \r\n    if (this.timeDelta < NORMAL_TIME_DELTA * 0.90) {\r\n\r\n    } else {\r\n      if (this.pauseTime > 0) this.pauseTime--;\r\n      this.prevTime = time;\r\n      this.update();\r\n      this.draw();\r\n      this.fpsCount++;\r\n    }\r\n\r\n    if (time > this.timeTracker) {\r\n      this.fps = this.fpsCount;\r\n      this.fpsCount = 0;\r\n      this.timeTracker += 1000;\r\n      this.timeSeconds++;\r\n    }\r\n    window.requestAnimationFrame(this.loop);\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack:///./javascript/Game.js?");

/***/ }),

/***/ "./javascript/lib/BufferLoader.js":
/*!****************************************!*\
  !*** ./javascript/lib/BufferLoader.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction BufferLoader(context, urlList, callback) {\r\n  this.context = context;\r\n  this.urlList = urlList;\r\n  this.onload = callback;\r\n  this.bufferList = new Array();\r\n  this.loadCount = 0;\r\n}\r\n\r\nBufferLoader.prototype.loadBuffer = function (url, index) {\r\n  // Load buffer asynchronously\r\n  var request = new XMLHttpRequest();\r\n  request.open(\"GET\", url, true);\r\n  request.responseType = \"arraybuffer\";\r\n\r\n  var loader = this;\r\n\r\n  request.onload = function () {\r\n    // Asynchronously decode the audio file data in request.response\r\n    loader.context.decodeAudioData(\r\n      request.response,\r\n      function (buffer) {\r\n        if (!buffer) {\r\n          alert('error decoding file data: ' + url);\r\n          return;\r\n        }\r\n        loader.bufferList[index] = buffer;\r\n        if (++loader.loadCount == loader.urlList.length)\r\n          loader.onload(loader.bufferList);\r\n      },\r\n      function (error) {\r\n        console.error('decodeAudioData error', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  request.onerror = function () {\r\n    alert('BufferLoader: XHR error');\r\n  }\r\n\r\n  request.send();\r\n}\r\n\r\nBufferLoader.prototype.load = function () {\r\n  for (var i = 0; i < this.urlList.length; ++i)\r\n    this.loadBuffer(this.urlList[i], i);\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BufferLoader);\n\n//# sourceURL=webpack:///./javascript/lib/BufferLoader.js?");

/***/ }),

/***/ "./javascript/lib/Trig.js":
/*!********************************!*\
  !*** ./javascript/lib/Trig.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n\r\n\r\nclass Trig {\r\n  \r\n  // where 0 is the positive x-axis, going clockwise;\r\n  static getVectorfromDegrees(degrees) {\r\n    let angle = degrees / 180 * Math.PI;\r\n    \r\n   return new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Math.sin(angle), Math.cos(angle));\r\n  }\r\n\r\n  static rotateByDegree(vector, degrees) {\r\n    let angle = Math.atan2(vector.x, vector.y);\r\n    let length = vector.length();\r\n\r\n    angle += degrees / 180 * Math.PI;\r\n\r\n    return new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Math.sin(angle), Math.cos(angle)).multiply(length);\r\n  }\r\n\r\n  static getAngle(vector) {\r\n    return Math.atan2(vector.x, vector.y);\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Trig);\n\n//# sourceURL=webpack:///./javascript/lib/Trig.js?");

/***/ }),

/***/ "./javascript/lib/Vector.js":
/*!**********************************!*\
  !*** ./javascript/lib/Vector.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\r\nclass Vector {\r\n  constructor(x = 0, y = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(v) {\r\n    if (v instanceof Vector) {\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n    } else {\r\n      this.x += v; \r\n      this.y += v; \r\n    }\r\n    return this;\r\n  }\r\n\r\n  subtract(v) {\r\n    if (v instanceof Vector) {\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n    } else {\r\n      this.x -= v; \r\n      this.y -= v; \r\n    }\r\n    return this;\r\n  }\r\n\r\n  multiply(v) {\r\n    if (v instanceof Vector) {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    } else {\r\n      this.x *= v; \r\n      this.y *= v; \r\n    }\r\n    return this;\r\n  }\r\n  \r\n  divide(v) {\r\n    if (v instanceof Vector) {\r\n      if(v.x !== 0) this.x /= v.x;\r\n      if(v.y !== 0) this.y /= v.y;\r\n    } else {\r\n      if(v !== 0) {\r\n        this.x /= v; \r\n        this.y /= v; \r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  dup() {\r\n    return new Vector(this.x, this.y);\r\n  }\r\n  \r\n  invert() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    return this;\r\n  }\r\n\r\n  static difference(v1, v2) {\r\n    let newV = new Vector(1, 1).multiply(v1);\r\n    return newV.subtract(v2);\r\n  }\r\n\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y;\r\n  }\r\n\r\n  dot(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  }\r\n\r\n  length() {\r\n    return Math.sqrt(this.dot(this));\r\n  }\r\n\r\n  // WARNING - operation calls divide which will modify this vector\r\n  normalize() {\r\n    // let that = new Vector(this.x, this.y);\r\n    // return that.divide(this.length());\r\n    return this.divide(this.length());\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vector);\n\n//# sourceURL=webpack:///./javascript/lib/Vector.js?");

/***/ }),

/***/ "./javascript/main.js":
/*!****************************!*\
  !*** ./javascript/main.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./javascript/Game.js\");\n\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n  const cvs = document.getElementById('ball-popcalypse');\r\n  const ctx = cvs.getContext('2d');\r\n  const game = new _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](cvs, ctx);\r\n  window.game = game;\r\n  \r\n  game.initAudio();\r\n  game.loop();\r\n});\n\n//# sourceURL=webpack:///./javascript/main.js?");

/***/ }),

/***/ "./javascript/obj/Beam.js":
/*!********************************!*\
  !*** ./javascript/obj/Beam.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/obj/SlashSpark.js\");\n/* harmony import */ var _EnemyParticle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EnemyParticle */ \"./javascript/obj/EnemyParticle.js\");\n/* harmony import */ var _lib_Trig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/Trig */ \"./javascript/lib/Trig.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 60;\r\nconst LENGTH = 150;\r\nconst HITBOX_RATIO = 0.95;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 80;\r\nconst DURATION = 13;\r\n// const COLOR = \"white\";\r\n\r\nclass Beam extends _Particle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n  static COLOR() {\r\n    return {\r\n      NORMAL: [255, 255, 255],\r\n      CRIT: [255, 165, 0],\r\n      CANNON: [255, 0, 0],\r\n      PLAYER: [13, 115, 119],\r\n      FADE: [230, 230, 230],\r\n      TEAL: [0, 205, 205],\r\n      AQUA: [0, 160, 170],\r\n    }\r\n  }\r\n\r\n  constructor(game, \r\n    {\r\n      pos = { x: 100, y: 100 },\r\n      aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0),\r\n      combo = 0,\r\n      active = true,\r\n      length = LENGTH,\r\n      width = WIDTH,\r\n      aliveTime = DURATION,\r\n      initialTime = aliveTime,\r\n      knockback = KNOCKBACK,\r\n      damage = DAMAGE,\r\n      hitRatio = HITBOX_RATIO,\r\n      direction = 0,\r\n      color = Beam.COLOR().NORMAL,\r\n      alpha = 0.9,\r\n      activeTime = 0,\r\n      hitFrequency = 4,\r\n    }\r\n    ) {\r\n    super(game, pos.x, pos.y);\r\n\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\r\n    this.aim = aim;\r\n    this.combo = combo;\r\n    this.active = active;\r\n    this.length = length;\r\n    this.width = width;\r\n    this.aliveTime = aliveTime;\r\n    this.initialTime = initialTime;\r\n    this.knockback = knockback;\r\n    this.damage = damage;\r\n    this.hitRatio = hitRatio;\r\n    this.direction = direction;\r\n    this.color = color;\r\n    this.alpha = alpha;\r\n    this.activeTime = activeTime;\r\n    this.hitFrequency = hitFrequency;\r\n\r\n\r\n    // Formula to get the radian angle between the Y axis and a point\r\n    this.angle = Math.atan2(this.aim.y, this.aim.x);\r\n    this.origin = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.pos.x);\r\n    this.bomb = false;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n    if (!this.active) return;\r\n\r\n    if(!this.hitWidth) this.hitWidth = this.width * this.hitRatio;\r\n    if(!this.hitLength) this.hitLength = this.length * this.hitRatio;\r\n\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"] || (this.bomb ? obj instanceof _EnemyParticle__WEBPACK_IMPORTED_MODULE_6__[\"default\"] : false)) {\r\n\r\n      let x = this.pos.x;\r\n      let y = this.pos.y;\r\n\r\n      // === Infinite linear collision detection ===\r\n      // let dist = Math.abs(this.aim.x * diff.y - this.aim.y * diff.x) / this.aim.length();\r\n      // if (this.width / 2 + obj.r > dist) {\r\n      // =============\r\n\r\n      // === Translate positions to unrotated box, then box collision\r\n      // Invert Y axis because canvas uses Y axis pointing down, and most cartesian\r\n      // calculations are using Y axis up\r\n      // --------------\r\n      // calculate obj's relative position to beam origin\r\n      // x′ = xcosθ − ysinθ      \r\n      // y′ = ycosθ + xsinθ\r\n      \r\n      // Get the obj relative position to beam origin pos\r\n      let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](obj.pos.x, -obj.pos.y), new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, -y));\r\n\r\n      let x2 = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\r\n      let y2 = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\r\n\r\n      // Collision using obj as a box,\r\n      // Use LENGTH > HIT_LENGTH to hide inaccuracy of hitbox\r\n      if ( \r\n        x2 + obj.r >= 0 &&\r\n        x2 - obj.r <= 0 + this.hitLength &&\r\n        y2 + obj.r >= 0 - this.hitWidth / 2 &&\r\n        y2 - obj.r <= 0 + this.hitWidth / 2\r\n      ) {\r\n        diff = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1,0);\r\n        let x = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\r\n        let y = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\r\n        let knockStraight = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y);\r\n        \r\n        obj.health -= this.activeTime === 0 ? this.damage : this.damage / this.activeTime * this.hitFrequency;\r\n        if (obj.health <= 0) {\r\n          obj.alive = false;\r\n        } else if (!this.silenced) {\r\n          if (this.combo === this.game.player.maxSlashCombo) {\r\n            this.game.playSoundMany(`${this.game.filePath}/assets/SE_00017.wav`, 0.03);\r\n          } else {\r\n            this.game.playSoundMany(`${this.game.filePath}/assets/SE_00017.wav`, 0.08);\r\n          }\r\n        }\r\n\r\n        switch (this.combo) {\r\n          case this.game.player.maxSlashCombo:\r\n            this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_4__[\"default\"](obj, this.damage, 11, 30, knockStraight.x));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x - 50 + Math.random() * 100, obj.pos.y - 50 + Math.random() * 100, this.combo, Math.random() * 4, 30 + Math.random() * 70));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x - 50 + Math.random() * 100, obj.pos.y - 50 + Math.random() * 100, this.combo, Math.random() * 4, 30 + Math.random() * 70));\r\n            obj.vel.add(knockStraight.multiply(-this.knockback));\r\n\r\n            break;\r\n          case \"BEAM\":\r\n            let num = new _DamageNumber__WEBPACK_IMPORTED_MODULE_4__[\"default\"](obj, this.activeTime === 0 ? this.damage : this.damage / this.activeTime * this.hitFrequency, 40 * Math.log(this.damage) / Math.log(7000), 70, knockStraight.x)\r\n            this.game.vanity.push(num);\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 2, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 3, 60));\r\n\r\n            let explosionB = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, obj.pos.x, obj.pos.y, 30);\r\n            explosionB.aliveTime = 1;\r\n            this.game.vanity.push(explosionB);\r\n            obj.vel.add(knockStraight.multiply(this.aliveTime >= this.initialTime ? this.knockback : this.knockback / 10));\r\n\r\n            let hitImpactBeam = new _Emitter__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, {\r\n              pos: { x: obj.pos.x, y: obj.pos.y },\r\n              r: 7,\r\n              aim: _lib_Trig__WEBPACK_IMPORTED_MODULE_7__[\"default\"].rotateByDegree(this.aim.dup(), -90 * this.direction),\r\n              emitCount: 6,\r\n              emitSpeed: 3,\r\n              ejectSpeed: 9,\r\n              impulseVariance: 0.25,\r\n              fanDegree: 10,\r\n              aliveTime: 35,\r\n            });\r\n\r\n            this.game.vanity.push(hitImpactBeam);\r\n            break;\r\n          case \"FINISHER\":\r\n            this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_4__[\"default\"](obj, this.damage, 20, 60, knockStraight.x));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 15, 150, 50));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 4, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, 0, 4, 60));\r\n            let explosionF = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, obj.pos.x, obj.pos.y, 50);\r\n            explosionF.aliveTime = 3;\r\n            this.game.vanity.push(explosionF);\r\n            obj.vel.add(knockStraight.multiply(this.knockback));\r\n            obj.pos.add(knockStraight);\r\n\r\n            let hitImpactFin = new _Emitter__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, {\r\n              pos: { x: obj.pos.x, y: obj.pos.y },\r\n              r: 8,\r\n              aim: _lib_Trig__WEBPACK_IMPORTED_MODULE_7__[\"default\"].rotateByDegree(this.aim.dup(), -90 * this.direction),\r\n              emitCount: 6,\r\n              emitSpeed: 6,\r\n              ejectSpeed: 12,\r\n              impulseVariance: 0.4,\r\n              fanDegree: 20,\r\n              aliveTime: 30,\r\n            });\r\n\r\n            this.game.vanity.push(hitImpactFin);\r\n            break;\r\n          default:\r\n            this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_4__[\"default\"](obj, this.damage, 15, 50, knockStraight.x));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 40));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 3, 60));\r\n            this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, obj.pos.x, obj.pos.y, this.combo, 7, 90, 40));\r\n            let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, obj.pos.x, obj.pos.y, 40);\r\n            explosion.aliveTime = 4;\r\n            this.game.vanity.push(explosion);\r\n            obj.vel.add(knockStraight.multiply(this.knockback));\r\n\r\n            let hitImpact = new _Emitter__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, {\r\n              pos: { x: obj.pos.x, y: obj.pos.y },\r\n              r: 6,\r\n              aim: _lib_Trig__WEBPACK_IMPORTED_MODULE_7__[\"default\"].rotateByDegree(this.aim.dup(), -90 * this.direction),\r\n              emitCount: 4,\r\n              emitSpeed: 4,\r\n              ejectSpeed: 6,\r\n              impulseVariance: 0.3,\r\n              decayRate: 0.85,\r\n              fanDegree: 10,\r\n              aliveTime: 20,\r\n            });\r\n\r\n            this.game.vanity.push(hitImpact);\r\n            break;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  drawRect() {\r\n    // Offset the rect based on its width but maintain origin\r\n    this.ctx.save();\r\n    this.ctx.translate(this.pos.x + Math.sin(this.angle) * this.width / 2,\r\n                       this.pos.y - Math.cos(this.angle) * this.width / 2);\r\n    this.ctx.rotate(this.angle);\r\n    this.ctx.fillRect(0, 0, this.length, this.width * 1.1);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n\r\n    \r\n    if (this.aliveTime + this.activeTime >= this.initialTime && this.active === true) {\r\n      if (this.activeTime === 0 || this.aliveTime >= this.initialTime || this.game.loopCount % this.hitFrequency === 0) {\r\n        this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n        if(this.combo === \"BEAM\") {\r\n          this.game.enemyParticles.forEach(entity => { this.checkCollision(entity) });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (this.aliveTime > this.initialTime - 6) {\r\n      this.ctx.save();\r\n      this.ctx.beginPath();\r\n      let color = this.color;\r\n      // let gradient = this.ctx.createLinearGradient(0, 0, this.length, this.width * 1.1);\r\n      // gradient.addColorStop(0.0, `rgba(${color[0]},${color[1]},${color[2]},.9)`);\r\n      // gradient.addColorStop(0.9, `rgba(${color[0]},${color[1]},${color[2]},.9)`);\r\n      // gradient.addColorStop(0.95, `rgba(${color[0]},${color[1]},${color[2]},.1)`);\r\n      // gradient.addColorStop(1.0, `rgba(${color[0]},${color[1]},${color[2]},0)`);\r\n      // this.ctx.fillStyle = gradient;\r\n      // this.ctx.shadowColor = gradient;\r\n      this.ctx.fillStyle = `rgba(${color[0]},${color[1]},${color[2]},${this.alpha})`;\r\n      this.ctx.strokeStyle = `rgba(${color[0]},${color[1]},${color[2]},${this.alpha})`;\r\n      this.ctx.shadowColor = `rgba(${color[0]},${color[1]},${color[2]},${this.alpha})`;\r\n      this.ctx.shadowBlur = 30;\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n\r\n      // this.ctx.shadowColor = color;\r\n      // this.ctx.strokeStyle = \"black\";\r\n\r\n      this.drawRect();\r\n\r\n      this.ctx.restore();\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      let color = Beam.COLOR().FADE;\r\n      this.ctx.beginPath();\r\n\r\n      // let gradient = this.ctx.createLinearGradient(0, 0, this.length, this.width * 1.1);\r\n      // gradient.addColorStop(0.0, `rgba(${color[0]},${color[1]},${color[2]},${(this.aliveTime + 3) / (this.initialTime - 6)})`);\r\n      // gradient.addColorStop(0.9, `rgba(${color[0]},${color[1]},${color[2]},${(this.aliveTime + 3) / (this.initialTime - 6)})`);\r\n      // gradient.addColorStop(1.0, `rgba(${color[0]},${color[1]},${color[2]},0)`);\r\n      // this.ctx.fillStyle = gradient;\r\n      // this.ctx.shadowColor = gradient;\r\n      this.ctx.fillStyle = `rgba(${color[0]},${color[1]},${color[2]}, ${Math.pow((this.aliveTime + 3) / (this.initialTime - 6), 3) * this.alpha})`;\r\n      this.ctx.shadowColor = `rgba(${color[0]},${color[1]},${color[2]}, ${Math.pow((this.aliveTime + 3) / (this.initialTime - 6), 3) * this.alpha})`;\r\n      this.ctx.shadowBlur = 50;\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n\r\n      this.drawRect();\r\n\r\n      this.ctx.restore();\r\n\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Beam);\n\n//# sourceURL=webpack:///./javascript/obj/Beam.js?");

/***/ }),

/***/ "./javascript/obj/BeamCannon.js":
/*!**************************************!*\
  !*** ./javascript/obj/BeamCannon.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 400;\r\nconst LENGTH = 4000;\r\nconst KNOCKBACK = 80;\r\nconst DAMAGE = 6000;\r\nconst DURATION = 120;\r\n// const COLOR = \"white\";\r\n\r\nlet particleCb = function () {\r\n  this.r *= 0.7;\r\n  this.pos = this.pos.add(this.vel);\r\n  this.aliveTime--;\r\n  if (this.aliveTime <= 0) this.alive = false;\r\n}\r\n\r\nclass BeamCannon extends _Beam__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game, startX, startY, aim, length = LENGTH, width = WIDTH, dmg = DAMAGE, kb = KNOCKBACK) {\r\n    super(game, {pos: {x: startX, y: startY}, aim: aim});\r\n    this.width = width;\r\n    this.length = length;\r\n    this.damage = dmg;\r\n    this.knockback = kb;\r\n    this.color = _Beam__WEBPACK_IMPORTED_MODULE_1__[\"default\"].COLOR().CANNON;\r\n    this.combo = \"BEAM\";\r\n    this.aliveTime = DURATION;\r\n    this.initialTime = this.aliveTime;\r\n    this.bomb = true;\r\n\r\n    // let explosion = new Explosion(game, this.pos.x, this.pos.y);\r\n    // explosion.aliveTime -= 16;\r\n    // explosion.color = \"white\"; \r\n    // explosion.r = this.width / 2;\r\n    // game.particles.push(explosion);\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n\r\n    if (this.width < 4) {\r\n      this.width *= 0.97;\r\n    } else {\r\n      this.width *= 0.75;\r\n    }\r\n\r\n    if (this.aliveTime < this.initialTime - 40) {\r\n      let offset = Math.random();\r\n      let particle = new _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n        this.game,\r\n        this.pos.x + this.aim.x * offset * 2000,\r\n        this.pos.y + this.aim.y * offset * 2000,\r\n        this.aim.dup().multiply(2),\r\n      );\r\n      particle.r = Math.random() * 1.5;\r\n      particle.aliveTime = 20;\r\n      particle.active = false;\r\n      particle.cb = particleCb;\r\n      particle.color = \"white\";\r\n      this.game.vanity.push(particle);\r\n    }\r\n\r\n    if (this.aliveTime + this.activeTime >= this.initialTime && this.active === true) {\r\n      if (this.activeTime === 0 || this.aliveTime >= this.initialTime || this.game.loopCount % this.hitFrequency === 0) {\r\n        this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n        if (this.combo === \"BEAM\") {\r\n          this.game.enemyParticles.forEach(entity => { this.checkCollision(entity) });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BeamCannon);\n\n//# sourceURL=webpack:///./javascript/obj/BeamCannon.js?");

/***/ }),

/***/ "./javascript/obj/BeamSlash.js":
/*!*************************************!*\
  !*** ./javascript/obj/BeamSlash.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 52;\r\nconst LENGTH = 150;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 300;\r\nconst DURATION = 7;\r\nconst ARC_DEGREE_RATE = 20;\r\nconst DERVISH_KB_RATE = 0.1;\r\nconst OFFSET = 15;\r\nconst DIRECTION = {\r\n  CCW: -1,\r\n  CW: 1,\r\n}\r\n\r\n//\r\n// Beam factory that creates a new Beams in an arc over a duration\r\n//\r\nclass BeamSlash extends _Particle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n  constructor(game, owner = game.player,\r\n  {\r\n    pos = { x: owner.pos.x, y: owner.pos.y},\r\n    combo = 0,\r\n    beamClass = _Beam__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\r\n    addOffset = OFFSET,\r\n    width = WIDTH,\r\n    length = LENGTH,\r\n    damage = DAMAGE,\r\n    aliveTime = DURATION,\r\n    direction = DIRECTION.CW,\r\n    active = false,\r\n    arcRate = ARC_DEGREE_RATE * Math.PI / 180,\r\n    iterSpeed = 1,\r\n    kb = KNOCKBACK,\r\n    color = _Beam__WEBPACK_IMPORTED_MODULE_4__[\"default\"].COLOR().AQUA,\r\n  }\r\n  ) {\r\n    super(game);\r\n    this.owner = owner;\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\r\n    this.color = color;\r\n    this.beamClass = beamClass;\r\n    this.width = width;\r\n    this.length = length;\r\n    this.damage = damage;\r\n    this.aliveTime = aliveTime;\r\n    this.directions = DIRECTION;\r\n    this.direction = direction;\r\n    this.active = active;\r\n    this.arcRate = arcRate;\r\n    this.combo = combo;\r\n    this.knockback = kb;\r\n    this.iterSpeed = iterSpeed;\r\n\r\n    switch(this.combo) {\r\n      case this.game.player.maxSlashCombo:\r\n        this.direction = DIRECTION.CCW;\r\n        this.arcRate = (ARC_DEGREE_RATE) * Math.PI / 180 * 0.75;\r\n        this.aliveTime *= 11;\r\n        this.length *= 0.60;\r\n        this.width *= 0.60;\r\n        this.knockback *= DERVISH_KB_RATE;\r\n        this.damage /= 14;\r\n        this.iterSpeed = 3;\r\n        break;\r\n      case 0:\r\n        this.knockback *= 1.2;\r\n        this.iterSpeed = 2;\r\n        break;\r\n      case \"FINISHER\":\r\n        this.arcRate = (ARC_DEGREE_RATE * 1.1) * Math.PI / 180; \r\n        this.damage = this.damage * 2.5;\r\n        this.color = _Beam__WEBPACK_IMPORTED_MODULE_4__[\"default\"].COLOR().CRIT;;\r\n        this.knockback = this.knockback * 1.4;\r\n        this.aliveTime += 2;\r\n        this.length += 60;\r\n        this.width += 30;\r\n        this.game.player.invul = 7;\r\n        this.iterSpeed = 2;\r\n        break;\r\n      case 1:\r\n        this.direction = DIRECTION.CCW;\r\n        this.aliveTime += 1;\r\n        this.damage *= 1.2;\r\n        this.length *= 1.2;\r\n        this.width *= 1.25;\r\n        break;\r\n      case 2:\r\n        this.aliveTime += 1;\r\n        this.damage *= 1.2;\r\n        this.length *= 1.2;\r\n        this.width *= 1.25;\r\n        break;\r\n      default:\r\n          break;\r\n    }\r\n\r\n    this.startOffsetDegree = -addOffset + ARC_DEGREE_RATE * (this.aliveTime / 4);\r\n\r\n    this.aim = this.owner.aim;\r\n    let angle = this.startOffsetDegree * Math.PI / 180 * this.direction;\r\n    angle += this.direction * 40 * Math.PI / 180;\r\n    let newAim = this.aim.dup();\r\n    newAim.multiply(1, -1);\r\n\r\n    let x2 = newAim.x * Math.cos(angle) - newAim.y * Math.sin(angle);\r\n    let y2 = newAim.y * Math.cos(angle) + newAim.x * Math.sin(angle);\r\n    this.aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-x2, -y2);\r\n  }\r\n\r\n  iterBeamArc() {\r\n    let arcRate = this.arcRate * this.direction;\r\n    let newAim = this.aim.dup();\r\n    newAim.multiply(1, -1);\r\n\r\n    let x2 = newAim.x * Math.cos(arcRate) - newAim.y * Math.sin(arcRate);\r\n    let y2 = newAim.y * Math.cos(arcRate) + newAim.x * Math.sin(arcRate);\r\n    this.aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x2, y2).normalize();\r\n\r\n    if (this.combo === -1) {\r\n      this.length += 5;\r\n      this.width += 5;\r\n    } else if (this.combo === 3) {\r\n      this.pos.x = this.owner.pos.x;\r\n      this.pos.y = this.owner.pos.y;\r\n      this.length *= 0.997;\r\n    } else {\r\n      // this.length -= 2;\r\n      this.length *= 0.997;\r\n\r\n    }\r\n    let p = new this.beamClass(this.game, {\r\n      pos: {x: this.pos.x + this.aim.x * OFFSET, y: this.pos.y + this.aim.y * OFFSET},\r\n      aim: this.aim, \r\n      combo: this.combo,\r\n      color: this.color,\r\n      length: this.length,\r\n      width: this.width,\r\n      damage: this.damage,\r\n      knockback: this.knockback,\r\n      direction: this.direction,\r\n      parent: this,\r\n    });\r\n    this.game.particles.push(p);\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // BeamSlash does not check collision\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; \r\n    this.cb();\r\n\r\n    // this.pos.x = this.owner.pos.x;\r\n    // this.pos.y = this.owner.pos.y;\r\n\r\n    for (let i = 0; i < this.iterSpeed; i++) {\r\n      this.iterBeamArc();\r\n      this.aliveTime--;\r\n    }\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n\r\n      // combo finisher\r\n      if (this.combo === this.game.player.maxSlashCombo) {\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00064.wav`, 0.22);\r\n        this.game.particles.push(new BeamSlash(this.game, this.owner, {combo: \"FINISHER\", addOffset: 40}));\r\n      }\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    // BeamSlash does not have any drawn elements\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BeamSlash);\n\n//# sourceURL=webpack:///./javascript/obj/BeamSlash.js?");

/***/ }),

/***/ "./javascript/obj/DamageNumber.js":
/*!****************************************!*\
  !*** ./javascript/obj/DamageNumber.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n\r\n\r\n\r\n\r\nconst SIZE = 15;\r\nconst DURATION = 50;\r\nconst FREEZE_DURATION = 3;\r\nconst DEFAULT_TYPE = \"BASE\";\r\nconst VARIANCE = 70;\r\nconst GRAVITY = 0.3;\r\nconst MAX_SIDE_VEL = 8;\r\n\r\nconst COLOR = {\r\n  NORMAL: [255, 255, 255],\r\n  CRIT: [255, 255, 0],\r\n  CANNON: [0, 0, 0],\r\n}\r\n//\r\n// Damage Number\r\n//\r\nclass DamageNumber extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(damagedObj,\r\n    damage,\r\n    size = SIZE,\r\n    duration = DURATION,\r\n    orientation = 0) {\r\n    super(damagedObj.game);\r\n    let x = damagedObj.pos.x;\r\n    let y = damagedObj.pos.y;\r\n\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x - VARIANCE / 2 + Math.random() * VARIANCE, y - VARIANCE / 2 + Math.random() * VARIANCE);\r\n    this.damage = damage;\r\n    this.size = size;\r\n    this.aliveTime = duration;\r\n    this.freezeTime = FREEZE_DURATION;\r\n    this.initialTime = this.aliveTime;\r\n    this.type = \"BASE\";\r\n    this.paused = false;\r\n    if (orientation > MAX_SIDE_VEL) orientation = MAX_SIDE_VEL;\r\n    if (orientation < -MAX_SIDE_VEL) orientation = -MAX_SIDE_VEL;\r\n\r\n\r\n    this.vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-2 + Math.random() * 4 + orientation, -7);\r\n    this.cb = () => {};\r\n\r\n    switch (this.type) {\r\n      case \"BASE\":\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n      default:\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // DamageNumber does not check collision\r\n  }\r\n\r\n  drawNum() {\r\n    this.ctx.save();\r\n    this.ctx.font = `${this.size}px sans-serif`;\r\n    let color;\r\n    // let percent = (this.aliveTime - FREEZE_DURATION) / (this.initialTime - FREEZE_DURATION);\r\n    // if (this.aliveTime > (DURATION - FREEZE_DURATION)) {\r\n    //   color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},1)`;\r\n    // } else {\r\n    //   color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`;\r\n    // }\r\n    let percent = (this.aliveTime) / (this.initialTime);\r\n    color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`;\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.strokeStyle = color;\r\n    this.ctx.shadowBlur = 1;\r\n    this.ctx.shadowColor = \"black\";\r\n    this.ctx.fillText(`${Math.floor(this.damage)}`, this.pos.x, this.pos.y);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  update() {\r\n    if (this.freezeTime >= 0) {\r\n      this.freezeTime--;\r\n    } else {\r\n      this.addVelocityTimeDelta();\r\n      this.vel.y += GRAVITY;\r\n    }\r\n\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    \r\n\r\n    this.cb();\r\n  }\r\n\r\n  draw() {\r\n    return;\r\n    this.drawNum();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DamageNumber);\n\n//# sourceURL=webpack:///./javascript/obj/DamageNumber.js?");

/***/ }),

/***/ "./javascript/obj/DashingEnemy.js":
/*!****************************************!*\
  !*** ./javascript/obj/DashingEnemy.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/obj/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _EnemyParticle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EnemyParticle */ \"./javascript/obj/EnemyParticle.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n/* harmony import */ var _Star__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Star */ \"./javascript/obj/Star.js\");\n/* harmony import */ var _EnemyBeam__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./EnemyBeam */ \"./javascript/obj/EnemyBeam.js\");\n/* harmony import */ var _BeamSlash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BeamSlash */ \"./javascript/obj/BeamSlash.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst RADIUS = 12;\nconst COLOR = \"darkgreen\";\nconst KNOCKBACK = 10;\nconst ENEMY_KNOCKBACK_MULTIPLIER = 2.5;\nconst DAMPENING_COEFFICIENT = 0.7;\nconst SPREAD_FACTOR = 2.0;\nconst HEALTH = 1500;\nconst HEALTH_CAP = 2500;\nconst DAMAGE = 1;\nconst SCORE = 30;\nconst BASE_TURN_RATE = 2;\nconst ACCEL = 0.6;\nconst MAX_SPEED = 4;\nconst ATTACK_COOLDOWN = 60;\nconst ATTACK_DAMAGE = 20;\nconst ATTACK_RANGE = 60;\nconst DASH_COOLDOWN = 180;\nconst DASH_AGGRO_RANGE = 500;\nconst DASH_DURATION = 16;\nconst PREP_DASH_TIME = 40;\nconst POST_DASH_PAUSE = 60;\n\nclass DashingEnemy extends _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(game, \n    {\n      pos = {x: 100, y: 100},\n      color = COLOR,\n    }\n  ) {\n    super(game);\n    this.pos.x = pos.x;\n    this.pos.y = pos.y;\n    this.health = HEALTH + game.difficulty * 3;\n    if (this.health > HEALTH_CAP) this.health = HEALTH_CAP;\n    this.accel = ACCEL + Math.random() * Math.pow(game.difficulty, 1 / 3) / 4;\n    this.maxSpeed = MAX_SPEED;\n\n    this.attackCooldown = 0;\n    this.dashCooldown = 0;\n    this.attackDamage = ATTACK_DAMAGE;\n    this.r = RADIUS;\n    this.color = color;\n    this.damage = DAMAGE;\n    this.score = SCORE;\n    this.dashDuration = 0;\n    this.storedVel = this.aim;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  attack() {\n    if (this.attackCooldown > 0 || this.dashDuration > DASH_DURATION + POST_DASH_PAUSE) return;\n    if (this.pos.x > this.cvs.width + this.r ||\n      this.pos.x < 0 - this.r ||\n      this.pos.y > this.cvs.height + this.r ||\n      this.pos.y < 0 - this.r) {\n      return;\n    };\n\n    this.attackCooldown = ATTACK_COOLDOWN;\n    let attack = new _BeamSlash__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.game, this, {\n      pos: {x: this.pos.x, y: this.pos.y},\n      beamClass: _EnemyBeam__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n      width: 30,\n      length: ATTACK_RANGE + 10 + this.game.difficulty / 3,\n      addOffset: this.r + 5,\n      parent: this,\n      cb: () => {\n        this.pos = this.owner.pos.dup()\n      }\n    });\n    attack.beamClass = _EnemyBeam__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\n    attack.owner = this;\n    attack.color = _Beam__WEBPACK_IMPORTED_MODULE_11__[\"default\"].COLOR().CANNON;\n    this.game.enemyParticles.push(attack);\n  }\n\n  dash() {\n    if (this.dashCooldown > 0) return;\n    if (this.pos.x > this.cvs.width + this.r ||\n      this.pos.x < 0 - this.r ||\n      this.pos.y > this.cvs.height + this.r ||\n      this.pos.y < 0 - this.r) {\n      return;\n    };\n    \n    if (Math.abs(_lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, this.game.player.pos).length()) <= DASH_AGGRO_RANGE) {\n      this.storedVel = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.game.player.pos, this.pos).normalize().multiply(25);\n      this.dashDuration = POST_DASH_PAUSE + DASH_DURATION + PREP_DASH_TIME;\n      this.dashCooldown = DASH_COOLDOWN;\n      this.active = false;\n\n      let star = new _Star__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this, {\n        pos: this.pos.dup(),\n        length: 40,\n        width: 15,\n        aliveTime: 35,\n        expandRate: 1.05,\n        thinningRate: 0.65,\n        color: [255, 0, 0],\n      });\n      this.game.vanity.push(star);\n      let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](game, this.pos.x, this.pos.y, this.r + 20);\n      explosion.color = \"red\";\n      explosion.aliveTime = 3;\n      this.game.vanity.push(explosion);\n    }\n  }\n\n  update() {\n    if (!this.alive) return;\n    this.aiCallback();\n    this.addVelocityTimeDelta();\n    this.checkCollision(this.game.players[0]);\n\n    if (this.dashDuration > DASH_DURATION + POST_DASH_PAUSE) {\n      this.vel = this.vel.multiply(0);\n      let hitEmit = new _Emitter__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, {\n        pos: { x: this.pos.x, y: this.pos.y + 1 },\n        r: 4,\n        aim: new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, -1),\n        aliveTime: 14,\n        emitCount: 3,\n        emitSpeed: 1,\n        ejectSpeed: 4,\n        impulseVariance: 0.2,\n        // fanDegree: 180,\n        decayRate: 0.6,\n        color: \"rgba(255,0,0,0.8)\",\n        lengthForward: 5,\n        cb: function () { \n          if(this.vel.y > 0) this.vel.y *= 0.6;\n          this.vel.y -= 0.07; \n          // this.vel.y -= this.vel.y * 0.5;\n          this.vel.x -= this.vel.x * 0.5 },\n      });\n      this.game.vanity.push(hitEmit);\n    } else if (this.dashDuration >= POST_DASH_PAUSE) {\n      if (this.dashDuration === DASH_DURATION + POST_DASH_PAUSE) {\n        this.attackCooldown = 0;\n        let hitEmit = new _Emitter__WEBPACK_IMPORTED_MODULE_7__[\"default\"](game, {\n          pos: { x: this.pos.x, y: this.pos.y },\n          r: 6,\n          aim: this.storedVel.dup().multiply(-1),\n          aliveTime: 20,\n          emitCount: 8,\n          emitSpeed: 4,\n          ejectSpeed: 6,\n          impulseVariance: 0.15,\n          fanDegree: 10,\n          color: \"white\",\n        });\n        this.game.vanity.push(hitEmit);\n      }\n      let p = new _Particle__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, this.pos.x, this.pos.y);\n      p.color = \"green\";\n      p.aliveTime = 8;\n      p.r = 5;\n      p.active = false;\n      p.cb = function () {\n        this.aliveTime--;\n        if (this.aliveTime <= 4) this.color = `rgba(128,128,128,${this.aliveTime / 4})`;\n        if (this.aliveTime <= 0) this.alive = false;\n      }\n      this.game.vanity.push(p);\n\n      this.vel = this.storedVel.multiply(0.98);\n    } else {\n      this.active = true;\n      this.aim = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.game.player.pos, this.pos);\n      this.aim.normalize();\n      let turnRate = BASE_TURN_RATE + Math.pow(this.game.difficulty, 1 / 3);\n      this.aim.multiply(turnRate).add(this.vel).normalize();\n      this.dampSpeed();\n      // this.vel.add(this.aim.dup().normalize().multiply(this.dashDuration > 0 ? 0 : this.accel));\n\n      this.dashCooldown > 0 ? this.dashCooldown-- : this.dash();\n    }\n    this.dashDuration > 0 ? this.dashDuration-- : null;\n    \n    if (this.attackCooldown > 0) {\n      this.attackCooldown--;\n    } else {\n      if (this.dashDuration === POST_DASH_PAUSE || Math.abs(_lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, this.game.player.pos).length()) <= ATTACK_RANGE) {\n        this.attack();\n      }\n    }\n\n    \n    // Many-many collision is very heavy - please refactor at some point or implement quadtree\n    this.game.entities.forEach(entity => this.checkCollision(entity));\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.strokeStyle = 'black';\n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.closePath();\n    this.ctx.restore();\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DashingEnemy);\n\n//# sourceURL=webpack:///./javascript/obj/DashingEnemy.js?");

/***/ }),

/***/ "./javascript/obj/DeathExplosion.js":
/*!******************************************!*\
  !*** ./javascript/obj/DeathExplosion.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst WIDTH = 40;\r\nconst LENGTH = 50;\r\nconst RADIUS = 25;\r\nconst KNOCKBACK = 10;\r\nconst DURATION = 90;\r\nconst ARC_DEGREE_RATE = 0.8;\r\nconst NUM_RAYS = 12;\r\nconst GROWTH_RATE = 0.75;\r\nconst DIRECTION = {\r\n  CCW: -1,\r\n  CW: 1,\r\n}\r\n// const COLOR = \"white\";\r\n\r\n//\r\n// Beam factory that creates a new Beams in an arc over a duration\r\n//\r\nclass DeathExplosion extends _Particle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n  constructor(game,\r\n    width = WIDTH,\r\n    length = LENGTH,\r\n    radius = RADIUS,\r\n    pattern = \"BASE\",) {\r\n    super(game);\r\n    this.owner = this.game.player;\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.owner.pos.x, this.owner.pos.y);\r\n    this.color = this.owner.color;\r\n    this.width = width;\r\n    this.length = length;\r\n    this.radius = radius;\r\n    this.aliveTime = DURATION;\r\n    this.active = false;\r\n    this.arcRate = ARC_DEGREE_RATE * Math.PI / 180;\r\n    this.knockback = KNOCKBACK;\r\n    this.rays = {\r\n      angle: [],\r\n      length: [],\r\n      width: [],\r\n      dir: [],\r\n      offsetRate: [],\r\n    };\r\n    this.pattern = pattern;\r\n\r\n    for (let i = 0; i < NUM_RAYS; i++) {\r\n      let direction = Math.floor(Math.random() * 2);\r\n      if (direction === 0) direction = DIRECTION.CCW;\r\n      switch (this.pattern) {\r\n        case \"BLACKHOLE\":\r\n          this.rays.angle.push(Math.random() * 360 * Math.PI / 180);\r\n          this.rays.length.push(Math.random() * this.length * 22 + this.length );\r\n          this.rays.width.push(Math.random() * this.width * 18 / 16 + this.width / 16);\r\n\r\n          this.rays.dir.push(direction);\r\n          this.rays.offsetRate.push((Math.random() * this.arcRate) * this.rays.dir[i]);\r\n          break;\r\n        default:\r\n          this.rays.angle.push(Math.random() * 360 * Math.PI / 180);\r\n          this.rays.length.push(Math.random() * this.length * 15 / 16 + this.length / 16);\r\n          this.rays.width.push(Math.random() * this.width * 15 / 16 + this.width / 16);\r\n          this.rays.dir.push(direction);\r\n          this.rays.offsetRate.push((Math.random() * this.arcRate) * this.rays.dir[i]);\r\n          break;\r\n      }\r\n    }\r\n\r\n    switch (this.pattern) {\r\n      case \"BLACKHOLE\":\r\n        this.aliveTime = 50;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // DeathExplosion does not check collision\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return;\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n\r\n    switch(this.pattern) {\r\n      case \"BLACKHOLE\":\r\n        for (let i = 0; i < NUM_RAYS; i++) {\r\n          this.rays.length[i] *= 0.96;\r\n        }\r\n        break;\r\n      default:\r\n        if (this.aliveTime <= 8) {\r\n          this.radius *= 0.8;\r\n        } else {\r\n          this.radius += GROWTH_RATE;\r\n        }\r\n\r\n        if (this.aliveTime % 3 === 0) {\r\n          let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n            game,\r\n            this.pos.x - 200 + Math.random() * 400,\r\n            this.pos.y - 200 + Math.random() * 400,\r\n            15 + Math.random() * 35,\r\n            new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, -4));\r\n          explosion.unpausable = true;\r\n          explosion.paused = false;\r\n          explosion.aliveTime = 9;\r\n          explosion.color = \"orange\";\r\n          this.game.vanity.push(explosion);\r\n        }\r\n\r\n        for (let i = 0; i < NUM_RAYS; i++) {\r\n          this.rays.angle[i] += this.rays.offsetRate[i];\r\n          this.rays.length[i] += this.rays.length[i] / 16;\r\n          if (this.aliveTime <= 7) {\r\n            this.rays.width[i] *= 1.3;\r\n\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  drawRects() {\r\n    for (let i = 0; i < NUM_RAYS; i++) {\r\n      this.ctx.save();\r\n      let color = (this.pattern === \"BLACKHOLE\" ? [0, 0, 0] : [255, 255, 255]);\r\n      let gradient = this.ctx.createLinearGradient(0, 0, this.rays.length[i], this.rays.width[i]);\r\n      gradient.addColorStop(0, `rgba(${color[0]},${color[1]},${color[2]},.9)`);\r\n      gradient.addColorStop(0.8, `rgba(${color[0]},${color[1]},${color[2]},.7)`);\r\n      gradient.addColorStop(0.9, `rgba(${color[0]},${color[1]},${color[2]},.1)`);\r\n      gradient.addColorStop(1, `rgba(${color[0]},${color[1]},${color[2]},0)`);\r\n      this.ctx.fillStyle = gradient;\r\n\r\n\r\n      this.ctx.translate(this.pos.x + Math.sin(this.rays.angle[i]) * this.rays.width[i] / 2,\r\n        this.pos.y - Math.cos(this.rays.angle[i]) * this.rays.width[i] / 2);\r\n      this.ctx.rotate(this.rays.angle[i]);\r\n      this.ctx.fillRect(0, 0, this.rays.length[i], this.rays.width[i]);\r\n      this.ctx.restore();\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    this.drawRects();\r\n    if(this.pattern === \"BASE\") {\r\n      this.ctx.save();\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.radius, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = \"white\";\r\n      this.ctx.strokeStyle = \"white\";\r\n\r\n      this.ctx.shadowBlur = 6;\r\n      this.ctx.shadowColor = \"white\";\r\n\r\n      this.ctx.fill();\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n\r\n      this.ctx.restore();\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DeathExplosion);\n\n//# sourceURL=webpack:///./javascript/obj/DeathExplosion.js?");

/***/ }),

/***/ "./javascript/obj/Emitter.js":
/*!***********************************!*\
  !*** ./javascript/obj/Emitter.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _Sparkle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sparkle */ \"./javascript/obj/Sparkle.js\");\n/* harmony import */ var _lib_Trig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/Trig */ \"./javascript/lib/Trig.js\");\n\n\n\n\n\nfunction augment(Obj1, Obj2) {\n  var prop;\n  for (prop in Obj2) {\n    if (Obj2.hasOwnProperty(prop) && !Obj1[prop]) {\n      Obj1[prop] = Obj2[prop];\n    }\n  }\n  return Obj1;\n}\n\nclass Emitter extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor(\n    game,\n    {\n      pos = {x: 0, y: 0},\n      r = 1,\n      width = 0,\n      lengthForward = 0,\n      cb = () => { },\n      vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0),\n      aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0),\n      emittee = _Sparkle__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n      emitCount = 5,\n      emitSpeed = emitCount,\n      aliveTime = 20,\n      fanDegree = 180,\n      ejectSpeed = 4,\n      decayRate = 0.8,\n      impulseVariance = 0.9,\n      color = \"white\",\n    }\n  ) {\n    super(game);\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\n    this.vel = vel;\n    this.aim = aim;\n    this.r = r;\n    this.width = width;\n    this.lengthForward = lengthForward;\n    this.cb = cb;\n    this.aliveTime = aliveTime,\n    this.emittee = emittee;\n    this.emitCount = emitCount;\n    this.emitSpeed = emitSpeed;\n    this.fanDegree = fanDegree;\n    this.ejectSpeed = ejectSpeed;\n    this.decayRate = decayRate;\n    this.impulseVariance = impulseVariance;\n    this.active = true;\n    this.color = color;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  validatePosition(rectX, rectY) {\n    if (this.pos.x > rectX + this.r\n      || this.pos.x < 0 - this.r\n      || this.pos.y > rectY + this.r\n      || this.pos.y < 0 - this.r) {\n      this.alive = false;\n    };\n  }\n\n  checkCollision(obj) {\n    return;\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n    if (!this.active) return;\n\n    for (let i = 0; i < this.emitSpeed; i++) {\n      let dir = this.aim.dup().normalize();\n      dir = _lib_Trig__WEBPACK_IMPORTED_MODULE_3__[\"default\"].rotateByDegree(dir, -1 * this.fanDegree + Math.random() * this.fanDegree * 2);\n      dir = dir.multiply(this.ejectSpeed);\n      dir = dir.multiply(1 - this.impulseVariance + Math.random() * this.impulseVariance * 2);\n\n      let angle = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      let adjust = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      let offset = 0;\n      if (this.width > 0) {\n        offset = Math.random() * this.width;\n        angle = dir.dup().normalize();\n        angle = _lib_Trig__WEBPACK_IMPORTED_MODULE_3__[\"default\"].rotateByDegree(angle, 90);\n        adjust = angle.dup().multiply(-this.width / 2);\n        angle = angle.multiply(offset);\n      }\n\n      let forwardOffset = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      if(this.lengthForward > 0) {\n        forwardOffset = dir.dup().normalize().multiply(Math.random() * this.lengthForward);\n      }\n\n      let p = new this.emittee(this.game, {\n        pos: { x: this.pos.x + adjust.x + angle.x - forwardOffset.x * 0.25 + forwardOffset.x, y: this.pos.y + adjust.y + angle.y - forwardOffset.y * 0.25 + forwardOffset.y}, \n        vel: dir,\n        r: this.r * Math.random() * 1.3,\n        aliveTime: this.aliveTime,\n        color: this.color,\n        decayRate: this.decayRate,\n        cb: this.cb,\n      });\n\n      this.game.vanity.push(p);\n    }\n    \n    this.emitCount -= this.emitSpeed;\n    if(this.emitCount <= 0) this.alive = false;\n\n    this.addVelocityTimeDelta();\n    this.validatePosition(this.cvs.width, this.cvs.height);\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    return;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Emitter);\n\n//# sourceURL=webpack:///./javascript/obj/Emitter.js?");

/***/ }),

/***/ "./javascript/obj/EnemyBeam.js":
/*!*************************************!*\
  !*** ./javascript/obj/EnemyBeam.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/obj/SlashSpark.js\");\n/* harmony import */ var _EnemyParticle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EnemyParticle */ \"./javascript/obj/EnemyParticle.js\");\n/* harmony import */ var _lib_Trig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/Trig */ \"./javascript/lib/Trig.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst WIDTH = 60;\nconst LENGTH = 150;\nconst HITBOX_RATIO = 0.95;\nconst KNOCKBACK = 10;\nconst DAMAGE = 20;\nconst DURATION = 13;\n\nclass EnemyBeam extends _Beam__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\n  constructor(game, \n    {\n      pos = {x: 200, y: 200 },\n      length = LENGTH,\n      width = WIDTH,\n      aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0),\n      combo = 0,\n      active = true,\n      parent = null,\n      color = [70, 30, 30],\n      alpha = 0.3,\n    }\n    ) {\n    super(game, {pos});\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\n    this.length = length;\n    this.width = width;\n    this.aim = aim;\n    this.combo = combo;\n    this.active = active;\n    this.parent = parent;\n    this.color = color;\n    this.alpha = alpha;\n\n\n    // Formula to get the radian angle between the Y axis and a point\n    this.angle = Math.atan2(this.aim.y, this.aim.x);\n    this.hitRatio = HITBOX_RATIO;\n    this.origin = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.pos.x);\n    this.damage = DAMAGE;\n    this.knockback = KNOCKBACK;\n    this.aliveTime = DURATION;\n    this.initialTime = this.aliveTime;\n    this.bomb = false;\n    this.direction = 0;\n    this.activeTime = 0;\n    this.hitFrequency = 4;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  checkCollision(obj) {\n    if (!obj.alive) return; //Don't check collision if object is not alive\n    if (!this.active) return;\n    if (this.parent && this.parent.hitTarget) return;\n    if (obj.noclip >= 0 || obj.invul >= 0) return;\n    if (!this.hitWidth) this.hitWidth = this.width * this.hitRatio;\n    if (!this.hitLength) this.hitLength = this.length * this.hitRatio;\n\n    let x = this.pos.x;\n    let y = this.pos.y;\n\n    // === Infinite linear collision detection ===\n    // let dist = Math.abs(this.aim.x * diff.y - this.aim.y * diff.x) / this.aim.length();\n    // if (this.width / 2 + obj.r > dist) {\n    // =============\n\n    // === Translate positions to unrotated box, then box collision\n    // Invert Y axis because canvas uses Y axis pointing down, and most cartesian\n    // calculations are using Y axis up\n    // --------------\n    // calculate obj's relative position to beam origin\n    // x′ = xcosθ − ysinθ      \n    // y′ = ycosθ + xsinθ\n\n    // Get the obj relative position to beam origin pos\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](obj.pos.x, -obj.pos.y), new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, -y));\n\n    let x2 = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\n    let y2 = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\n\n    // Collision using obj as a box,\n    // Use LENGTH > HIT_LENGTH to hide inaccuracy of hitbox\n    if (\n      x2 + obj.r >= 0 &&\n      x2 - obj.r <= 0 + this.hitLength &&\n      y2 + obj.r >= 0 - this.hitWidth / 2 &&\n      y2 - obj.r <= 0 + this.hitWidth / 2\n    ) {\n      diff = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0);\n      let x = diff.x * Math.cos(this.angle) - diff.y * Math.sin(this.angle);\n      let y = diff.y * Math.cos(this.angle) + diff.x * Math.sin(this.angle);\n      let knockStraight = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y);\n\n      console.log(\"hit\");\n      obj.health -= this.damage;\n      obj.charge += this.damage;\n      // obj.invul += 10;\n      if(this.parent) this.parent.hitTarget = true;\n      let hitSpark = new _Emitter__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.game, {\n        pos: obj.pos,\n        r: 6,\n        aim: knockStraight.normalize(),\n        aliveTime: 50,\n        emitCount: 24,\n        emitSpeed: 8,\n        fanDegree: 20,\n        ejectSpeed: 7,\n        decayRate: 0.94,\n        impulseVariance: 0.8,\n        color: \"rgba(255, 0, 0,1)\",\n        cb: function () { this.vel.y -= 0.10; },\n      });\n      obj.vel.add(knockStraight.multiply(this.knockback));\n      this.game.vanity.push(hitSpark);\n      this.game.playSoundMany(`${this.game.filePath}/assets/SE_00017.wav`, 0.10);\n      if (obj.health <= 0) {\n        obj.alive = false;\n      }\n    }\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n\n    if (this.aliveTime >= this.initialTime - 2) {\n      this.checkCollision(this.game.player);\n    }\n\n    if (this.aliveTime <= 0) {\n      this.alive = false;\n    }\n    this.aliveTime--;\n    this.cb();\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EnemyBeam);\n\n//# sourceURL=webpack:///./javascript/obj/EnemyBeam.js?");

/***/ }),

/***/ "./javascript/obj/EnemyCircle.js":
/*!***************************************!*\
  !*** ./javascript/obj/EnemyCircle.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/obj/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 7;\r\nconst COLOR = \"#a64942\";\r\nconst KNOCKBACK = 10;\r\nconst ENEMY_KNOCKBACK_MULTIPLIER = 2.5;\r\nconst DAMPENING_COEFFICIENT = 0.65;\r\nconst SPREAD_FACTOR = 2.0;\r\nconst HEALTH = 100;\r\nconst HEALTH_CAP = 200;\r\nconst DAMAGE = 1;\r\nconst SCORE = 1;\r\nconst BASE_TURN_RATE = 2;\r\nconst ACCEL = 0.4;\r\nconst MAX_SPEED = 4;\r\n\r\nclass EnemyCircle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    this.aiCallback = () => {\r\n      this.aim = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(game.player.pos, this.pos).normalize();\r\n      let turnRate = BASE_TURN_RATE + Math.pow(game.difficulty, 1 / 3);\r\n      this.aim.multiply(turnRate).add(this.vel).normalize();\r\n\r\n      this.vel.add(this.aim.multiply(this.accel));\r\n    };\r\n\r\n    this.health = HEALTH + game.difficulty * 2;\r\n\r\n    this.accel = ACCEL + Math.random() * Math.pow(game.difficulty, 1 / 2);\r\n    this.maxSpeed = MAX_SPEED + Math.random() * Math.pow(game.difficulty, 1 / 2);\r\n\r\n    if (this.health > HEALTH_CAP) this.health = HEALTH_CAP;\r\n\r\n    this.r = RADIUS;\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.score = SCORE;\r\n    this.active = true;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  dampSpeed() {\r\n    let vel = this.vel.length();\r\n    if (vel > this.maxSpeed) {\r\n      this.vel.multiply(DAMPENING_COEFFICIENT);\r\n      if (this.vel.length() < this.maxSpeed) {\r\n        this.vel = this.vel.normalize().multiply(this.maxSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check if enemies collide with the player\r\n  checkAndHitPlayer(player) {\r\n    if (player.noclip > 0) return;\r\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, player.pos);\r\n    let distSqr = diff.dot(diff);\r\n\r\n    // if (player.moveState === \"STATE_DASHING\") return;\r\n    if (this.r * this.r + player.r * player.r > distSqr) {\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/impact.wav`, 0.3);\r\n      let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](game, player.pos.x + diff.x / 2, player.pos.y + diff.y / 2, this.r);\r\n      explosion.color = 'red';\r\n      explosion.aliveTime = 5;\r\n\r\n      diff.normalize();\r\n      diff.multiply(KNOCKBACK);\r\n      player.vel.subtract(diff.dup().multiply(this.r / RADIUS));\r\n      this.vel.add(diff.multiply(ENEMY_KNOCKBACK_MULTIPLIER));\r\n      \r\n      player.game.vanity.push(explosion);\r\n      if (player.invul > 0) {\r\n        explosion.color = 'lightblue';\r\n        return false;\r\n      } else {\r\n        let hitEmit = new _Emitter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](game, {\r\n          pos: { x: player.pos.x, y: player.pos.y },\r\n          r: 5 + this.r / RADIUS,\r\n          aim: this.aim.dup(),\r\n          aliveTime: 20 + this.r / RADIUS,\r\n          emitCount: 3 + this.r / RADIUS,\r\n          ejectSpeed: 3 + this.r / RADIUS,\r\n          impulseVariance: 0.15,\r\n          fanDegree: 10 + this.r / RADIUS,\r\n          color: \"red\",\r\n        });\r\n\r\n        this.game.vanity.push(hitEmit);\r\n\r\n        player.health -= this.damage;\r\n        player.charge += this.damage;\r\n        if (this.r >= 50) player.invul = 45;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Check if enemies are colliding and push them away\r\n  checkAndSpreadEnemy(obj) {\r\n    if (!obj.active) return;\r\n    // Don't collide objects that are standing directly on each other\r\n    if (obj.pos.equals(this.pos)) return;\r\n\r\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n\r\n    if (this.r * this.r + obj.r * obj.r > distSqr) {\r\n      diff.normalize();\r\n      diff.multiply(SPREAD_FACTOR);\r\n      obj.vel.subtract(diff.dup().multiply(this.r / RADIUS));\r\n      this.vel.add(diff.dup().multiply(RADIUS / this.r));\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return;\r\n\r\n    if(obj instanceof _Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      this.checkAndHitPlayer(obj);\r\n    } else if (obj instanceof EnemyCircle) {\r\n      this.checkAndSpreadEnemy(obj);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return;\r\n    this.aiCallback();\r\n\r\n    this.dampSpeed();\r\n    this.addVelocityTimeDelta();\r\n\r\n    // Check collision with player\r\n    this.checkCollision(this.game.players[0]);\r\n\r\n    // Many-many collision is very heavy - please refactor at some point or implement quadtree\r\n    this.game.entities.forEach(entity => this.checkCollision(entity));\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.strokeStyle = 'black';\r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EnemyCircle);\n\n//# sourceURL=webpack:///./javascript/obj/EnemyCircle.js?");

/***/ }),

/***/ "./javascript/obj/EnemyParticle.js":
/*!*****************************************!*\
  !*** ./javascript/obj/EnemyParticle.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 20;\r\nconst KNOCKBACK = 30;\r\nconst DAMAGE = 10;\r\nconst COLOR = \"#ff6229\";\r\nconst VELOCITY = 7;\r\nconst SCORE = 1;\r\nconst HITBOX_RATIO = 0.8;\r\n\r\nclass EnemyParticle extends _Particle__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\r\n  constructor(game, {\r\n    pos = {x: 100, y: 100},\r\n    vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0),\r\n    cb = () => { },\r\n    r = RADIUS,\r\n    damage = DAMAGE,\r\n    knockback = KNOCKBACK,\r\n    color = COLOR,\r\n  }\r\n  ) {\r\n    super(game);\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\r\n    this.vel = vel;\r\n    this.cb = cb;\r\n    this.r = r;\r\n    this.damage = damage;\r\n    this.knockback = knockback;\r\n    this.color = color;\r\n    this.aliveTime = 1;\r\n    this.active = true;\r\n    this.target = this.game.player;\r\n    this.score = SCORE;\r\n    this.health = 1;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  checkAndHitPlayer(player) {\r\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, player.pos);\r\n    let distSqr = diff.dot(diff);\r\n\r\n    // if (player.moveState === \"STATE_DASHING\") return;\r\n    if (this.r * this.r + player.r * player.r > distSqr * HITBOX_RATIO) {\r\n      if(player.alive) this.game.playSoundMany(`${this.game.filePath}/assets/impact.wav`, 0.3);\r\n      let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, player.pos.x + diff.x / 2, player.pos.y + diff.y / 2, this.r * 2);\r\n      explosion.color = 'red';\r\n      explosion.aliveTime = 5;\r\n\r\n      let kb = this.vel.dup().normalize();\r\n      kb.multiply(this.knockback);\r\n      player.vel.add(kb);\r\n\r\n      if (player.invul > 0) {\r\n        explosion.color = 'lightblue';\r\n      } else {\r\n        player.health -= this.damage;\r\n        player.charge += this.damage;\r\n        if (this.r > RADIUS) player.invul = 45;\r\n\r\n        let hitEmit = new _Emitter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](game, {\r\n          pos: { x: player.pos.x, y: player.pos.y },\r\n          r: 6,\r\n          aim: this.vel.dup(),\r\n          aliveTime: 20,\r\n          emitCount: 1,\r\n          ejectSpeed: 7,\r\n          impulseVariance: 0.15,\r\n          fanDegree: 10,\r\n          color: \"red\",\r\n        });\r\n\r\n        this.game.vanity.push(hitEmit);\r\n      }\r\n      this.alive = false;\r\n      player.game.vanity.push(explosion);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n    this.cb();\r\n    if (!this.active) return;\r\n    this.addVelocityTimeDelta();\r\n    this.checkAndHitPlayer(this.target);\r\n    this.validatePosition(this.cvs.width, this.cvs.height);\r\n\r\n    let thruster = new _Emitter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.game, {\r\n      pos: { x: this.pos.x, y: this.pos.y },\r\n      r: this.r - 1,\r\n      aim: this.vel.dup().multiply(-1),\r\n      aliveTime: 10,\r\n      emitCount: 2,\r\n      emitSpeed: 1,\r\n      ejectSpeed: this.r * 0.1,\r\n      impulseVariance: .5,\r\n      fanDegree: 20,\r\n      color: this.color,\r\n      decayRate: 0.8,\r\n    });\r\n\r\n    this.game.vanity.push(thruster);\r\n    \r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.shadowBlur = 7;\r\n    this.ctx.shadowColor = \"red\";\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.fill();\r\n    this.ctx.strokeStyle = \"red\";\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EnemyParticle);\n\n//# sourceURL=webpack:///./javascript/obj/EnemyParticle.js?");

/***/ }),

/***/ "./javascript/obj/Explosion.js":
/*!*************************************!*\
  !*** ./javascript/obj/Explosion.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n\r\n\r\n\r\n\r\nconst RADIUS = 5;\r\nconst COLOR = \"white\";\r\n\r\nclass Explosion extends _Particle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(game, startX, startY, startR, vel, aliveTime, color) {\r\n    super(game);\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = vel || new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.r = startR || RADIUS;\r\n    this.color = color || COLOR;\r\n    this.aliveTime = aliveTime || 20;\r\n    this.initialAliveTime = this.aliveTime;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n\r\n    this.pos.add(this.vel);\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n\r\n    if (this.aliveTime <= 5) {\r\n      this.r *= 1.11;\r\n    }\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (this.aliveTime > 5) {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.strokeStyle = this.color;\r\n      this.ctx.fill();\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n      this.ctx.restore();\r\n\r\n\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = this.color;\r\n     \r\n      this.ctx.shadowBlur = 30;\r\n      this.ctx.shadowColor =  this.color;\r\n      this.ctx.stroke();  \r\n\r\n      this.ctx.restore();    \r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Explosion);\n\n//# sourceURL=webpack:///./javascript/obj/Explosion.js?");

/***/ }),

/***/ "./javascript/obj/GameObject.js":
/*!**************************************!*\
  !*** ./javascript/obj/GameObject.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n\r\n\r\n\r\nconst COLOR = 'black';\r\nconst RADIUS = 3;\r\nconst MAX_HEALTH = 100;\r\n\r\n\r\n// May be inefficient to create new position vectors all the time\r\nclass GameObject {\r\n  constructor(game) {\r\n    this.game = game;\r\n    this.cvs = game.cvs;\r\n    this.ctx = game.ctx;\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.alive = true;\r\n    this.pauseTime = 0;\r\n    this.paused = true;\r\n    this.unpausable = false;\r\n    this.silenced = false;\r\n\r\n    this.maxHealth = MAX_HEALTH;\r\n    this.health = MAX_HEALTH;\r\n\r\n    this.radius = RADIUS;\r\n    this.color = COLOR;\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  // Ensure objects do not leave the boundaries defined here.\r\n  validateBound(rectX, rectY) {\r\n    if (this.pos.x + this.r > rectX) this.pos.x = rectX - this.r;\r\n    if (this.pos.y + this.r > rectY) this.pos.y = rectY - this.r;\r\n    if (this.pos.x - this.r < 0) this.pos.x = this.r;\r\n    if (this.pos.y - this.r < 0) this.pos.y = this.r;\r\n  }\r\n\r\n  update() {\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n  }\r\n  \r\n  // Multiply velocity by the fractional difference in timeDelta\r\n  // Does not skip frames, but gives the illusion of same speed\r\n  addVelocityTimeDelta() {\r\n    if(this.game.fps <= 50) {\r\n      this.pos.add(this.vel.dup().multiply(this.game.timeDelta / this.game.normalTimeDelta));\r\n    } else {\r\n      this.pos.add(this.vel);\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (GameObject);\n\n//# sourceURL=webpack:///./javascript/obj/GameObject.js?");

/***/ }),

/***/ "./javascript/obj/LargeEnemyCircle.js":
/*!********************************************!*\
  !*** ./javascript/obj/LargeEnemyCircle.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/obj/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _behavior_FollowPlayerAI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./behavior/FollowPlayerAI */ \"./javascript/obj/behavior/FollowPlayerAI.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst COLOR = \"#a64942\";\r\nconst HEALTH = 6000;\r\nconst HEALTH_CAP = 18000;\r\n\r\nconst BASE_TURN_RATE = 0.25;\r\nconst ACCEL = 2;\r\nconst MAX_SPEED = 4;\r\nconst DAMAGE = 40;\r\n\r\nclass LargeEnemyCircle extends _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    this.aiCallback = () => {\r\n      this.aim = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(game.player.pos, this.pos).normalize();\r\n      let turnRate = BASE_TURN_RATE + Math.pow(game.difficulty, 1 / 2);\r\n      this.aim.multiply(turnRate).add(this.vel).normalize();\r\n\r\n      this.vel.add(this.aim.multiply(this.accel));\r\n    };\r\n\r\n    this.r = Math.floor(50 + Math.random() * 50);\r\n    if (this.game.state === \"STATE_OVER\") this.r *= 1 + Math.random() * 4;\r\n\r\n    if (Math.floor(Math.random() * 5) % 3 === 0) {\r\n      this.accel = ACCEL + Math.random() * Math.pow(this.game.difficulty, 1 / 2);\r\n      this.maxSpeed = MAX_SPEED + Math.random() * Math.pow(this.game.difficulty, 1 / 2);\r\n    } else {\r\n      this.accel = ACCEL / 2;\r\n      this.maxSpeed = MAX_SPEED;\r\n    }\r\n\r\n    this.health = HEALTH + this.r * 150;\r\n\r\n    if (this.health > HEALTH_CAP) this.health = HEALTH_CAP;\r\n\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.score = this.r * 2;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return;\r\n\r\n    if (obj instanceof _Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      if (this.checkAndHitPlayer(obj)) {\r\n        this.game.freeze(5);\r\n        \r\n      }\r\n    } else if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\r\n      this.checkAndSpreadEnemy(obj);\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (LargeEnemyCircle);\n\n//# sourceURL=webpack:///./javascript/obj/LargeEnemyCircle.js?");

/***/ }),

/***/ "./javascript/obj/Particle.js":
/*!************************************!*\
  !*** ./javascript/obj/Particle.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slam */ \"./javascript/obj/Slam.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 2;\r\nconst KNOCKBACK = 10;\r\nconst DAMAGE = 37;\r\nconst COLOR = \"#14ffec\";\r\nconst VELOCITY = 10;\r\nconst HIT_RADIUS = 7;\r\n\r\nclass Particle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n  constructor(\r\n    game, \r\n    startX = 0, \r\n    startY = 0, \r\n    vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0,0), \r\n    cb = () => {} \r\n  ) {\r\n    super(game);\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = vel || VELOCITY;\r\n    this.r = RADIUS;\r\n    this.hitRadius = HIT_RADIUS;\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.knockback = KNOCKBACK;\r\n    this.cb = cb;\r\n    this.aliveTime = 600;\r\n    this.active = true;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  validatePosition(rectX, rectY) {\r\n    if ( this.pos.x > rectX + this.r \r\n      || this.pos.x < 0 - this.r \r\n      || this.pos.y > rectY + this.r \r\n      || this.pos.y < 0 - this.r ) { \r\n        this.alive = false;\r\n      };\r\n  }\r\n\r\n  checkCollision (obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n\r\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      if (this.hitRadius * this.hitRadius + obj.r * obj.r > distSqr) {\r\n        this.alive = false;\r\n        let kb = this.vel.dup();\r\n        kb.normalize();\r\n        kb.multiply(this.knockback / Math.pow(obj.r / 6, 2));\r\n        obj.vel.add(kb);\r\n        obj.health -= this.damage;\r\n        \r\n        if (obj.health <= 0) {\r\n          obj.alive = false;\r\n          kb.normalize();\r\n          kb.multiply(this.knockback / 2);\r\n          obj.vel.add(kb);\r\n        }\r\n\r\n        this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, this.damage, 11, 30, this.vel.x));\r\n        let hitspark = new _Slam__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.game, this.pos.x, this.pos.y);\r\n        hitspark.aliveTime = 4;\r\n        hitspark.growthRate = 1;\r\n        hitspark.r = 1;\r\n        hitspark.damage = 0;\r\n        this.game.vanity.push(hitspark);\r\n\r\n        let hitEmit = new _Emitter__WEBPACK_IMPORTED_MODULE_5__[\"default\"](game, {\r\n          pos: { x: this.pos.x, y: this.pos.y },\r\n          r: 4,\r\n          aim: this.vel.dup(),\r\n          aliveTime: 20,\r\n          emitCount: 2,\r\n          ejectSpeed: 4,\r\n          impulseVariance: 0.15,\r\n          fanDegree: 10,\r\n        });\r\n\r\n        this.game.vanity.push(hitEmit);\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n    this.cb();\r\n    if(!this.active) return;\r\n    this.addVelocityTimeDelta();\r\n    this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n    this.validatePosition(this.cvs.width, this.cvs.height);\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (!this.alive) return;\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.fill();\r\n    // this.ctx.strokeStyle = this.color;\r\n    // this.ctx.stroke();\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Particle);\n\n//# sourceURL=webpack:///./javascript/obj/Particle.js?");

/***/ }),

/***/ "./javascript/obj/Player.js":
/*!**********************************!*\
  !*** ./javascript/obj/Player.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _factory_enemy_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory/enemy_factory */ \"./javascript/obj/factory/enemy_factory.js\");\n/* harmony import */ var _factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./factory/particle_factory */ \"./javascript/obj/factory/particle_factory.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slam */ \"./javascript/obj/Slam.js\");\n/* harmony import */ var _BeamSlash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BeamSlash */ \"./javascript/obj/BeamSlash.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _SlashSpark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SlashSpark */ \"./javascript/obj/SlashSpark.js\");\n/* harmony import */ var _DeathExplosion__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DeathExplosion */ \"./javascript/obj/DeathExplosion.js\");\n/* harmony import */ var _BeamCannon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./BeamCannon */ \"./javascript/obj/BeamCannon.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n/* harmony import */ var _Sparkle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Sparkle */ \"./javascript/obj/Sparkle.js\");\n/* harmony import */ var _Star__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Star */ \"./javascript/obj/Star.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import shotSfx from '../assets/laser7.wav';\r\n\r\nconst CLAMP_SPAWN = 200; // Offset from edges\r\nconst PLAYER_RADIUS = 11;\r\nconst COLOR = '#0d7377';\r\nconst MAX_HEALTH = 250;\r\n\r\nconst MAX_SPEED = 7;\r\nconst MIN_SPEED = 0.1;\r\nconst ACCEL = 3;\r\nconst DECEL = 0.9;\r\nconst SPRINT_SPEED = 8;\r\nconst MAX_SPRINT_SPEED = 10;\r\nconst DAMPENING_COEFFICIENT = 0.7;\r\nconst CLAMP_SPEED = 200;\r\n\r\nconst DASH_DURATION = 8;\r\nconst DASH_COUNT = 2;\r\nconst DASH_PATH_DURATION = 13;\r\nconst DASH_SPEED = 32;\r\nconst DASH_COOLDOWN = 70;\r\nconst POST_DASH_INVUL = 2;\r\n\r\nconst SLASH_COOLDOWN = 11;\r\nconst MAX_COMBOS = 3;\r\n\r\nconst CHARGE_COST = 100;\r\nconst CHARGING_TIME = 0; // in seconds \r\nconst CHARGE_STACKS = 2;\r\nconst CHARGE_COOLDOWN = 40;\r\nconst CHARGE_FREEZE = 20;\r\nconst SHOOT_COOLDOWN = 10;\r\nconst SHOOT_SHOTGUN_PELLETS = 60;\r\n\r\nconst STATE_WALKING = \"STATE_WALKING\";\r\nconst STATE_DASHING = \"STATE_DASHING\";\r\n\r\nconst KEY = {\r\n  W: 87,\r\n  A: 65,\r\n  S: 83,\r\n  D: 68,\r\n  R: 82,\r\n  ENTER: 13,\r\n  UP: 38,\r\n  LEFT: 37,\r\n  DOWN: 40,\r\n  RIGHT: 39,\r\n  SHIFT: 16,\r\n  SPACE: 32,\r\n  MOUSE_LEFT: 10000,\r\n  MOUSE_RIGHT: 10002,\r\n};\r\n\r\nconst MOUSE = {\r\n  LEFT: 0,\r\n  MIDDLE: 1,\r\n  RIGHT: 2,\r\n}\r\n\r\nclass Player extends _GameObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    \r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](CLAMP_SPAWN + Math.random() * (this.cvs.width - CLAMP_SPAWN * 2),\r\n                          CLAMP_SPAWN + Math.random() * (this.cvs.height - CLAMP_SPAWN * 2));\r\n    this.vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.movement = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.mousePos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.cvs.width / 2, this.cvs.height / 2);\r\n    this.moveState = STATE_WALKING;\r\n    this.r = PLAYER_RADIUS;\r\n    this.color = COLOR;\r\n    this.invul = 0;\r\n    this.noclip = 0;\r\n    \r\n    this.maxHealth = MAX_HEALTH;\r\n    this.health = this.maxHealth;\r\n    \r\n    this.shootCooldown = 0;\r\n    this.shooting = false;\r\n    this.beamCooldown = 0;\r\n    this.beamCooldownMax = CHARGE_COOLDOWN;\r\n    this.charging = false;\r\n    this.discharged = false;\r\n    this.charge = CHARGE_COST;\r\n    this.chargeCost = CHARGE_COST;\r\n        \r\n    this.slashReset = 0;\r\n    this.slashCombo = 0;\r\n    this.slashCooldown = 0;\r\n    this.maxSlashCombo = MAX_COMBOS;\r\n    \r\n    this.dashing = false;\r\n    this.dashDuration = 0;\r\n    this.dashPathDuration = 0;\r\n    this.dashDirection = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.dashCooldown = 0;\r\n    this.maxDashCooldown = DASH_COOLDOWN;\r\n    this.velRestoreDash = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); \r\n    \r\n    this.keyDown = {\r\n      [KEY.W]: false,\r\n      [KEY.A]: false,\r\n      [KEY.S]: false,\r\n      [KEY.D]: false,\r\n      [KEY.R]: false,\r\n      [KEY.SHIFT]: false,\r\n      [KEY.SPACE]: false,\r\n      [KEY.MOUSE_LEFT]: false,\r\n      [KEY.MOUSE_RIGHT]: false,\r\n    }\r\n\r\n    this.setMousePosition = this.setMousePosition.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  // Store mouse position relative to canvas origin\r\n  setMousePosition(e) {\r\n    var canvasRect = this.cvs.getBoundingClientRect();\r\n    this.mousePos.x = e.clientX - canvasRect.left;\r\n    this.mousePos.y = e.clientY - canvasRect.top;\r\n    // this.setAim();\r\n  }\r\n\r\n  heal(num = this.maxHealth) {\r\n    this.health += num;\r\n    this.health = Math.min(this.health, this.maxHealth);\r\n  }\r\n\r\n  // Set player's unnormalized aim relative to stored mouse position\r\n  setAim() {\r\n    this.aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.mousePos.x - this.pos.x, this.mousePos.y - this.pos.y);\r\n  }\r\n\r\n  // Dash in a direction for a few frames\r\n  dash() {\r\n    if (!this.dashing || this.game.cheat || this.dashCooldown <= this.maxDashCooldown / 2) {\r\n      this.dashing = true;\r\n      if (this.movement.length() === 0) return;\r\n      if (this.moveState !== STATE_DASHING) {\r\n        this.moveState = STATE_DASHING;\r\n        this.invul = Math.max(DASH_DURATION, this.invul);\r\n        this.noclip = Math.max(DASH_DURATION - 1, this.noclip);\r\n        this.dashDuration = DASH_DURATION;\r\n        this.dashPathDuration = DASH_PATH_DURATION;\r\n        this.dashCooldown += this.maxDashCooldown;\r\n        this.dashDirection = this.movement.dup().multiply(DASH_SPEED);\r\n\r\n        this.game.vanity.push(new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, this.r * 2, this.movement.dup().multiply(-7), 10, \"cyan\"));\r\n        let spark = new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, \"BEAM\", 150, 60, 17, Math.PI + Math.atan2(this.movement.y, this.movement.x), 0, true, function () { this.width *= 0.80; this.length *= 1.15 });\r\n        spark.color = [0, 255, 255];\r\n        this.game.vanity.push(spark);\r\n        let cb = function () {\r\n          this.length *= 1.12;\r\n          this.width *= 0.85;\r\n        }\r\n        let angle = Math.random() * Math.PI;\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 20, 40, 8, angle, 0, true, cb));\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 20, 40, 8, angle + Math.PI / 2, 0, true, cb));\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 8, 110, 14, angle + Math.PI / 4, 0, true, cb));\r\n        this.game.vanity.push(new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 8, 110, 14, angle + Math.PI / 4 * 3, 0, true, cb));\r\n        this.game.vanity.push(new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, this.r * 2, new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](), 3));\r\n      }\r\n    }\r\n  }\r\n\r\n  slash() {\r\n    this.game.playSoundMany(`${this.game.filePath}/assets/SE_00064.wav`, 0.13);\r\n    this.game.particles.push(new _BeamSlash__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, this, {pos: this.pos, combo: this.slashCombo}));\r\n    if (this.slashCombo === this.maxSlashCombo) {\r\n      this.slashCooldown = SLASH_COOLDOWN + 60;\r\n      this.slashCombo = 0;\r\n      this.shootCooldown = this.slashCooldown - 30;\r\n      this.invul += 40;\r\n      this.noclip += 50;\r\n      // this.pauseTime = 5;\r\n    } else {\r\n      this.slashCooldown = SLASH_COOLDOWN;\r\n      this.shootCooldown = this.slashCooldown + 5;\r\n      this.slashCombo++;\r\n      this.slashReset = SLASH_COOLDOWN * 1.6;\r\n    }\r\n  }\r\n\r\n  fireBeam() {\r\n    if (this.charge >= this.chargeCost) {\r\n      let freezeTime = CHARGE_FREEZE;\r\n      this.charge -= this.chargeCost;\r\n      this.beamCooldown = !this.game.cheat ? CHARGE_COOLDOWN : 2;\r\n      this.charging = true;\r\n\r\n      this.discharged = true;\r\n      this.invul = 5;\r\n\r\n      this.setAim();\r\n      let kb = this.aim.dup().normalize().multiply(-75);\r\n      this.vel.add(kb.dup().multiply(1/2));\r\n\r\n      let aim = kb.dup().normalize().multiply(-1);\r\n\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/SE_00016.wav`, 0.2);\r\n      let beam = new _BeamCannon__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.game, this.pos.x, this.pos.y, aim);\r\n      beam.activeTime = 40;\r\n      beam.damage = 8000;\r\n      beam.knockback = 20;\r\n      beam.width = 100;\r\n      beam.color = _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().TEAL;\r\n      this.game.delayedParticles.push(beam);\r\n\r\n      let shootFlash2 = new _Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.game, {\r\n        pos: { x: this.pos.x, y: this.pos.y },\r\n        r: 10,\r\n        aim: this.aim.dup(),\r\n        emittee: _Sparkle__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\r\n        aliveTime: 60,\r\n        emitCount: 60,\r\n        emitSpeed: 20,\r\n        ejectSpeed: 8,\r\n        impulseVariance: 1,\r\n        fanDegree: 1,\r\n        color: \"rgba(0, 188, 188, 1)\",\r\n        decayRate: 0.9,\r\n        width: 10,\r\n        lengthForward: 1100,\r\n        cb: function() {\r\n          if (this.aliveTime === this.initialTime - freezeTime + 1) {\r\n            this.vel.add(this.vel.dup().normalize().multiply(20));\r\n          }\r\n        }\r\n      });\r\n      this.game.delayedParticles.push(shootFlash2);\r\n\r\n      if (this.game.cheat) {\r\n        beam.width = 60;\r\n        beam.damage = 1500;\r\n        // this.vel.subtract(kb.multiply(0.9));\r\n        freezeTime = 0;\r\n        beam.knockback = 5;\r\n        beam.pos.x += Math.random() * 120 - 60;\r\n        beam.pos.y += Math.random() * 120 - 60;\r\n        // beam = new BeamCannon(this.game, beam.pos.x, beam.pos.y, aim);        \r\n        beam.activeTime = 20  \r\n        return;\r\n      };\r\n\r\n      this.game.freeze(freezeTime);\r\n\r\n      let sparkCB = function () {\r\n        this.length *= 0.70;\r\n        this.width *= 0.70;\r\n      }\r\n\r\n      let baseAngle = Math.floor(Math.random() * 360) * Math.PI / 180;\r\n      let spark1 = new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 70, 2000, 30, baseAngle, Math.PI / 20, false);\r\n      let spark2 = new _SlashSpark__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.game, this.pos.x, this.pos.y, 0, 70, 2000, 30, baseAngle + Math.PI / 2, Math.PI / 20, false);\r\n      spark1.cb = sparkCB;\r\n      spark2.cb = sparkCB;\r\n      this.game.vanity.push(spark1);\r\n      this.game.vanity.push(spark2);\r\n\r\n      let explosion1 = new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, 100);\r\n      explosion1.aliveTime = 7;\r\n      explosion1.color = \"rgba(255,255,255,.1)\";\r\n      this.game.vanity.push(explosion1);\r\n\r\n      let explosion2 = new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, 150);\r\n      explosion2.aliveTime = 5;\r\n      this.game.vanity.push(explosion2);\r\n\r\n      let explosion3 = new _Explosion__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.game, this.pos.x, this.pos.y, 100);\r\n      explosion3.color = \"rgba(255,50,50,.3)\";\r\n      explosion3.aliveTime = 7;\r\n        this.game.vanity.push(explosion3);\r\n\r\n      let beamInvis = new _BeamCannon__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.game, this.pos.x, this.pos.y, aim);\r\n      beamInvis.activeTime = 240;\r\n      beamInvis.initialTime = 240;\r\n      beamInvis.aliveTime = 240;\r\n      beamInvis.damage = 20;\r\n      beamInvis.knockback = 0;\r\n      beamInvis.width = 120;\r\n      beamInvis.length = 100;\r\n      beamInvis.color = [0, 255, 0];\r\n      beamInvis.alpha = 0;\r\n      beamInvis.paused = false;\r\n      beamInvis.unpausable = true;\r\n      beamInvis.silenced = true;\r\n      beamInvis.hitFrequency = 1;\r\n      beamInvis.hitLength = beamInvis.length;\r\n      beamInvis.hitWidth = beamInvis.width;\r\n      beamInvis.cb = function () {\r\n        this.pos.add(this.aim.dup().multiply(this.length + 5));\r\n      }\r\n      this.game.vanity.push(beamInvis);\r\n\r\n      let storeX = this.pos.x;\r\n      let storeY = this.pos.y;\r\n      let storeMouse = this.mousePos.dup();\r\n      setTimeout(function () {\r\n        let aim = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(storeMouse, this.pos);\r\n        let beam = new _BeamCannon__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.game, this.pos.x, this.pos.y, aim);\r\n        beam.color = _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().CANNON;\r\n        beam.width = 400;\r\n        beam.damage = 1000;\r\n        beam.knockback = 40;\r\n        beam.activeTime = 15;\r\n        this.game.particles.push(beam);\r\n\r\n        let shootFlash = new _Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.game, {\r\n          pos: { x: this.pos.x, y: this.pos.y },\r\n          r: 4,\r\n          aim: this.aim.dup(),\r\n          emittee: _Sparkle__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\r\n          aliveTime: 70,\r\n          emitCount: 60,\r\n          emitSpeed: 20,\r\n          ejectSpeed: 9,\r\n          impulseVariance: 1,\r\n          fanDegree: 10,\r\n          color: \"rgba(255, 0, 0, 0.9)\",\r\n          decayRate: 1.01,\r\n          width: 350,\r\n          lengthForward: 300,\r\n        });\r\n        this.game.delayedParticles.push(shootFlash);\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00049.wav`, 0.45);\r\n        let kb = aim.dup().normalize().multiply(-75);\r\n        this.vel.add(kb);\r\n      }.bind(this), this.game.normalTimeDelta * freezeTime + 250);\r\n\r\n\r\n      setTimeout(function() {\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/SE_00049.wav`, 0.3);\r\n      }, this.game.normalTimeDelta * freezeTime);\r\n    }\r\n  }\r\n\r\n  shoot() {\r\n    if (this.shooting === false) {\r\n      this.game.playSoundMany(`${this.game.filePath}/assets/laser7.wav`, 0.4);\r\n      this.shooting = true;\r\n      this.shootCooldown = SHOOT_COOLDOWN;\r\n      \r\n      let beam = new _BeamCannon__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.game, this.pos.x, this.pos.y, this.aim, 4000, 50, 200, 10);\r\n      beam.hitRatio = 0.85;\r\n      beam.bomb = false;\r\n      beam.aliveTime = 30;\r\n      beam.initialTime = beam.aliveTime;\r\n      beam.color = _Beam__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLOR().TEAL;\r\n      beam.knockback = 5;\r\n      this.game.particles.push(beam);\r\n\r\n      let shootFlash = new _Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.game, {\r\n        pos: {x: this.pos.x, y: this.pos.y},\r\n        r: 6,\r\n        aim: this.aim.dup(),\r\n        aliveTime: 20,\r\n        emitCount: 8,\r\n        emitSpeed: 8,\r\n        ejectSpeed: 4,\r\n        impulseVariance: 0.9,\r\n        fanDegree: 80,\r\n        lengthForward: 50,\r\n        color: \"rgba(0, 188, 188, 1)\",\r\n      });\r\n\r\n      this.game.vanity.push(shootFlash);\r\n\r\n      let shootFlashThin = new _Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.game, {\r\n        pos: { x: this.pos.x, y: this.pos.y },\r\n        r: 5,\r\n        aim: this.aim.dup(),\r\n        emittee: _Sparkle__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\r\n        aliveTime: 50,\r\n        emitCount: 20,\r\n        emitSpeed: 10,\r\n        ejectSpeed: 5,\r\n        impulseVariance: 0.9,\r\n        fanDegree: 1,\r\n        color: \"rgba(0, 205, 205,1)\",\r\n        decayRate: 0.9,\r\n        width: 5,\r\n        lengthForward: 1000,\r\n      });\r\n\r\n      this.game.vanity.push(shootFlashThin);\r\n    } else {\r\n      if (this.game.loopCount % 5 === 0) {\r\n        this.game.playSoundMany(`${this.game.filePath}/assets/laser7.wav`, 0.2);\r\n      }\r\n      Object(_factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n      Object(_factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n      Object(_factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n      Object(_factory_particle_factory__WEBPACK_IMPORTED_MODULE_3__[\"fireBulletAtCursor\"])(this);\r\n    }\r\n  }\r\n\r\n  mountController() {\r\n    document.addEventListener('keydown', (e) => {\r\n      let key = e.keyCode;\r\n      if(key === 8) this.health = 0; // BACKSPACE\r\n      if(key === 187) this.game.difficulty++; //EQUAL\r\n      if(key === 189) this.health += 100; //MINUS\r\n      if(key === 48) { //0\r\n        this.game.cheat = true;\r\n      }\r\n    \r\n      // Ignore keys that have not been bound\r\n      if (!Object.values(KEY).includes(key)) return;\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          if (key !== KEY.ENTER && key !== KEY.SPACE) { \r\n            this.keyDown[key] = true;\r\n            this.game.transitionToStartGame();\r\n          }\r\n          break;\r\n        case this.game.STATE_STARTING:\r\n          this.keyDown[key] = true;\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          this.keyDown[key] = true;\r\n          if (key == KEY.DOWN) for (var i = 1; i < 5; i++) this.game.entities.push(_factory_enemy_factory__WEBPACK_IMPORTED_MODULE_2__[\"spawnCircleRandom\"](this));\r\n          if (key == KEY.UP) this.chargeCost = 0;\r\n          if (key == KEY.RIGHT) this.maxDashCooldown = 20;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          if (key === KEY.ENTER) this.game.restartGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.addEventListener('keyup', (e) => {\r\n      let key = e.keyCode;\r\n      if (!Object.values(KEY).includes(key)) return;\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          this.keyDown[key] = false;\r\n          break;\r\n        case this.game.STATE_STARTING:\r\n          this.keyDown[key] = false;\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          this.keyDown[key] = false;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.onmousemove = (e) => {\r\n      this.setMousePosition(e);\r\n    };\r\n\r\n    // Disable right click context menu\r\n    document.addEventListener(\"contextmenu\", (e) => { \r\n      e.preventDefault();\r\n      return false;\r\n    });\r\n\r\n    document.addEventListener(\"mousedown\", (e) => {\r\n      e.preventDefault();\r\n      let clickType = e.button;\r\n\r\n      // If the player's mouse is over the audio icon, toggle audio\r\n      if (\r\n        this.mousePos.x >= this.cvs.width - 100 &&\r\n        this.mousePos.x <= this.cvs.width &&\r\n        this.mousePos.y >= 0 &&\r\n        this.mousePos.y <= 100) {\r\n        this.game.mute = !this.game.mute;\r\n        this.game.mute ? this.game.bgm.pause() : this.game.bgm.play();\r\n        return;\r\n      }\r\n\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          if (\r\n            this.mousePos.x >= 0 &&\r\n            this.mousePos.x <= 100 &&\r\n            this.mousePos.y >= 0 &&\r\n            this.mousePos.y <= 100) {\r\n              window.location.href = \"https://www.linkedin.com/in/cdnguyen714/\";\r\n              return;\r\n          }\r\n          this.game.transitionToStartGame();\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\r\n          break;\r\n        case this.game.STATE_STARTING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = true;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = true;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", (e) => {\r\n      e.preventDefault();\r\n      let clickType = e.button;\r\n\r\n      switch (this.game.state) {\r\n        case this.game.STATE_INIT:\r\n          break;\r\n        case this.game.STATE_BEGIN:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = false;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = false;\r\n          break;\r\n        case this.game.STATE_STARTING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = false;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = false;\r\n          break;\r\n        case this.game.STATE_RUNNING:\r\n          if (clickType === MOUSE.LEFT) this.keyDown[KEY.MOUSE_LEFT] = false;\r\n          if (clickType === MOUSE.RIGHT) this.keyDown[KEY.MOUSE_RIGHT] = false;\r\n          break;\r\n        case this.game.STATE_OVER:\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  dampSpeed() {\r\n    let vel = this.vel.length();\r\n    if(vel > CLAMP_SPEED) {\r\n      this.vel.normalize().multiply(CLAMP_SPEED);\r\n    }\r\n    if (vel > MAX_SPEED) {\r\n      this.vel.multiply(DAMPENING_COEFFICIENT);\r\n    }\r\n  }\r\n\r\n  applyDecel() {\r\n    if(this.keyDown[KEY.W]) return;\r\n    if(this.keyDown[KEY.A]) return;\r\n    if(this.keyDown[KEY.S]) return;\r\n    if(this.keyDown[KEY.D]) return;\r\n    let result = this.vel.multiply(DECEL);\r\n    if (result.x < MIN_SPEED || result.x > -1 * MIN_SPEED) result.x = 0; \r\n    if (result.y < MIN_SPEED || result.y > -1 * MIN_SPEED) result.y = 0; \r\n    this.vel = result;\r\n  }\r\n\r\n  update() {\r\n    // if player is dead, simplify update loop\r\n    if (!this.alive) {\r\n      this.dampSpeed();\r\n      this.addVelocityTimeDelta();\r\n      this.applyDecel();\r\n      this.validateBound(this.cvs.width, this.cvs.height);\r\n      return;\r\n    }\r\n\r\n    if (this.game.cheat) {\r\n      if (this.dashCooldown > DASH_DURATION) this.dashCooldown = DASH_DURATION;\r\n      this.maxDashCooldown = DASH_DURATION;\r\n      this.chargeCost = 0;\r\n    }\r\n\r\n    if (this.shootCooldown > 0) this.shootCooldown--;\r\n    if (this.dashCooldown > 0) this.dashCooldown--;\r\n    if (this.slashCooldown > 0) this.slashCooldown--;\r\n    if (this.beamCooldown > 0) this.beamCooldown--;\r\n    if (this.invul >= 0) this.invul--;\r\n    if (this.noclip >= 0) this.noclip--;\r\n    if (this.charge > this.chargeCost * CHARGE_STACKS) this.charge = Math.floor(this.chargeCost * CHARGE_STACKS);\r\n    if (this.discharged) {\r\n      this.charging = false;\r\n      this.discharged = false;\r\n    }\r\n    if (this.dashPathDuration > 0) {\r\n      this.dashPathDuration--;\r\n\r\n      let p = new _Particle__WEBPACK_IMPORTED_MODULE_8__[\"default\"](game, this.pos.x, this.pos.y);\r\n      p.color = \"cyan\";\r\n      p.aliveTime = DASH_DURATION + 5;\r\n      p.r = this.r;\r\n      p.active = false;\r\n      p.cb = function () {\r\n        this.aliveTime--;\r\n        if (this.aliveTime <= 5) this.color = `rgba(128,128,128,${this.aliveTime / 5})`;\r\n\r\n        if (this.aliveTime <= 0) this.alive = false;\r\n\r\n      }\r\n      this.game.vanity.push(p);\r\n    }\r\n\r\n    // handle combo reset logic\r\n    this.slashReset > 0 ? this.slashReset-- : this.slashCombo = 0;\r\n    \r\n    // if player is paused, do not apply movement or actions\r\n    if (this.pauseTime > 0) {\r\n      this.pauseTime--;\r\n      if(this.pauseTime === 0) {\r\n        // this.vel = this.velRestoreDash;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Calculate facing direction and apply controls\r\n    this.setAim();\r\n\r\n    this.movement = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    if (this.keyDown[KEY.W]) this.movement.y -= 1;\r\n    if (this.keyDown[KEY.A]) this.movement.x -= 1;\r\n    if (this.keyDown[KEY.S]) this.movement.y += 1;\r\n    if (this.keyDown[KEY.D]) this.movement.x += 1;\r\n    this.movement.normalize();\r\n\r\n    if(this.vel.length() > 0) {\r\n      let thruster = new _Emitter__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.game, {\r\n        pos: { x: this.pos.x, y: this.pos.y },\r\n        r: 8,\r\n        aim: this.vel.dup().multiply(-1),\r\n        aliveTime: 10,\r\n        emitCount: 2,\r\n        emitSpeed: 1,\r\n        ejectSpeed: 0.5,\r\n        impulseVariance: .5,\r\n        fanDegree: 30,\r\n        color: \"rgba(0, 188, 188, 0.7)\",\r\n        decayRate: 0.8,\r\n      });\r\n\r\n      this.game.vanity.push(thruster);\r\n    }\r\n\r\n    if (this.keyDown[KEY.MOUSE_LEFT] && this.slashCooldown <= 0) this.slash();\r\n    if (this.keyDown[KEY.MOUSE_RIGHT] && this.shootCooldown <= 0) this.shoot();\r\n    if (!this.keyDown[KEY.MOUSE_RIGHT]) this.shooting = false;\r\n    if (this.keyDown[KEY.SHIFT] && this.dashCooldown <= (DASH_COUNT - 1) * this.maxDashCooldown) this.dash();\r\n    if (!this.keyDown[KEY.SHIFT]) this.dashing = false;\r\n    if (this.keyDown[KEY.SPACE] && this.beamCooldown <= 0) this.fireBeam();\r\n\r\n    // Apply movement\r\n    switch (this.moveState) {\r\n      case STATE_WALKING:\r\n        this.vel.add(this.movement.dup().multiply(ACCEL));\r\n\r\n        this.dampSpeed();\r\n        this.addVelocityTimeDelta();\r\n        this.applyDecel();\r\n        break;\r\n      case STATE_DASHING:\r\n        if (this.dashDuration <= 0) {\r\n          this.invul = Math.max(POST_DASH_INVUL, this.invul);\r\n          this.moveState = STATE_WALKING;\r\n        } else {\r\n          this.dashDuration--;\r\n          while (this.vel.length() < DASH_SPEED) {\r\n            this.vel.add(this.dashDirection.dup().multiply(1/5));\r\n          }\r\n        }\r\n\r\n        this.vel.add(this.movement.dup().multiply(ACCEL));\r\n        if (this.vel.length() > DASH_SPEED) this.vel.normalize().multiply(DASH_SPEED);\r\n        this.addVelocityTimeDelta();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // add sparks for charge level\r\n    // if (this.game.loopCount % 2) {\r\n    //   if (this.charge >= this.chargeCost * 2) {\r\n    //     this.game.vanity.push(new SlashSpark(this.game, this.pos.x, this.pos.y, \"FINISHER\", 3, this.r * 2));\r\n    //   } else if (this.charge >= this.chargeCost) {\r\n    //     this.game.vanity.push(new SlashSpark(this.game, this.pos.x, this.pos.y, \"CRIT\", 2, this.r * 1.5));\r\n    //   }\r\n    // }\r\n\r\n    this.validateBound(this.cvs.width, this.cvs.height);\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.strokeStyle = \"white\";\r\n\r\n    this.ctx.shadowBlur = 6;\r\n    this.ctx.shadowColor = \"white\";\r\n    \r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n\r\n    this.ctx.restore();\r\n\r\n    // draw cooldowns\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = \"white\";\r\n    this.ctx.shadowBlur = 6;\r\n    this.ctx.shadowColor = \"white\";\r\n    this.ctx.lineWidth = 6;\r\n    this.ctx.arc(this.pos.x, this.pos.y, 20, 0, 2 * Math.PI * (this.dashCooldown / this.maxDashCooldown));\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n\r\n    this.ctx.restore();\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack:///./javascript/obj/Player.js?");

/***/ }),

/***/ "./javascript/obj/RangedEnemy.js":
/*!***************************************!*\
  !*** ./javascript/obj/RangedEnemy.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./javascript/obj/Player.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _Explosion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Explosion */ \"./javascript/obj/Explosion.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _EnemyParticle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EnemyParticle */ \"./javascript/obj/EnemyParticle.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Emitter */ \"./javascript/obj/Emitter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 10;\r\nconst COLOR = \"orange\";\r\nconst KNOCKBACK = 10;\r\nconst ENEMY_KNOCKBACK_MULTIPLIER = 2.5;\r\nconst DAMPENING_COEFFICIENT = 0.7;\r\nconst SPREAD_FACTOR = 2.0;\r\nconst HEALTH = 600;\r\nconst HEALTH_CAP = 1200;\r\nconst DAMAGE = 1;\r\nconst SCORE = 20;\r\nconst BASE_TURN_RATE = 2;\r\nconst ACCEL = 3;\r\nconst MAX_SPEED = 5;\r\nconst FIRE_COOLDOWN = 180;\r\nconst FIRE_VEL = 6;\r\nconst KEEPAWAY_RANGE = 500;\r\n\r\nclass RangedEnemy extends _EnemyCircle__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\r\n  constructor(game) {\r\n    super(game);\r\n    this.aiCallback = () => {\r\n      this.aim = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(game.player.pos, this.pos);\r\n      let distance = this.aim.length();\r\n      this.aim.normalize();\r\n      let turnRate = BASE_TURN_RATE + Math.pow(game.difficulty, 1 / 3);\r\n      this.aim.multiply(turnRate).add(this.vel).normalize();\r\n\r\n      if (distance >= KEEPAWAY_RANGE || !game.player.alive) {\r\n        this.vel.add(this.aim.dup().multiply(this.accel));\r\n      } else {\r\n        this.vel.add(this.aim.dup().multiply(-this.accel));\r\n      }\r\n    };\r\n\r\n    this.health = HEALTH + game.difficulty * 3;\r\n\r\n    this.accel = ACCEL + Math.random() * Math.pow(game.difficulty, 1 / 3) / 4;\r\n    this.maxSpeed = MAX_SPEED;\r\n\r\n    if (this.health > HEALTH_CAP) this.health = HEALTH_CAP;\r\n\r\n    this.attackCooldown = FIRE_COOLDOWN;\r\n    this.r = RADIUS;\r\n    this.color = COLOR;\r\n    this.damage = DAMAGE;\r\n    this.score = SCORE;\r\n\r\n    this.update = this.update.bind(this);\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  fire() {\r\n    if (this.pos.x > this.cvs.width + this.r ||\r\n        this.pos.x < 0 - this.r ||\r\n        this.pos.y > this.cvs.height + this.r ||\r\n        this.pos.y < 0 - this.r ) {\r\n      return;\r\n    };\r\n    this.attackCooldown = FIRE_COOLDOWN;\r\n\r\n    let vel = this.pos.dup().subtract(this.game.player.pos).normalize().multiply(-FIRE_VEL);\r\n    let p = new _EnemyParticle__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.game, {pos: this.pos, vel, r: this.r * 2 + this.game.difficulty / 4});\r\n    this.game.enemyParticles.push(p);\r\n    let explosion = new _Explosion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.game, this.pos.x, this.pos.y);\r\n    explosion.aliveTime = 7;\r\n    explosion.r = this.r + 20;\r\n    this.game.vanity.push(explosion);\r\n\r\n    let shootFlash = new _Emitter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.game, {\r\n      pos: { x: this.pos.x, y: this.pos.y },\r\n      r: 6,\r\n      aim: _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(game.player.pos, this.pos).normalize(),\r\n      aliveTime: 25,\r\n      emitCount: 8,\r\n      ejectSpeed: 5,\r\n      impulseVariance: 0.8,\r\n      fanDegree: 50,\r\n      color: \"#ff6229\",\r\n      lengthForward: 20,\r\n    });\r\n    this.game.vanity.push(shootFlash);\r\n\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return;\r\n    this.aiCallback();\r\n    this.dampSpeed();\r\n    this.addVelocityTimeDelta();\r\n    this.validateBound(this.cvs.width, this.cvs.height);    \r\n\r\n    this.attackCooldown > 0 ? this.attackCooldown-- : this.fire();\r\n\r\n    // Check collision with player\r\n    this.checkCollision(this.game.players[0]);\r\n\r\n    // Many-many collision is very heavy - please refactor at some point or implement quadtree\r\n    this.game.entities.forEach(entity => this.checkCollision(entity));\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.strokeStyle = 'black';\r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (RangedEnemy);\n\n//# sourceURL=webpack:///./javascript/obj/RangedEnemy.js?");

/***/ }),

/***/ "./javascript/obj/Slam.js":
/*!********************************!*\
  !*** ./javascript/obj/Slam.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst RADIUS = 100;\r\nconst KNOCKBACK = 150;\r\nconst DAMAGE = 70;\r\nconst GROWTH_RATE = 10;\r\n// const COLOR = \"white\";\r\n\r\nclass Slam extends _GameObject__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\r\n  constructor(game, startX, startY) {\r\n    super(game);\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY);\r\n    this.vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    this.r = RADIUS;\r\n    this.color = this.game.player.color;\r\n    this.damage = DAMAGE;\r\n    this.knockback = KNOCKBACK;\r\n    this.aliveTime = 10;\r\n    this.initialTime= this.aliveTime;\r\n    this.growthRate = GROWTH_RATE;\r\n    this.cb = () => {};\r\n\r\n    // this.update = this.update.bind(this);\r\n    // this.draw = this.draw.bind(this);\r\n  }\r\n\r\n\r\n  checkCollision(obj) {\r\n    if (!obj.alive) return; //Don't check collision if object is not alive\r\n\r\n    let diff = _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].difference(this.pos, obj.pos);\r\n    let distSqr = diff.dot(diff);\r\n    if (obj instanceof _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\r\n      if (this.r * this.r + obj.r * obj.r > distSqr) {\r\n        diff.normalize();\r\n        obj.vel.add(diff.multiply(-this.knockback));\r\n        obj.health -= this.damage;\r\n        if (obj.health <= 0) obj.alive = false;\r\n        this.game.vanity.push(new _DamageNumber__WEBPACK_IMPORTED_MODULE_3__[\"default\"](obj, this.damage));\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (!this.alive) return; //Don't check collision if object is not alive\r\n    \r\n    if(this.aliveTime === this.initialTime) {\r\n      this.game.entities.forEach(entity => { this.checkCollision(entity) });\r\n      this.game.freeze(5);\r\n    }\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n  }\r\n\r\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\r\n  draw() {\r\n    if (this.aliveTime > this.initialTime - 5) {\r\n      this.ctx.save();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = this.color;\r\n      this.ctx.fill(); \r\n      this.ctx.strokeStyle = \"white\";\r\n      this.ctx.stroke(); \r\n      this.ctx.restore();\r\n    } else {\r\n      this.ctx.save();\r\n\r\n      this.r += this.growthRate;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\r\n      this.ctx.fillStyle = \"rgba(0,0,0,0)\";\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = \"white\";\r\n     \r\n      this.ctx.shadowBlur = 30;\r\n      this.ctx.shadowColor = this.color;\r\n      this.ctx.stroke();  \r\n\r\n      this.ctx.restore();\r\n  \r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Slam);\n\n//# sourceURL=webpack:///./javascript/obj/Slam.js?");

/***/ }),

/***/ "./javascript/obj/SlashSpark.js":
/*!**************************************!*\
  !*** ./javascript/obj/SlashSpark.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Particle */ \"./javascript/obj/Particle.js\");\n\r\n\r\n\r\n\r\nconst WIDTH = 1;\r\nconst LENGTH = 60;\r\n\r\nconst DURATION = 30;\r\nconst FREEZE_DURATION = 3;\r\n\r\nconst COLOR = {\r\n  NORMAL: [255, 255, 255],\r\n  CRIT: [255, 255, 0],\r\n  CANNON: [0, 0, 0],\r\n  CYAN: [0, 255, 255],\r\n}\r\n//\r\n// hitspark for beams\r\n//\r\nclass SlashSpark extends _Particle__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n  constructor(game, x, y, \r\n      combo = 0, \r\n      width = WIDTH, \r\n      length = LENGTH, \r\n      duration = DURATION, \r\n      angle = Math.floor(Math.random() * 360) * Math.PI / 180, \r\n      rotation = 0, \r\n      pauseState = true,\r\n      cb = function() {}) {\r\n    super(game);\r\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y);\r\n    this.combo = combo;\r\n    this.width = width;\r\n    this.length = length;\r\n    this.aliveTime = duration;\r\n    this.initialTime = this.aliveTime;\r\n    this.rotation = rotation;\r\n    this.paused = pauseState;\r\n    this.dist = -FREEZE_DURATION;\r\n    this.distLimit = 50 + Math.random() * 150;\r\n    this.cb = cb;\r\n\r\n    this.offsets = [];\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n    this.offsets.push(-Math.PI / 32 + Math.random() * Math.PI / 16);\r\n\r\n    // this.angle = Math.atan2(this.aim.y, this.aim.x);\r\n\r\n    this.angle = angle;\r\n    // let newAim = new Vector(1, 0);\r\n    // newAim.multiply(1, -1);\r\n\r\n    // let x2 = newAim.x * Math.cos(angle) - newAim.y * Math.sin(angle);\r\n    // let y2 = newAim.y * Math.cos(angle) + newAim.x * Math.sin(angle);\r\n    // // debugger\r\n    // this.aim = new Vector(-x2, -y2);\r\n\r\n    switch(this.combo) {\r\n      case \"FINISHER\":\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      case \"BEAM\":\r\n        // this.angle = (Math.atan2(this.aim.y, this.aim.x));\r\n        this.color = COLOR.CANNON;\r\n        break;\r\n      case \"CRIT\":\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      case 3:\r\n        this.color = COLOR.CRIT;\r\n        break;\r\n      default:\r\n        this.color = COLOR.NORMAL;\r\n        break;\r\n    }\r\n  }\r\n\r\n  checkCollision(obj) {\r\n    // SlashSpark does not check collision\r\n  }\r\n\r\n  drawRect(offset, colorIn, widthMod = 1, lengthMod = 1) {\r\n    \r\n    this.ctx.save();\r\n\r\n    let percent = this.aliveTime / this.initialTime;\r\n    let color;\r\n    if (this.combo === \"FINISHER\") {\r\n      this.aliveTime >= this.initialTime - 2 \r\n        ? color = `rgba(${colorIn[0]},${colorIn[1]},${colorIn[2]},${1})` \r\n        : color = `rgba(${colorIn[0]},${colorIn[1]},${colorIn[2]},${percent})`\r\n    } else if (this.combo === \"BEAM\") {\r\n      this.aliveTime >= this.initialTime - 2 \r\n        ? color = `rgba(255,255,255,${1})`\r\n        : color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`\r\n    } else {\r\n      this.aliveTime >= this.initialTime - 1\r\n        ? color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent})`\r\n        : color = `rgba(${this.color[0]},${this.color[1]},${this.color[2]},${percent - 0.3})`\r\n    }\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.strokeStyle = color;\r\n    // Offset the rect based on its width but maintain origin\r\n    this.ctx.translate(this.pos.x + Math.sin(this.angle + offset) * widthMod * this.width / 2,\r\n                       this.pos.y - Math.cos(this.angle + offset) * widthMod * this.width / 2);\r\n    this.ctx.rotate(this.angle + offset);\r\n    this.ctx.fillRect(this.dist, 0, this.length * lengthMod, widthMod * this.width);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  update() {\r\n    this.angle += this.rotation;\r\n    // transient effect\r\n    \r\n    if(this.dist <= 0) {\r\n      this.dist += 1;\r\n    } else if (this.dist > 0 && this.dist < this.distLimit) {\r\n      switch (this.combo) {\r\n        case \"FINISHER\":\r\n          this.dist += this.distLimit / 5;\r\n          this.length -= this.distLimit / 8;\r\n          this.width *= 1.04;\r\n          break;\r\n        case \"BEAM\":\r\n          this.length *= 0.93;\r\n          this.width *= 0.84;\r\n          break;\r\n        default:\r\n          this.dist += this.distLimit / 5;\r\n          this.length -= this.distLimit / 8;\r\n          this.width *= 0.95;\r\n          break;\r\n      }\r\n    } else {\r\n      switch (this.combo) {\r\n        case \"FINISHER\":\r\n          this.width *= 0.8;\r\n          this.length *= 0.84;\r\n          this.dist += 6;\r\n          break;\r\n        case \"BEAM\":\r\n          break;\r\n        default:\r\n          this.dist += 2;\r\n          this.length *= 0.8;\r\n          this.width *= 0.8;\r\n          break;\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if (this.aliveTime <= 0) {\r\n      this.alive = false;\r\n    }\r\n    this.aliveTime--;\r\n    this.cb();\r\n\r\n  }\r\n\r\n  draw() {\r\n    let color = [Math.random() * 255, Math.random() * 255, Math.random() * 255];\r\n    if (this.combo === \"BEAM\") {\r\n      this.drawRect(0, color, 1    , 1.5);\r\n      this.drawRect(0, color, 3 / 4, 1.55);\r\n      this.drawRect(0, color, 1 / 3, 1.58);\r\n      // this.drawRect(this.offsets[1]);\r\n    } else {\r\n\r\n      this.drawRect(0, color);\r\n      this.drawRect(Math.PI, color);\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (SlashSpark);\n\n//# sourceURL=webpack:///./javascript/obj/SlashSpark.js?");

/***/ }),

/***/ "./javascript/obj/Sparkle.js":
/*!***********************************!*\
  !*** ./javascript/obj/Sparkle.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slam */ \"./javascript/obj/Slam.js\");\n\n\n\n\n\n\nconst RADIUS = 4;\nconst COLOR = \"white\";\nconst DECAY = 0.9;\nconst DURATION = 20;\n\nclass Sparkle extends _GameObject__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(\n    game,\n    {  \n      pos = {x: 0, y: 0},\n      vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0),\n      cb = () => { },\n      color = COLOR,\n      r = RADIUS,\n      decayRate = DECAY,\n      aliveTime = DURATION,\n    }\n  ) {\n    super(game);\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x, pos.y);\n    this.vel = vel;\n    this.initialR = r;\n    this.r = r;\n    this.color = color;\n    this.cb = cb;\n    this.initialTime = aliveTime;\n    this.aliveTime = aliveTime;\n    this.decayRate = decayRate;\n    this.active = true;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  validatePosition(rectX, rectY) {\n    if (this.pos.x > rectX + this.r\n      || this.pos.x < 0 - this.r\n      || this.pos.y > rectY + this.r\n      || this.pos.y < 0 - this.r) {\n      this.alive = false;\n    };\n  }\n\n  checkCollision(obj) {\n    return;\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n    if (!this.active) return;\n    this.r = this.initialR * this.aliveTime / this.initialTime;\n    this.pos = this.pos.add(this.vel);\n    this.aliveTime--;\n    this.cb();\n    if (this.aliveTime <= 0) this.alive = false;\n    \n    this.addVelocityTimeDelta();\n\n    if (this.aliveTime < this.initialTime - 6) {\n      this.vel = this.vel.multiply(this.decayRate);\n    }\n    this.validatePosition(this.cvs.width, this.cvs.height);\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    if (!this.alive) return;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n\n    this.ctx.closePath();\n    this.ctx.restore();\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sparkle);\n\n//# sourceURL=webpack:///./javascript/obj/Sparkle.js?");

/***/ }),

/***/ "./javascript/obj/Star.js":
/*!********************************!*\
  !*** ./javascript/obj/Star.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObject */ \"./javascript/obj/GameObject.js\");\n/* harmony import */ var _DamageNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DamageNumber */ \"./javascript/obj/DamageNumber.js\");\n/* harmony import */ var _Slam__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slam */ \"./javascript/obj/Slam.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Beam */ \"./javascript/obj/Beam.js\");\n\n\n\n\n\n\n\nconst RADIUS = 4;\nconst COLOR = \"white\";\nconst DECAY = 0.9;\nconst DURATION = 20;\n\nclass Star extends _Beam__WEBPACK_IMPORTED_MODULE_5__[\"default\"] {\n  constructor(\n    game,\n    {\n      pos = { x: 0, y: 0 },\n      vel = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0),\n      cb = () => { },\n      color = _Beam__WEBPACK_IMPORTED_MODULE_5__[\"default\"].COLOR().TEAL,\n      length = 60,\n      width = 10,\n      spread = 0,\n      aliveTime = 60,\n      expandRate = 1.06,\n      thinningRate = 0.75,\n    }\n  ) {\n    super(game, {pos: pos});\n    this.pos = new _lib_Vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pos.x - spread / 2+ Math.random() * spread, pos.y - spread / 2 + Math.random() * spread);\n    this.angle = 0;\n    this.vel = vel;\n    this.color = color;\n    this.cb = cb;\n    this.initialTime = aliveTime;\n    this.aliveTime = aliveTime;\n    this.length = length;\n    this.width = width;\n    this.spread = spread;\n    this.aliveTime = aliveTime;\n    this.expandRate = expandRate;\n    this.thinningRate = thinningRate;\n    this.active = true;\n    this.silenced = true;\n    this.unpausable = true;\n    this.paused = false;\n\n    this.update = this.update.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n  validatePosition(rectX, rectY) {\n    if (this.pos.x > rectX + this.length / 2\n      || this.pos.x < 0 - this.length / 2\n      || this.pos.y > rectY + this.length / 2\n      || this.pos.y < 0 - this.length / 2) {\n      this.alive = false;\n    };\n  }\n\n  checkCollision(obj) {\n    return;\n  }\n\n  update() {\n    if (!this.alive) return; //Don't check collision if object is not alive\n    if (!this.active) return;\n    this.cb();\n    \n    this.width *= this.thinningRate;\n    this.length *= this.expandRate;\n    \n    this.addVelocityTimeDelta();\n    this.validatePosition(this.cvs.width, this.cvs.height);\n    this.aliveTime--;\n    if (this.aliveTime <= 0) this.alive = false;\n  }\n\n  drawRect() {\n    // Offset the rect based on its width but maintain origin\n    this.ctx.translate(this.pos.x, this.pos.y);\n    this.ctx.fillRect(0, this.width / -2, this.length, this.width);\n    this.ctx.rotate(Math.PI / 2);\n    this.ctx.fillRect(0, this.width / -2, this.length, this.width);\n    this.ctx.rotate(Math.PI / 2);\n    this.ctx.fillRect(0, this.width / -2, this.length, this.width);\n    this.ctx.rotate(Math.PI / 2);\n    this.ctx.fillRect(0, this.width / -2, this.length, this.width);\n  }\n\n  // ctx.arc(x, y, r, sAngle, eAngle, [counterclockwise])\n  draw() {\n    if (!this.alive) return;\n\n    if (this.aliveTime > this.initialTime - 6) {\n      let color = this.color;\n\n      this.ctx.save();\n      this.ctx.beginPath();\n      this.ctx.fillStyle = `rgba(${color[0]},${color[1]},${color[2]},0.9)`;\n      this.ctx.strokeStyle = `rgba(${color[0]},${color[1]},${color[2]},0.9)`;\n      this.ctx.shadowColor = `rgba(${color[0]},${color[1]},${color[2]},0.9)`;\n      this.ctx.shadowBlur = 30;\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.drawRect();\n      this.ctx.restore();\n    } else {\n      let color = _Beam__WEBPACK_IMPORTED_MODULE_5__[\"default\"].COLOR().FADE;\n\n      this.ctx.save();\n      this.ctx.beginPath();\n\n      this.ctx.fillStyle = `rgba(${color[0]},${color[1]},${color[2]}, ${Math.pow((this.aliveTime + 3) / (this.initialTime - 6), 3)})`;\n      this.ctx.shadowColor = `rgba(${color[0]},${color[1]},${color[2]}, ${Math.pow((this.aliveTime + 3) / (this.initialTime - 6), 3)})`;\n      this.ctx.shadowBlur = 50;\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.drawRect();\n      this.ctx.restore();\n    }\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Star);\n\n//# sourceURL=webpack:///./javascript/obj/Star.js?");

/***/ }),

/***/ "./javascript/obj/behavior/FollowPlayerAI.js":
/*!***************************************************!*\
  !*** ./javascript/obj/behavior/FollowPlayerAI.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return followPlayerAI; });\n\r\nfunction followPlayerAI(player) {\r\n\r\n}\n\n//# sourceURL=webpack:///./javascript/obj/behavior/FollowPlayerAI.js?");

/***/ }),

/***/ "./javascript/obj/factory/enemy_factory.js":
/*!*************************************************!*\
  !*** ./javascript/obj/factory/enemy_factory.js ***!
  \*************************************************/
/*! exports provided: randomEdgePos, spawnCircleRandom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomEdgePos\", function() { return randomEdgePos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spawnCircleRandom\", function() { return spawnCircleRandom; });\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/Vector */ \"./javascript/lib/Vector.js\");\n/* harmony import */ var _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EnemyCircle */ \"./javascript/obj/EnemyCircle.js\");\n/* harmony import */ var _LargeEnemyCircle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../LargeEnemyCircle */ \"./javascript/obj/LargeEnemyCircle.js\");\n/* harmony import */ var _RangedEnemy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../RangedEnemy */ \"./javascript/obj/RangedEnemy.js\");\n/* harmony import */ var _DashingEnemy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DashingEnemy */ \"./javascript/obj/DashingEnemy.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MAP = {\r\n  TOP: 0,\r\n  LEFT: 1,\r\n  BOTTOM: 2,\r\n  RIGHT: 3,\r\n}\r\n\r\n// const SPAWN_OFFSET = 20;\r\nconst BASE_TURN_RATE = 0.25;\r\nconst BOSS_SPAWN_RATE = 20;\r\nconst RANGED_SPAWN_RATE = 70;\r\nconst DASH_SPAWN_RATE = 120;\r\n\r\nconst randomEdgePos = (canvas, radius) => {\r\n  let side = Math.floor(Math.random() * 4);\r\n\r\n  let pos = { x: Math.random() * canvas.width,\r\n              y: Math.random() * canvas.height };\r\n\r\n  switch(side) {\r\n    case MAP.TOP:\r\n      pos.y = -radius;\r\n      break;\r\n    case MAP.LEFT:\r\n      pos.x = -radius;\r\n      break;\r\n    case MAP.BOTTOM:\r\n      pos.y = canvas.height + radius;\r\n      break;\r\n    case MAP.RIGHT:\r\n      pos.x = canvas.width + radius;\r\n      break;\r\n  }\r\n\r\n  return pos;\r\n}\r\n\r\nconst spawnCircleRandom = (player) => {\r\n  let num = Math.floor(Math.random() * 1000);\r\n  let enemyRate = 0\r\n  let enemy;\r\n  let spawnPos = randomEdgePos(player.cvs, 100);\r\n\r\n  if (num <= (enemyRate += BOSS_SPAWN_RATE)) {\r\n    enemy = new _LargeEnemyCircle__WEBPACK_IMPORTED_MODULE_2__[\"default\"](player.game);\r\n  } else if (num <= (enemyRate += RANGED_SPAWN_RATE)) {\r\n    enemy = new _RangedEnemy__WEBPACK_IMPORTED_MODULE_3__[\"default\"](player.game);\r\n  } else if (num <= (enemyRate += DASH_SPAWN_RATE)) {\r\n    enemy = new _DashingEnemy__WEBPACK_IMPORTED_MODULE_4__[\"default\"](player.game, {pos: {x: spawnPos.x, y: spawnPos.y}});\r\n    // enemy = new DashingEnemy(player.game);\r\n  } else {\r\n    enemy = new _EnemyCircle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game);\r\n  }\r\n\r\n  enemy.pos.x = spawnPos.x;\r\n  enemy.pos.y = spawnPos.y;\r\n\r\n  return enemy;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./javascript/obj/factory/enemy_factory.js?");

/***/ }),

/***/ "./javascript/obj/factory/particle_factory.js":
/*!****************************************************!*\
  !*** ./javascript/obj/factory/particle_factory.js ***!
  \****************************************************/
/*! exports provided: fireBulletAtCursor, fireBulletAtCursorB, fireBeamAtCursor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursor\", function() { return fireBulletAtCursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBulletAtCursorB\", function() { return fireBulletAtCursorB; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fireBeamAtCursor\", function() { return fireBeamAtCursor; });\n/* harmony import */ var _Particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Particle */ \"./javascript/obj/Particle.js\");\n/* harmony import */ var _Beam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Beam */ \"./javascript/obj/Beam.js\");\n/* harmony import */ var _lib_Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/Vector */ \"./javascript/lib/Vector.js\");\n\r\n\r\n\r\n\r\n\r\nconst BULLET_SPEED = 20;\r\nconst BULLET_SPREAD = 0.12;\r\n\r\nconst fireBulletAtCursor = (player) => {\r\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\r\n  p.pos.x = player.pos.x;\r\n  p.pos.y = player.pos.y;\r\n  p.color = \"#14ffec\";\r\n\r\n  let aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  aim.x += Math.random() * (BULLET_SPREAD * 2) - BULLET_SPREAD;\r\n  aim.y += Math.random() * (BULLET_SPREAD * 2) - BULLET_SPREAD;\r\n  aim.normalize();\r\n  p.vel = aim.multiply(BULLET_SPEED * (1 - BULLET_SPREAD ) + BULLET_SPREAD / 2 + Math.random() * BULLET_SPREAD);\r\n  p.pos.add(aim.dup().normalize().multiply(-1 * Math.random() * 10));\r\n  player.game.particles.push(p);\r\n}\r\n\r\nconst fireBulletAtCursorB = (player) => {\r\n  let p = new _Particle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](player.game);\r\n  p.pos.x = player.pos.x;\r\n  p.pos.y = player.pos.y;\r\n  p.color = 'orange';\r\n  p.damage = 25;\r\n  p.r = 3;\r\n\r\n  let aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  let spread = BULLET_SPREAD / 2;\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  aim.x += Math.random() * (spread * 2) - spread;\r\n  aim.y += Math.random() * (spread * 2) - spread;\r\n  aim.normalize();\r\n  p.vel = aim.multiply(BULLET_SPEED * 1.3 * (1 - spread) + spread / 2 + Math.random() * spread);\r\n  p.pos.add(aim.dup().normalize().multiply(-1 * Math.random() * 50));\r\n  player.game.particles.push(p);\r\n}\r\n\r\nconst fireBeamAtCursor = (player) => {\r\n  let p = new _Beam__WEBPACK_IMPORTED_MODULE_1__[\"default\"](player.game, {pos: player.pos});\r\n  p.color = player.color;\r\n\r\n  let aim = new _lib_Vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1);\r\n  aim.multiply(player.aim);\r\n  aim.normalize();\r\n  p.aim = aim;\r\n  \r\n  return p;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./javascript/obj/factory/particle_factory.js?");

/***/ })

/******/ });